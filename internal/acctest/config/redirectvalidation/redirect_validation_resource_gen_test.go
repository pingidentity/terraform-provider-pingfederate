// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package redirectvalidation_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccRedirectValidation_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: redirectValidation_MinimalHCL(),
				Check:  redirectValidation_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: redirectValidation_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               redirectValidation_CompleteHCL(),
				ResourceName:                         "pingfederate_redirect_validation.example",
				ImportStateVerifyIdentifierAttribute: "redirect_validation_local_settings.%",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: redirectValidation_MinimalHCL(),
				Check:  redirectValidation_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func redirectValidation_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_redirect_validation" "example" {
}
data "pingfederate_redirect_validation" "example" {
  depends_on = [pingfederate_redirect_validation.example]
}
`)
}

// Maximal HCL with all values set where possible
func redirectValidation_CompleteHCL() string {
	versionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedHcl += `
    uri_allow_list = [
      {
        target_resource_sso      = true
        target_resource_slo      = false
        in_error_resource        = true
        idp_discovery            = false
        allow_query_and_fragment = true
        valid_uri                = "https://example.com"
      }
    ]
		`
	}
	return fmt.Sprintf(`
resource "pingfederate_redirect_validation" "example" {
  redirect_validation_local_settings = {
    enable_in_error_resource_validation                 = true
    enable_target_resource_validation_for_idp_discovery = true
    enable_target_resource_validation_for_slo           = true
    enable_target_resource_validation_for_sso           = true
    white_list = [
      {
        allow_query_and_fragment = true
        idp_discovery            = true
        in_error_resource        = true
        require_https            = true
        target_resource_slo      = true
        target_resource_sso      = true
        valid_domain             = "example.com"
        valid_path               = "/path"
      },
      {
        allow_query_and_fragment = true
        idp_discovery            = true
        in_error_resource        = true
        require_https            = true
        target_resource_slo      = true
        target_resource_sso      = true
        valid_domain             = "second.example.com"
        valid_path               = "/second/path"
      }
    ]
	%s
  }
  redirect_validation_partner_settings = {
    enable_wreply_validation_slo = true
  }
}
data "pingfederate_redirect_validation" "example" {
  depends_on = [pingfederate_redirect_validation.example]
}
`, versionedHcl)
}

// Validate any computed values when applying minimal HCL
func redirectValidation_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_local_settings.enable_in_error_resource_validation", "false"),
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_local_settings.enable_target_resource_validation_for_idp_discovery", "false"),
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_local_settings.enable_target_resource_validation_for_slo", "false"),
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_local_settings.enable_target_resource_validation_for_sso", "false"),
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_local_settings.uri_allow_list.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_local_settings.white_list.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_redirect_validation.example", "redirect_validation_partner_settings.enable_wreply_validation_slo", "false"),
	)
}
