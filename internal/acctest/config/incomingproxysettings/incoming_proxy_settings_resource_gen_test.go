// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package acctest_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccIncomingProxySettings_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: incomingProxySettings_MinimalHCL(),
				Check:  incomingProxySettings_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: incomingProxySettings_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               incomingProxySettings_CompleteHCL(),
				ResourceName:                         "pingfederate_incoming_proxy_settings.example",
				ImportStateVerifyIdentifierAttribute: "proxy_terminates_https_conns",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: incomingProxySettings_MinimalHCL(),
				Check:  incomingProxySettings_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func incomingProxySettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_incoming_proxy_settings" "example" {
}
`)
}

// Maximal HCL with all values set where possible
func incomingProxySettings_CompleteHCL() string {
	versionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedHcl += `
	client_cert_header_encoding_format = "NGINX"
	enable_client_cert_header_auth = true
		`
	}
	return fmt.Sprintf(`
resource "pingfederate_incoming_proxy_settings" "example" {
  client_cert_chain_ssl_header_name = "MyHeader"
  client_cert_ssl_header_name = "MyHeader"
  forwarded_host_header_index = "FIRST"
  forwarded_host_header_name = "MyHeader"
  forwarded_ip_address_header_index = "LAST"
  forwarded_ip_address_header_name = "MyHeader"
  proxy_terminates_https_conns = true
  %s
}
`, versionedHcl)
}

func incomingProxySettings_VersionedComputedCheck() resource.TestCheckFunc {
	if acctest.VersionAtLeast(version.PingFederate1220) {
		return resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttr("pingfederate_incoming_proxy_settings.example", "client_cert_header_encoding_format", "APACHE_MOD_SSL"),
			resource.TestCheckResourceAttr("pingfederate_incoming_proxy_settings.example", "enable_client_cert_header_auth", "false"),
		)
	}
	return resource.ComposeTestCheckFunc()
}

// Validate any computed values when applying minimal HCL
func incomingProxySettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_incoming_proxy_settings.example", "client_cert_chain_ssl_header_name"),
		resource.TestCheckNoResourceAttr("pingfederate_incoming_proxy_settings.example", "client_cert_ssl_header_name"),
		resource.TestCheckNoResourceAttr("pingfederate_incoming_proxy_settings.example", "forwarded_host_header_index"),
		resource.TestCheckNoResourceAttr("pingfederate_incoming_proxy_settings.example", "forwarded_host_header_name"),
		resource.TestCheckNoResourceAttr("pingfederate_incoming_proxy_settings.example", "forwarded_ip_address_header_index"),
		resource.TestCheckNoResourceAttr("pingfederate_incoming_proxy_settings.example", "forwarded_ip_address_header_name"),
		resource.TestCheckResourceAttr("pingfederate_incoming_proxy_settings.example", "proxy_terminates_https_conns", "false"),
		incomingProxySettings_VersionedComputedCheck(),
	)
}
