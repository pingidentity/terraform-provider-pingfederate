// Code generated by ping-terraform-plugin-framework-generator

package notificationpublishers_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const notificationPublisherPublisherId = "notificationPublisherPublisherId"

func TestAccNotificationPublisher_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: notificationPublisher_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: notificationPublisher_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					notificationPublisher_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccNotificationPublisher_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: notificationPublisher_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: notificationPublisher_MinimalHCL(),
				Check:  notificationPublisher_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  notificationPublisher_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: notificationPublisher_CompleteHCL(),
				Check:  notificationPublisher_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: notificationPublisher_MinimalHCL(),
				Check:  notificationPublisher_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: notificationPublisher_CompleteHCL(),
				Check:  notificationPublisher_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               notificationPublisher_CompleteHCL(),
				ResourceName:                         "pingfederate_notification_publisher.example",
				ImportStateId:                        notificationPublisherPublisherId,
				ImportStateVerifyIdentifierAttribute: "publisher_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func notificationPublisher_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_notification_publisher" "example" {
  publisher_id = "%s"
  configuration = {
    fields = [
      {
        name  = "From Address"
        value = "example@example.com"
      },
      {
        name  = "Email Server"
        value = "smtp.example.com"
      }
    ]
  }
  name = "MyNotificationPublisher"
  plugin_descriptor_ref = {
    id = "com.pingidentity.email.SmtpNotificationPlugin"
  }
}
`, notificationPublisherPublisherId)
}

// Maximal HCL with all values set where possible
func notificationPublisher_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_notification_publisher" "example" {
  publisher_id = "%s"
  configuration = {
    fields = [
      {
        name  = "From Address"
        value = "example@example.com"
      },
      {
        name  = "Email Server"
        value = "smtp.example.com"
      },
      {
        name  = "Sender Name"
        value = ""
      },
      {
        name  = "SMTP Port"
        value = "25"
      },
      {
        name  = "Encryption Method"
        value = "NONE"
      },
      {
        name  = "SMTPS Port"
        value = "465"
      },
      {
        name  = "Verify Hostname"
        value = "true"
      },
      {
        name  = "UTF-8 Message Header Support"
        value = "false"
      },
      {
        name  = "Username"
        value = ""
      },
      {
        name  = "Password"
        value = ""
      },
      {
        name  = "Test Address"
        value = ""
      },
      {
        name  = "Connection Timeout"
        value = "30"
      },
      {
        name  = "Enable SMTP Debugging Messages"
        value = "false"
      }
    ]
    tables = []
  }
  name = "My Updated Notification Publisher"
  plugin_descriptor_ref = {
    id = "com.pingidentity.email.SmtpNotificationPlugin"
  }
}
`, notificationPublisherPublisherId)
}

// Validate any computed values when applying minimal HCL
func notificationPublisher_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "id", notificationPublisherPublisherId),
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "configuration.fields_all.#", "13"),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_notification_publisher.example", "configuration.fields_all.*",
			map[string]string{
				"name":  "SMTP Port",
				"value": "25",
			},
		),
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "configuration.tables.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "configuration.tables_all.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func notificationPublisher_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "id", notificationPublisherPublisherId),
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "configuration.fields_all.#", "13"),
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "configuration.tables.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_notification_publisher.example", "configuration.tables_all.#", "0"),
	)
}

// Delete the resource
func notificationPublisher_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.NotificationPublishersAPI.DeleteNotificationPublisher(acctest.TestBasicAuthContext(), notificationPublisherPublisherId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func notificationPublisher_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.NotificationPublishersAPI.DeleteNotificationPublisher(acctest.TestBasicAuthContext(), notificationPublisherPublisherId).Execute()
	if err == nil {
		return fmt.Errorf("notification_publisher still exists after tests. Expected it to be destroyed")
	}
	return nil
}
