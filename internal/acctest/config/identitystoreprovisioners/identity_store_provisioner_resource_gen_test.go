// Code generated by ping-terraform-plugin-framework-generator

package identitystoreprovisioners_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const identityStoreProvisionerProvisionerId = "identityStoreProvisionerProvisio"

func TestAccIdentityStoreProvisioner_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: identityStoreProvisioner_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: identityStoreProvisioner_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					identityStoreProvisioner_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccIdentityStoreProvisioner_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: identityStoreProvisioner_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: identityStoreProvisioner_MinimalHCL(),
				Check:  identityStoreProvisioner_CheckComputedValues(),
			},
			{
				// Delete the minimal model
				Config:  identityStoreProvisioner_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: identityStoreProvisioner_CompleteHCL(),
				Check:  identityStoreProvisioner_CheckComputedValues(),
			},
			{
				// Back to minimal model
				Config: identityStoreProvisioner_MinimalHCL(),
				Check:  identityStoreProvisioner_CheckComputedValues(),
			},
			{
				// Back to complete model
				Config: identityStoreProvisioner_CompleteHCL(),
				Check:  identityStoreProvisioner_CheckComputedValues(),
			},
			{
				// Test importing the resource
				Config:                               identityStoreProvisioner_CompleteHCL(),
				ResourceName:                         "pingfederate_identity_store_provisioner.example",
				ImportStateId:                        identityStoreProvisionerProvisionerId,
				ImportStateVerifyIdentifierAttribute: "provisioner_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func identityStoreProvisioner_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_identity_store_provisioner" "example" {
  provisioner_id = "%s"
  attribute_contract = {
    core_attributes = []
    extended_attributes = [
      {
        name = "testuserinitial"
      }
    ]
  }
  configuration = {
  }
  group_attribute_contract = {
    core_attributes = []
    extended_attributes = [
      {
        name = "testgroupinitial"
      }
    ]
  }
  name = "My Identity Store Provisioner"
  plugin_descriptor_ref = {
    id = "com.pingidentity.identitystoreprovisioners.sample.SampleIdentityStoreProvisioner"
  }
}
`, identityStoreProvisionerProvisionerId)
}

// Maximal HCL with all values set where possible
func identityStoreProvisioner_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_identity_store_provisioner" "example" {
  provisioner_id = "%s"
  attribute_contract = {
    core_attributes = [
      {
        name = "username"
      }
    ]
    extended_attributes = [
      {
        name = "testuser"
      }
    ]
  }
  configuration = {
    fields = [
      {
        name  = "Delete user behavior"
        value = "Disable User"
      }
    ]
    tables = []
  }
  group_attribute_contract = {
    core_attributes = [
      {
        name = "groupname"
      }
    ]
    extended_attributes = [
      {
        name = "testgroup"
      }
    ]
  }
  name = "My Updated Name"
  plugin_descriptor_ref = {
    id = "com.pingidentity.identitystoreprovisioners.sample.SampleIdentityStoreProvisioner"
  }
}
`, identityStoreProvisionerProvisionerId)
}

// Validate any computed values when applying HCL
func identityStoreProvisioner_CheckComputedValues() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_identity_store_provisioner.example", "configuration.fields_all.0.name", "Delete user behavior"),
		resource.TestCheckResourceAttr("pingfederate_identity_store_provisioner.example", "configuration.fields_all.0.value", "Disable User"),
		resource.TestCheckResourceAttr("pingfederate_identity_store_provisioner.example", "configuration.tables_all.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_identity_store_provisioner.example", "attribute_contract.core_attributes_all.0.name", "username"),
		resource.TestCheckResourceAttr("pingfederate_identity_store_provisioner.example", "group_attribute_contract.core_attributes_all.0.name", "groupname"),
	)
}

// Delete the resource
func identityStoreProvisioner_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.IdentityStoreProvisionersAPI.DeleteIdentityStoreProvisioner(acctest.TestBasicAuthContext(), identityStoreProvisionerProvisionerId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func identityStoreProvisioner_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.IdentityStoreProvisionersAPI.DeleteIdentityStoreProvisioner(acctest.TestBasicAuthContext(), identityStoreProvisionerProvisionerId).Execute()
	if err == nil {
		return fmt.Errorf("identity_store_provisioner still exists after tests. Expected it to be destroyed")
	}
	return nil
}
