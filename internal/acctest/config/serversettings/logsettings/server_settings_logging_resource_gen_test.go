// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package serversettingslogsettings_test

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccServerSettingsLogging_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: serverSettingsLogging_MinimalHCL(),
				Check:  serverSettingsLogging_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  serverSettingsLogging_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: serverSettingsLogging_CompleteHCL(),
				Check:  serverSettingsLogging_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: serverSettingsLogging_MinimalHCL(),
				Check:  serverSettingsLogging_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: serverSettingsLogging_CompleteHCL(),
				Check:  serverSettingsLogging_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               serverSettingsLogging_CompleteHCL(),
				ResourceName:                         "pingfederate_server_settings_logging.example",
				ImportStateVerifyIdentifierAttribute: "log_categories.#",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func serverSettingsLogging_MinimalHCL() string {
	//TODO when the plugin framework fixes issues with Set plans, we can test this resource with a
	// minimal model. For now, just testing setting all values. See the schema
	// in server_settings_logging_resource.go for details.
	return fmt.Sprintf(`
resource "pingfederate_server_settings_logging" "example" {
  log_categories = [
    {
      id      = "policytree"
      enabled = false
    },
    {
      id      = "core"
      enabled = true
    },
    {
      id      = "trustedcas"
      enabled = true
    },
    {
      id      = "xmlsig"
      enabled = true
    },
  ]
}
data "pingfederate_server_settings_logging" "example" {
  depends_on = [pingfederate_server_settings_logging.example]
}
`)
}

// Maximal HCL with all values set where possible
func serverSettingsLogging_CompleteHCL() string {
	versionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1200) {
		versionedHcl += `
	{
		id = "protocolrequestresponse"
		enabled = false
	},
		`
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedHcl += `
	{
		id = "dsresponsetime"
		enabled = false
	},
		`
	}
	return fmt.Sprintf(`
resource "pingfederate_server_settings_logging" "example" {
  log_categories = [
    {
      id      = "policytree"
      enabled = false
    },
    {
      id      = "core"
      enabled = true
    },
    {
      id      = "trustedcas"
      enabled = true
    },
    {
      id      = "xmlsig"
      enabled = false
    },
    {
      id      = "requestheaders"
      enabled = false
    },
    {
      id      = "requestparams"
      enabled = true
    },
    {
      id      = "restdatastore"
      enabled = true
    },
		%s
  ]
}
data "pingfederate_server_settings_logging" "example" {
  depends_on = [pingfederate_server_settings_logging.example]
}
`, versionedHcl)
}

func serverSettingsLogging_logCategoriesCount() string {
	baseCount := 7
	if acctest.VersionAtLeast(version.PingFederate1200) {
		baseCount++
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		baseCount++
	}
	return strconv.Itoa(baseCount)
}

// Validate any computed values when applying minimal HCL
func serverSettingsLogging_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Debug logging for XML signature operations.",
				"enabled":     "true",
				"id":          "xmlsig",
				"name":        "XML Signatures",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Debug logging for core components.",
				"enabled":     "true",
				"id":          "core",
				"name":        "Core",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Log PingFederate and JRE trusted CAs when they are loaded.",
				"enabled":     "true",
				"id":          "trustedcas",
				"name":        "Trusted CAs",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Policy tree debug logging.",
				"enabled":     "false",
				"id":          "policytree",
				"name":        "Policy Tree",
			},
		),
		resource.TestCheckResourceAttr("pingfederate_server_settings_logging.example", "log_categories_all.#", serverSettingsLogging_logCategoriesCount()),
	)
}

// Validate any computed values when applying complete HCL
func serverSettingsLogging_CheckComputedValuesComplete() resource.TestCheckFunc {
	versionedChecks := []resource.TestCheckFunc{}
	if acctest.VersionAtLeast(version.PingFederate1200) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
				map[string]string{
					"description": "Log protocol request and response messages.",
					"enabled":     "false",
					"id":          "protocolrequestresponse",
					"name":        "Protocol Requests and Responses",
				},
			),
		)
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
				map[string]string{
					"description": "Log response times for data store requests.",
					"enabled":     "false",
					"id":          "dsresponsetime",
					"name":        "Data Store Response Times",
				},
			),
		)
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Debug logging for XML signature operations.",
				"enabled":     "false",
				"id":          "xmlsig",
				"name":        "XML Signatures",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Debug logging for core components.",
				"enabled":     "true",
				"id":          "core",
				"name":        "Core",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Log PingFederate and JRE trusted CAs when they are loaded.",
				"enabled":     "true",
				"id":          "trustedcas",
				"name":        "Trusted CAs",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Policy tree debug logging.",
				"enabled":     "false",
				"id":          "policytree",
				"name":        "Policy Tree",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Log HTTP GET request parameters. Sensitive information, such as passwords, may be logged when this category is enabled.",
				"enabled":     "true",
				"id":          "requestparams",
				"name":        "HTTP Request Parameters",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Log HTTP request headers. Sensitive information, such as passwords, may be logged when this category is enabled.",
				"enabled":     "false",
				"id":          "requestheaders",
				"name":        "HTTP Request Headers",
			},
		),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_server_settings_logging.example", "log_categories.*",
			map[string]string{
				"description": "Log REST datastore requests and responses. Sensitive information, such as passwords, may be logged when this category is enabled.",
				"enabled":     "true",
				"id":          "restdatastore",
				"name":        "REST Data Store Requests and Responses",
			},
		),
		resource.TestCheckResourceAttr("pingfederate_server_settings_logging.example", "log_categories_all.#", serverSettingsLogging_logCategoriesCount()),
	)
}
