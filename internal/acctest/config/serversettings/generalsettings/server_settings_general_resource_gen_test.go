// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package serversettingsgeneralsettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccServerSettingsGeneral_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: serverSettingsGeneral_MinimalHCL(),
				Check:  serverSettingsGeneral_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: serverSettingsGeneral_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               serverSettingsGeneral_CompleteHCL(),
				ResourceName:                         "pingfederate_server_settings_general.example",
				ImportStateVerifyIdentifierAttribute: "datastore_validation_interval_secs",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: serverSettingsGeneral_MinimalHCL(),
				Check:  serverSettingsGeneral_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func serverSettingsGeneral_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_server_settings_general" "example" {
}
data "pingfederate_server_settings_general" "example" {
  depends_on = [pingfederate_server_settings_general.example]
}
`)
}

// Maximal HCL with all values set where possible
func serverSettingsGeneral_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_server_settings_general" "example" {
  datastore_validation_interval_secs          = 360
  disable_automatic_connection_validation     = true
  idp_connection_transaction_logging_override = "ENHANCED"
  request_header_for_correlation_id           = "MyHeader"
  sp_connection_transaction_logging_override  = "STANDARD"
}
data "pingfederate_server_settings_general" "example" {
  depends_on = [pingfederate_server_settings_general.example]
}
`)
}

// Validate any computed values when applying minimal HCL
func serverSettingsGeneral_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_server_settings_general.example", "datastore_validation_interval_secs", "300"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_general.example", "disable_automatic_connection_validation", "false"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_general.example", "idp_connection_transaction_logging_override", "DONT_OVERRIDE"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_general.example", "request_header_for_correlation_id", ""),
		resource.TestCheckResourceAttr("pingfederate_server_settings_general.example", "sp_connection_transaction_logging_override", "DONT_OVERRIDE"),
	)
}
