// Code generated by ping-terraform-plugin-framework-generator

package serversettingsoutboundprovisioning_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccServerSettingsOutboundProvisioning_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: serverSettingsOutboundProvisioning_MinimalHCL(),
				Check:  serverSettingsOutboundProvisioning_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: serverSettingsOutboundProvisioning_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               serverSettingsOutboundProvisioning_CompleteHCL(),
				ResourceName:                         "pingfederate_server_settings_outbound_provisioning.example",
				ImportStateVerifyIdentifierAttribute: "data_store_ref.%",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: serverSettingsOutboundProvisioning_MinimalHCL(),
				Check:  serverSettingsOutboundProvisioning_CheckComputedValuesMinimal(),
			},
		},
	})
}

func jdbcDataStoreHCL() string {
	return `
resource "pingfederate_data_store" "jdbcDataStore" {
  data_store_id         = "jdbcDataStore"
  mask_attribute_values = false
  jdbc_data_store = {
    name                         = "jdbcDataStore"
    connection_url               = "jdbc:hsqldb:$${pf.server.data.dir}$${/}hypersonic$${/}ProvisionerDefaultDB;hsqldb.lock_file=false"
    driver_class                 = "org.hsqldb.jdbcDriver"
    user_name                    = "sa"
    password                     = "2FederateM0re"
    allow_multi_value_attributes = false
    connection_url_tags = [
      {
        connection_url = "jdbc:hsqldb:$${pf.server.data.dir}$${/}hypersonic$${/}ProvisionerDefaultDB;hsqldb.lock_file=false",
        default_source = true
      }
    ]
    min_pool_size    = 10
    max_pool_size    = 100
    blocking_timeout = 5000
    idle_timeout     = 5
  }
}
`
}

// Minimal HCL with only required values set
func serverSettingsOutboundProvisioning_MinimalHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_server_settings_outbound_provisioning" "example" {
}
`, jdbcDataStoreHCL())
}

// Maximal HCL with all values set where possible
func serverSettingsOutboundProvisioning_CompleteHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_server_settings_outbound_provisioning" "example" {
  data_store_ref = {
    id = pingfederate_data_store.jdbcDataStore.data_store_id
  }
  synchronization_frequency = 120
}
`, jdbcDataStoreHCL())
}

// Validate any computed values when applying minimal HCL
func serverSettingsOutboundProvisioning_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.TestCheckResourceAttr("pingfederate_server_settings_outbound_provisioning.example", "synchronization_frequency", "60")
}
