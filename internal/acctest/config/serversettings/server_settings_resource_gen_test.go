// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package serversettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccServerSettings_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: serverSettings_MinimalHCL(),
				Check:  serverSettings_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model
				Config: serverSettings_CompleteHCL(),
				Check:  serverSettings_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               serverSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_server_settings.example",
				ImportStateVerifyIdentifierAttribute: "federation_info.saml_2_entity_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: serverSettings_MinimalHCL(),
				Check:  serverSettings_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func serverSettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_server_settings" "example" {
  federation_info = {
    base_url         = "https://localhost:9999"
    saml_2_entity_id = "initial.pingidentity.com"
  }
}
data "pingfederate_server_settings" "example" {
  depends_on = [pingfederate_server_settings.example]
}
`)
}

// Maximal HCL with all values set where possible
func serverSettings_CompleteHCL() string {
	notificationsVersionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1200) {
		notificationsVersionedHcl += `
	  expired_certificate_administrative_console_warning_days = 10
	  expiring_certificate_administrative_console_warning_days = 11
	  thread_pool_exhaustion_notification_settings = {
		thread_dump_enabled = false
		notification_publisher_ref = {
          id = pingfederate_notification_publisher.example.id
		}
		email_address = "alertalert@example.com"
		notification_mode = "NOTIFICATION_PUBLISHER"
	  }
		`
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		notificationsVersionedHcl = `
	  bulkhead_alert_notification_settings = {
	    email_address = "example@example.com"
		thread_dump_enabled = false
		notification_publisher_ref = {
          id = pingfederate_notification_publisher.example.id
		}
		notification_mode = "NOTIFICATION_PUBLISHER"
	  }
		`
	}
	return fmt.Sprintf(`
resource "pingfederate_notification_publisher" "example" {
  configuration = {
    fields = [
      {
        name  = "Connection Timeout"
        value = "30"
      },
      {
        name  = "Email Server"
        value = "example.com"
      },
      {
        name  = "Enable SMTP Debugging Messages"
        value = "false"
      },
      {
        name  = "Encryption Method"
        value = "NONE"
      },
      {
        name  = "From Address"
        value = "example@pingidentity.com"
      },
      {
        name  = "SMTP Port"
        value = "25"
      },
      {
        name  = "SMTPS Port"
        value = "465"
      },
      {
        name  = "UTF-8 Message Header Support"
        value = "false"
      },
      {
        name  = "Verify Hostname"
        value = "true"
      },
    ]
  }
  name = "serverSettingsPub"
  plugin_descriptor_ref = {
    id = "com.pingidentity.email.SmtpNotificationPlugin"
  }
  publisher_id = "serverSettingsPub"
}

resource "pingfederate_server_settings" "example" {
  contact_info = {
    company    = "mycompany"
    email      = "mycompany@example.com"
    first_name = "Ashen"
    last_name  = "One"
    phone      = "1234567890"
  }
  federation_info = {
    base_url          = "https://localhost:9999"
    saml_1x_issuer_id = "asdf"
    saml_2_entity_id  = "initial.pingidentity.com"
    wsfed_realm       = "myrealm"
  }
  notifications = {
    account_changes_notification_publisher_ref = {
      id = pingfederate_notification_publisher.example.id
    }
    certificate_expirations = {
      email_address          = "john@example.com"
      final_warning_period   = 8
      initial_warning_period = 40
      notification_publisher_ref = {
        id = pingfederate_notification_publisher.example.id
      }
      notification_mode = "NOTIFICATION_PUBLISHER"
    }
    license_events = {
      email_address = "licensenotif@example.com"
      notification_publisher_ref = {
        id = pingfederate_notification_publisher.example.id
      }
    }
    metadata_notification_settings = {
      email_address = "metadatanotif@example.com"
      notification_publisher_ref = {
        id = pingfederate_notification_publisher.example.id
      }
    }
    notify_admin_user_password_changes = true
	%s
  }
  # Ensures this resource will be updated before deleting the notification publisher
  lifecycle {
    create_before_destroy = true
  }
}
data "pingfederate_server_settings" "example" {
  depends_on = [pingfederate_server_settings.example]
}
`, notificationsVersionedHcl)
}

// Validate any computed values when applying minimal HCL
func serverSettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	versionedChecks := []resource.TestCheckFunc{}
	if acctest.VersionAtLeast(version.PingFederate1200) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckResourceAttr("pingfederate_server_settings.example", "notifications.expired_certificate_administrative_console_warning_days", "14"),
			resource.TestCheckResourceAttr("pingfederate_server_settings.example", "notifications.expiring_certificate_administrative_console_warning_days", "14"),
		)
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "contact_info.company"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "contact_info.email"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "contact_info.first_name"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "contact_info.last_name"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "contact_info.phone"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "federation_info.saml_1x_issuer_id", ""),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "federation_info.saml_1x_source_id", ""),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "federation_info.wsfed_realm", ""),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.account_changes_notification_publisher_ref"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.bulkhead_alert_notification_settings"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.certificate_expirations"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.license_events"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.metadata_notification_settings"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "notifications.notify_admin_user_password_changes", "false"),
		resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.thread_pool_exhaustion_notification_settings"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.enable_idp_discovery", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_outbound_provisioning", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_saml_1_0", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_saml_1_1", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_ws_fed", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_ws_trust", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.saml_2_0_profile.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.oauth_role.enable_oauth", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.oauth_role.enable_open_id_connect", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_inbound_provisioning", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_open_id_connect", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_saml_1_0", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_saml_1_1", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_ws_fed", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_ws_trust", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.saml_2_0_profile.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.saml_2_0_profile.enable_xasp", "true"),
		resource.ComposeTestCheckFunc(versionedChecks...),
	)
}

// Validate any computed values when applying complete HCL
func serverSettings_CheckComputedValuesComplete() resource.TestCheckFunc {
	versionedChecks := []resource.TestCheckFunc{}
	if !acctest.VersionAtLeast(version.PingFederate1200) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckNoResourceAttr("pingfederate_server_settings.example", "notifications.thread_pool_exhaustion_notification_settings"),
		)
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "federation_info.saml_1x_source_id", ""),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.enable_idp_discovery", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_outbound_provisioning", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_saml_1_0", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_saml_1_1", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_ws_fed", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.enable_ws_trust", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.idp_role.saml_2_0_profile.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.oauth_role.enable_oauth", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.oauth_role.enable_open_id_connect", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_inbound_provisioning", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_open_id_connect", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_saml_1_0", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_saml_1_1", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_ws_fed", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.enable_ws_trust", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.saml_2_0_profile.enable", "true"),
		resource.TestCheckResourceAttr("pingfederate_server_settings.example", "roles_and_protocols.sp_role.saml_2_0_profile.enable_xasp", "true"),
		resource.ComposeTestCheckFunc(versionedChecks...),
	)
}
