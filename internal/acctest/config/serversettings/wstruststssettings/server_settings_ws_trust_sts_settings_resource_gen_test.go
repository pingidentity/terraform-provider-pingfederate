// Code generated by ping-terraform-plugin-framework-generator

package serversettingswstruststssettings_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

var issuerCertFileData string
var issuerCertId = "mytestissuercert"

func TestAccServerSettingsWsTrustStsSettings_MinimalMaximal(t *testing.T) {
	issuerCertFileData = os.Getenv("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_1")
	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.ConfigurationPreCheck(t)
			if issuerCertFileData == "" {
				t.Fatal("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_1 must be set for TestAccServerSettingsWsTrustStsSettings_MinimalMaximal")
			}
			serverSettingsWsTrustStsSettings_createIssuerCert(t)
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: serverSettingsWsTrustStsSettings_MinimalHCL(),
				Check:  serverSettingsWsTrustStsSettings_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: serverSettingsWsTrustStsSettings_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               serverSettingsWsTrustStsSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_server_settings_ws_trust_sts_settings.example",
				ImportStateVerifyIdentifierAttribute: "basic_authn_enabled",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// Passwords cannot be imported
				ImportStateVerifyIgnore: []string{"users.0.password"},
			},
			{
				// Back to minimal model
				Config: serverSettingsWsTrustStsSettings_MinimalHCL(),
				Check:  serverSettingsWsTrustStsSettings_CheckComputedValuesMinimal(),
			},
		},
	})
}

func serverSettingsWsTrustStsSettings_createIssuerCert(t *testing.T) {
	testClient := acctest.TestClient()
	// Check if the issuer cert already exists - if not, then create it
	_, _, err := testClient.ServerSettingsAPI.GetCert(acctest.TestBasicAuthContext(), issuerCertId).Execute()
	if err != nil {
		// Cert wasn't found, so create it
		fileData := client.X509File{
			FileData: issuerCertFileData,
			Id:       &issuerCertId,
		}
		_, _, err = testClient.ServerSettingsAPI.ImportCertificate(acctest.TestBasicAuthContext()).Body(fileData).Execute()
		if err != nil {
			t.Fatalf("Failed to create issuer cert for ws trust sts settings test: %s", err.Error())
		}
	}
}

// Minimal HCL with only required values set
func serverSettingsWsTrustStsSettings_MinimalHCL() string {
	return `
resource "pingfederate_server_settings_ws_trust_sts_settings" "example" {
}
`
}

// Maximal HCL with all values set where possible
func serverSettingsWsTrustStsSettings_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_server_settings_ws_trust_sts_settings" "example" {
  basic_authn_enabled       = true
  client_cert_authn_enabled = true
  issuer_certs = [
    {
      id = "%s"
    }
  ]
  restrict_by_issuer_cert = true
  restrict_by_subject_dn  = true
  subject_dns             = ["cn=test"]
  users = [
    {
      password = "2FederateM0re"
      username = "user1"
    }
  ]
}
`, issuerCertId)
}

// Validate any computed values when applying minimal HCL
func serverSettingsWsTrustStsSettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "basic_authn_enabled", "false"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "client_cert_authn_enabled", "false"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "issuer_certs.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "restrict_by_issuer_cert", "false"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "restrict_by_subject_dn", "false"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "subject_dns.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_server_settings_ws_trust_sts_settings.example", "users.#", "0"),
	)
}
