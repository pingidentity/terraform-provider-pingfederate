// Code generated by ping-terraform-plugin-framework-generator

package connectionmetadataexport_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccConnectionMetadataExport(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Run the export and validate the results
				Config: connectionMetadataExport_MinimalHCL(),
				Check:  connectionMetadataExport_CheckComputedValues(),
			},
			{
				// Run a more complete export and validate the results
				Config: connectionMetadataExport_CompleteHCL(),
				Check:  connectionMetadataExport_CheckComputedValues(),
			},
		},
	})
}

func spConnectionHcl() string {
	return `
resource "pingfederate_idp_sp_connection" "spConnection" {
  connection_id      = "metadataExportConnection"
  name               = "connection"
  entity_id          = "entity"
  active             = true
  contact_info       = {}
  base_url           = "https://localhost:9031"
  logging_mode       = "STANDARD"
  virtual_entity_ids = []
  credentials = {
    certs = []
    signing_settings = {
      signing_key_pair_ref = {
        id = "419x9yg43rlawqwq9v6az997k"
      }
      include_raw_key_in_signature = false
      include_cert_in_signature    = false
      algorithm                    = "SHA256withRSA"
    }
  }
  ws_trust = {
    partner_service_ids = [
      "id"
    ]
    oauth_assertion_profiles = true
    default_token_type       = "SAML20"
    generate_key             = false
    encrypt_saml2_assertion  = false
    minutes_before           = 5
    minutes_after            = 30
    attribute_contract = {
      core_attributes = [
        {
          name = "TOKEN_SUBJECT"
        }
      ]
      extended_attributes = []
    }
    token_processor_mappings = [
      {
        attribute_sources = []
        attribute_contract_fulfillment = {
          "TOKEN_SUBJECT" : {
            source = {
              type = "TOKEN"
            }
            value = "username"
          }
        }
        issuance_criteria = {
          conditional_criteria = []
        }
        idp_token_processor_ref = {
          id = "UsernameTokenProcessor"
        }
        restricted_virtual_entity_ids = []
      }
    ]
  }
  connection_target_type = "STANDARD"
}
`
}

// Minimal HCL with only required values set
func connectionMetadataExport_MinimalHCL() string {
	return fmt.Sprintf(`
%s

resource "pingfederate_connection_metadata_export" "example" {
  depends_on      = [pingfederate_idp_sp_connection.spConnection]
  connection_type = "SP"
  connection_id   = pingfederate_idp_sp_connection.spConnection.connection_id
}
`, spConnectionHcl())
}

// Complete HCL with as many values set as possible
func connectionMetadataExport_CompleteHCL() string {
	return fmt.Sprintf(`
%s

resource "pingfederate_connection_metadata_export" "example" {
  depends_on                  = [pingfederate_idp_sp_connection.spConnection]
  connection_type             = "SP"
  connection_id               = pingfederate_idp_sp_connection.spConnection.connection_id
  use_secondary_port_for_soap = true
  signing_settings = {
    signing_key_pair_ref = {
      id = "419x9yg43rlawqwq9v6az997k"
    }
    algorithm                    = "SHA512withRSA"
    include_cert_in_signature    = true
    include_raw_key_in_signature = true
  }
}
`, spConnectionHcl())
}

// Validate any computed values when applying HCL
func connectionMetadataExport_CheckComputedValues() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttrSet("pingfederate_connection_metadata_export.example", "exported_connection_metadata"),
	)
}
