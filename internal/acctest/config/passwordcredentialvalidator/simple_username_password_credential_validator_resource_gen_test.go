// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package passwordcredentialvalidator_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccPasswordCredentialValidator_SimpleRemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: passwordCredentialValidator_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: passwordCredentialValidator_SimpleMinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					passwordCredentialValidator_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccPasswordCredentialValidator_SimpleMinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: passwordCredentialValidator_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: passwordCredentialValidator_SimpleMinimalHCL(),
				Check:  passwordCredentialValidator_SimpleCheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  passwordCredentialValidator_SimpleMinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: passwordCredentialValidator_SimpleCompleteHCL(),
				Check:  passwordCredentialValidator_SimpleCheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: passwordCredentialValidator_SimpleMinimalHCL(),
				Check:  passwordCredentialValidator_SimpleCheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: passwordCredentialValidator_SimpleCompleteHCL(),
				Check:  passwordCredentialValidator_SimpleCheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               passwordCredentialValidator_SimpleCompleteHCL(),
				ResourceName:                         "pingfederate_password_credential_validator.example",
				ImportStateId:                        validatorId,
				ImportStateVerifyIdentifierAttribute: "validator_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				ImportStateVerifyIgnore: []string{
					"configuration.tables",
					"configuration.fields",
				},
			},
		},
	})
}

// Minimal HCL with only required values set
func passwordCredentialValidator_SimpleMinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_password_credential_validator" "example" {
  validator_id = "%s"
  configuration = {
    tables = [
      {
        name = "Users"
        rows = [
          {
            fields = [
              {
                name  = "Username"
                value = "example"
              },
              {
                name  = "Relax Password Requirements"
                value = "false"
              }
            ]
            sensitive_fields = [
              {
                name  = "Password"
                value = "2FederateM0re"
              },
              {
                name  = "Confirm Password"
                value = "2FederateM0re"
              },
            ]
          },
        ],
      }
    ]
  }
  name = "mydude"
  plugin_descriptor_ref = {
    id = "org.sourceid.saml20.domain.SimpleUsernamePasswordCredentialValidator"
  }
  attribute_contract = {}
}
`, validatorId)
}

// Maximal HCL with all values set where possible
func passwordCredentialValidator_SimpleCompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_password_credential_validator" "example" {
  validator_id = "%s"
  configuration = {
    tables = [
      {
        name = "Users"
        rows = [
          {
            fields = [
              {
                name  = "Username"
                value = "example"
              },
              {
                name  = "Relax Password Requirements"
                value = "false"
              }
            ]
            sensitive_fields = [
              {
                name  = "Password"
                value = "2FederateM0re"
              },
              {
                name  = "Confirm Password"
                value = "2FederateM0re"
              },
            ]
            default_row = false
          },
          {
            fields = [
              {
                name  = "Username"
                value = "example2"
              },
              {
                name  = "Relax Password Requirements"
                value = "false"
              }
            ]
            sensitive_fields = [
              {
                name  = "Password"
                value = "2FederateM0re"
              },
              {
                name  = "Confirm Password"
                value = "2FederateM0re"
              },
            ]
            default_row = false
          }
        ],
      }
    ]
  }
  name = "mydude"
  plugin_descriptor_ref = {
    id = "org.sourceid.saml20.domain.SimpleUsernamePasswordCredentialValidator"
  }
  attribute_contract = {
    extended_attributes = []
  }
}
`, validatorId)
}

// Validate any computed values when applying minimal HCL
func passwordCredentialValidator_SimpleCheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "attribute_contract.core_attributes.0.name", "username"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "attribute_contract.core_attributes.#", "1"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "attribute_contract.extended_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.fields_all.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.tables.0.rows.0.default_row", "false"),
		resource.TestCheckResourceAttrSet("pingfederate_password_credential_validator.example", "configuration.tables.0.rows.0.sensitive_fields.0.encrypted_value"),
		resource.TestCheckResourceAttrSet("pingfederate_password_credential_validator.example", "configuration.tables.0.rows.0.sensitive_fields.1.encrypted_value"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.tables_all.#", "1"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.tables_all.0.rows.0.fields.#", "4"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "id", validatorId),
	)
}

// Validate any computed values when applying complete HCL
func passwordCredentialValidator_SimpleCheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "attribute_contract.core_attributes.0.name", "username"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "attribute_contract.core_attributes.#", "1"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.fields_all.#", "0"),
		resource.TestCheckResourceAttrSet("pingfederate_password_credential_validator.example", "configuration.tables.0.rows.0.sensitive_fields.0.encrypted_value"),
		resource.TestCheckResourceAttrSet("pingfederate_password_credential_validator.example", "configuration.tables.0.rows.0.sensitive_fields.1.encrypted_value"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.tables_all.#", "1"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "configuration.tables_all.0.rows.0.fields.#", "4"),
		resource.TestCheckResourceAttr("pingfederate_password_credential_validator.example", "id", validatorId),
	)
}
