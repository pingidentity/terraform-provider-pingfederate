// Code generated by ping-terraform-plugin-framework-generator

package configstore

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const configStoreMinimalBundle = "org.sourceid.common.ExpressionManager"
const configStoreMinimalId = "evaluateExpressions"
const configStoreBundle = "org.sourceid.oauth20.handlers.process.exchange.execution.SecurityTokenCreator"
const configStoreSettingId = "base64-required-plugins"
const configStoreMapBundle = "com.pingidentity.crypto.SignatureAlgorithms"
const configStoreMapSettingId = "signature-algorithms"

func TestAccConfigStore_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: configStore_CheckDestroyMinimal,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: configStore_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					configStore_DeleteMinimal(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccConfigStore_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: configStore_CheckDestroyMap,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: configStore_MinimalHCL(),
				Check:  configStore_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  configStore_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model. No computed values to check.
				Config: configStore_CompleteHCL(),
			},
			{
				// Back to minimal model
				Config: configStore_MinimalHCL(),
				Check:  configStore_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: configStore_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               configStore_CompleteHCL(),
				ResourceName:                         "pingfederate_config_store.example",
				ImportStateId:                        configStoreBundle + "/" + configStoreSettingId,
				ImportStateVerifyIdentifierAttribute: "setting_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Test map value
				Config: configStore_MapValueHCL("firstvalue"),
			},
			{
				// Test modifying map value
				Config: configStore_MapValueHCL("newvalue"),
			},
		},
	})
}

// Minimal HCL with only required values set
func configStore_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_config_store" "example" {
  bundle       = "%s"
  setting_id   = "%s"
  string_value = "true"
}
data "pingfederate_config_store" "dataexample" {
  bundle = pingfederate_config_store.example.bundle
}
`, configStoreMinimalBundle, configStoreMinimalId)
}

// Maximal HCL with all values set where possible
func configStore_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_config_store" "example" {
  bundle     = "%s"
  setting_id = "%s"
  list_value = ["org.sourceid.wstrust.processor.oauth.BearerAccessTokenTokenProcessor"]
}
`, configStoreBundle, configStoreSettingId)
}

// HCL to configure map value
func configStore_MapValueHCL(testKeyValue string) string {
	return fmt.Sprintf(`
resource "pingfederate_config_store" "example" {
  bundle     = "%s"
  setting_id = "%s"
  map_value = {
    "DSA_SHA1" : "http://www.w3.org/2000/09/xmldsig#dsa-sha1"
    "RSA_SHA1" : "http://www.w3.org/2000/09/xmldsig#rsa-sha1"
    "RSA_SHA256" : "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
    "RSA_SHA384" : "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"
    "RSA_SHA512" : "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
    "ECDSA_SHA256" : "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"
    "ECDSA_SHA384" : "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384"
    "ECDSA_SHA512" : "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512"
    "TEST" : "%s"
  }
}
`, configStoreMapBundle, configStoreMapSettingId, testKeyValue)
}

// Validate any computed values when applying minimal HCL
func configStore_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_config_store.example", "list_value.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_config_store.example", "id", configStoreMinimalId),
		resource.TestCheckResourceAttr("data.pingfederate_config_store.dataexample", "items.#", "1"),
		resource.TestCheckResourceAttr("data.pingfederate_config_store.dataexample", "items.0.id", configStoreMinimalId),
		resource.TestCheckResourceAttr("data.pingfederate_config_store.dataexample", "items.0.type", "STRING"),
		resource.TestCheckResourceAttr("data.pingfederate_config_store.dataexample", "items.0.string_value", "true"),
		resource.TestCheckNoResourceAttr("data.pingfederate_config_store.dataexample", "items.0.map_value"),
		resource.TestCheckResourceAttr("data.pingfederate_config_store.dataexample", "items.0.list_value.#", "0"),
	)
}

// Delete the resource
func configStore_DeleteMinimal(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.ConfigStoreAPI.DeleteConfigStoreSetting(acctest.TestBasicAuthContext(), configStoreMinimalBundle, configStoreMinimalId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func configStore_CheckDestroyMinimal(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.ConfigStoreAPI.DeleteConfigStoreSetting(acctest.TestBasicAuthContext(), configStoreMinimalBundle, configStoreMinimalId).Execute()
	if err == nil {
		return fmt.Errorf("config_store still exists after tests. Expected it to be destroyed")
	}
	return nil
}

// Test that any objects created by the test are destroyed
func configStore_CheckDestroyMap(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.ConfigStoreAPI.DeleteConfigStoreSetting(acctest.TestBasicAuthContext(), configStoreBundle, configStoreSettingId).Execute()
	if err == nil {
		return fmt.Errorf("config_store still exists after tests. Expected it to be destroyed")
	}
	return nil
}
