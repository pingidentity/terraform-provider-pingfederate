// Code generated by ping-terraform-plugin-framework-generator

package idpstsrequestparameterscontracts_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const idpStsRequestParametersContractContractId = "idpStsRequestParametersContractC"

func TestAccIdpStsRequestParametersContract_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: idpStsRequestParametersContract_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: idpStsRequestParametersContract_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					idpStsRequestParametersContract_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccIdpStsRequestParametersContract_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: idpStsRequestParametersContract_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: idpStsRequestParametersContract_MinimalHCL(),
				Check:  idpStsRequestParametersContract_CheckComputedValues(),
			},
			{
				// Delete the minimal model
				Config:  idpStsRequestParametersContract_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: idpStsRequestParametersContract_CompleteHCL(),
				Check:  idpStsRequestParametersContract_CheckComputedValues(),
			},
			{
				// Back to minimal model
				Config: idpStsRequestParametersContract_MinimalHCL(),
				Check:  idpStsRequestParametersContract_CheckComputedValues(),
			},
			{
				// Back to complete model
				Config: idpStsRequestParametersContract_CompleteHCL(),
				Check:  idpStsRequestParametersContract_CheckComputedValues(),
			},
			{
				// Test importing the resource
				Config:                               idpStsRequestParametersContract_CompleteHCL(),
				ResourceName:                         "pingfederate_idp_sts_request_parameters_contract.example",
				ImportStateId:                        idpStsRequestParametersContractContractId,
				ImportStateVerifyIdentifierAttribute: "contract_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func idpStsRequestParametersContract_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_idp_sts_request_parameters_contract" "example" {
  contract_id = "%s"
  name        = "mycontract"
  parameters  = ["oneparam"]
}
`, idpStsRequestParametersContractContractId)
}

// Maximal HCL with all values set where possible
func idpStsRequestParametersContract_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_idp_sts_request_parameters_contract" "example" {
  contract_id = "%s"
  name        = "mycontract"
  parameters  = ["oneparam", "twoparam", "threeparam"]
}
`, idpStsRequestParametersContractContractId)
}

// Validate any computed values when applying HCL
func idpStsRequestParametersContract_CheckComputedValues() resource.TestCheckFunc {
	return resource.TestCheckResourceAttr("pingfederate_idp_sts_request_parameters_contract.example", "id", idpStsRequestParametersContractContractId)
}

// Delete the resource
func idpStsRequestParametersContract_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.IdpStsRequestParametersContractsAPI.DeleteStsRequestParamContractById(acctest.TestBasicAuthContext(), idpStsRequestParametersContractContractId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func idpStsRequestParametersContract_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.IdpStsRequestParametersContractsAPI.DeleteStsRequestParamContractById(acctest.TestBasicAuthContext(), idpStsRequestParametersContractContractId).Execute()
	if err == nil {
		return fmt.Errorf("idp_sts_request_parameters_contract still exists after tests. Expected it to be destroyed")
	}
	return nil
}
