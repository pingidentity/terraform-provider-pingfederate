// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package idpadapter_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

const adapterId = "idpAdapterId"

func TestAccIdpAdapter_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: idpAdapter_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: idpAdapter_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					idpAdapter_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccIdpAdapter_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: idpAdapter_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: idpAdapter_MinimalHCL(),
				Check:  idpAdapter_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  idpAdapter_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: idpAdapter_CompleteHCL(),
				Check:  idpAdapter_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: idpAdapter_MinimalHCL(),
				Check:  idpAdapter_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: idpAdapter_CompleteHCL(),
				Check:  idpAdapter_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:            idpAdapter_CompleteHCL(),
				ResourceName:      "pingfederate_idp_adapter.example",
				ImportStateId:     adapterId,
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"configuration.tables",
					"configuration.fields",
				},
			},
		},
	})
}

// Minimal HCL with only required values set
func idpAdapter_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_idp_adapter" "example" {
  adapter_id = "%s"
  configuration = {
    tables = [
      {
        name = "Credential Validators"
        rows = [
          {
            fields = [
              {
                name  = "Password Credential Validator Instance"
                value = "pingdirectory"
              }
            ]
          }
        ]
      }
    ]
  }
  name = "exampleAdapter"
  plugin_descriptor_ref = {
    id = "com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter"
  }
  attribute_mapping = {}
  attribute_contract = {
    core_attributes = [
      {
        name      = "username"
        pseudonym = true
      }
    ]
  }
}
`, adapterId)
}

// Maximal HCL with all values set where possible
func idpAdapter_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_idp_adapter" "example" {
  adapter_id = "%s"
  attribute_contract = {
    unique_user_key_attribute = "username"
    core_attributes = [
      {
        name      = "username"
        pseudonym = true
        masked    = false
      },
      {
        name      = "policy.action"
        pseudonym = false
        masked    = true
      }
    ]
    extended_attributes = [
      {
        name      = "entryUUID"
        pseudonym = false
        masked    = false
      }
    ]
  }
  attribute_mapping = {
    attribute_contract_fulfillment = {
      "username" = {
        source = {
          type = "ADAPTER"
        }
        value = "username"
      }
      "entryUUID" = {
        source = {
          type = "ADAPTER"
        }
        value = "entryUUID"
      }
      "policy.action" = {
        source = {
          type = "ADAPTER"
        }
        value = "policy.action"
      }

    }
    attribute_sources = [
      {
        custom_attribute_source = {
          data_store_ref = {
            id = "customDataStore"
          }
          description = "APIStubs"
          filter_fields = [
            {
              name = "Authorization Header"
            },
            {
              name = "Body"
            },
            {
              name  = "Resource Path"
              value = "/users/external"
            },
          ]
          id = "APIStubs"
        }
      },
    ]
    issuance_criteria = {
      conditional_criteria = [
        {
          attribute_name = "ClientIp"
          condition      = "EQUALS"
          error_result   = "myerrorresult"
          source = {
            type = "CONTEXT"
          }
          value = "value"
        },
      ]
    }
  }
  configuration = {
    tables = [
      {
        name = "Credential Validators"
        rows = [
          {
            default_row = false
            fields = [
              {
                name  = "Password Credential Validator Instance"
                value = "pingdirectory"
              }
            ]
          }
        ]
      }
    ]
    fields = [
      {
        name  = "Challenge Retries"
        value = "3"
      }
    ]
  }
  name = "updatedAdapter"
  plugin_descriptor_ref = {
    id = "com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter"
  }
}
`, adapterId)
}

func idpAdapter_expectedFieldCount() string {
	if !acctest.VersionAtLeast(version.PingFederate1200) {
		return "64"
	}
	return "65"
}

// Validate any computed values when applying minimal HCL
func idpAdapter_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_contract.core_attributes.0.masked", "false"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_contract.core_attributes_all.#", "2"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_contract.extended_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_contract.mask_ognl_values", "false"),
		resource.TestCheckNoResourceAttr("pingfederate_idp_adapter.example", "attribute_contract.unique_user_key_attribute"),
		resource.TestCheckNoResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.attribute_contract_fulfillment.username.source.id"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.attribute_contract_fulfillment.username.source.type", "ADAPTER"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.attribute_contract_fulfillment.username.value", "username"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.attribute_contract_fulfillment.attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.issuance_criteria.expression_criteria"),
		resource.TestCheckNoResourceAttr("pingfederate_idp_adapter.example", "authn_ctx_class_ref"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "configuration.fields_all.#", idpAdapter_expectedFieldCount()),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "configuration.tables.0.rows.0.default_row", "false"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "configuration.tables_all.#", "1"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "id", adapterId),
	)
}

// Validate any computed values when applying complete HCL
func idpAdapter_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "attribute_contract.core_attributes_all.#", "2"),
		resource.TestCheckNoResourceAttr("pingfederate_idp_adapter.example", "attribute_mapping.issuance_criteria.expression_criteria"),
		resource.TestCheckNoResourceAttr("pingfederate_idp_adapter.example", "authn_ctx_class_ref"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "configuration.fields_all.#", idpAdapter_expectedFieldCount()),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "configuration.tables.0.rows.0.default_row", "false"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "configuration.tables_all.#", "1"),
		resource.TestCheckResourceAttr("pingfederate_idp_adapter.example", "id", adapterId),
	)
}

// Delete the resource
func idpAdapter_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.IdpAdaptersAPI.DeleteIdpAdapter(acctest.TestBasicAuthContext(), adapterId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func idpAdapter_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.IdpAdaptersAPI.DeleteIdpAdapter(acctest.TestBasicAuthContext(), adapterId).Execute()
	if err == nil {
		return fmt.Errorf("idp_adapter still exists after tests. Expected it to be destroyed")
	}
	return nil
}
