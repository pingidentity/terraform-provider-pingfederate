// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package virtualhostnames_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccVirtualHostNames_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: virtualHostNames_MinimalHCL(),
				Check:  virtualHostNames_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  virtualHostNames_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model. No computed values to check.
				Config: virtualHostNames_CompleteHCL(),
			},
			{
				// Back to minimal model
				Config: virtualHostNames_MinimalHCL(),
				Check:  virtualHostNames_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: virtualHostNames_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               virtualHostNames_CompleteHCL(),
				ResourceName:                         "pingfederate_virtual_host_names.example",
				ImportStateVerifyIdentifierAttribute: "virtual_host_names.#",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func virtualHostNames_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_virtual_host_names" "example" {
}
`)
}

// Maximal HCL with all values set where possible
func virtualHostNames_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_virtual_host_names" "example" {
  virtual_host_names = ["example1", "example2", "example3"]
}
`)
}

// Validate any computed values when applying minimal HCL
func virtualHostNames_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.TestCheckResourceAttr("pingfederate_virtual_host_names.example", "virtual_host_names.#", "0")

}
