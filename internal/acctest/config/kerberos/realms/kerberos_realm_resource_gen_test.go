// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package kerberosrealms_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

const kerberosRealmRealmId = "kerberosRealmRealmId"

func TestAccKerberosRealm_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: kerberosRealm_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: kerberosRealm_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					kerberosRealm_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccKerberosRealm_MinimalMaximal(t *testing.T) {
	var updatedRealmConfig string
	if acctest.VersionAtLeast(version.PingFederate1220) {
		// LOCAL_VALIDATION was added in PF 12.2
		updatedRealmConfig = kerberosRealm_CompleteLocalValidationHCL()
	} else {
		updatedRealmConfig = kerberosRealm_CompleteHCL()
	}
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: kerberosRealm_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: kerberosRealm_MinimalHCL(),
				Check:  kerberosRealm_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  kerberosRealm_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: kerberosRealm_CompleteHCL(),
				Check:  kerberosRealm_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: kerberosRealm_MinimalHCL(),
				Check:  kerberosRealm_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: updatedRealmConfig,
				Check:  kerberosRealm_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:            updatedRealmConfig,
				ResourceName:      "pingfederate_kerberos_realm.example",
				ImportStateId:     kerberosRealmRealmId,
				ImportState:       true,
				ImportStateVerify: true,
				// Password can't be imported and encrypted_password changes every GET
				ImportStateVerifyIgnore: []string{"kerberos_password", "kerberos_encrypted_password"},
			},
		},
	})
}

// Minimal HCL with only required values set
func kerberosRealm_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_kerberos_realm" "example" {
  realm_id            = "%s"
  kerberos_realm_name = "asdf"
  kerberos_username   = "user"
  kerberos_password   = "password"
}
`, kerberosRealmRealmId)
}

// Maximal HCL with all values set where possible
func kerberosRealm_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_kerberos_realm" "example" {
  realm_id                                = "%s"
  kerberos_realm_name                     = "asdfasdf"
  kerberos_username                       = "user2"
  kerberos_password                       = "password2"
  connection_type                         = "DIRECT"
  key_distribution_centers                = ["kdc1", "kdc2"]
  retain_previous_keys_on_password_change = true
  suppress_domain_name_concatenation      = true
}
`, kerberosRealmRealmId)
}

// Maximal HCL with all values set where possible
func kerberosRealm_CompleteLocalValidationHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_kerberos_realm" "example" {
  realm_id                                = "%s"
  kerberos_realm_name                     = "asdfasdf"
  kerberos_username                       = "user2"
  kerberos_password                       = "password2"
  connection_type                         = "LOCAL_VALIDATION"
  retain_previous_keys_on_password_change = true
}
`, kerberosRealmRealmId)
}

// Validate any computed values when applying minimal HCL
func kerberosRealm_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_kerberos_realm.example", "connection_type", "DIRECT"),
		resource.TestCheckResourceAttr("pingfederate_kerberos_realm.example", "id", kerberosRealmRealmId),
		resource.TestCheckResourceAttrSet("pingfederate_kerberos_realm.example", "kerberos_encrypted_password"),
		resource.TestCheckResourceAttr("pingfederate_kerberos_realm.example", "key_distribution_centers.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_kerberos_realm.example", "retain_previous_keys_on_password_change", "false"),
		resource.TestCheckResourceAttr("pingfederate_kerberos_realm.example", "suppress_domain_name_concatenation", "false"),
	)
}

// Validate any computed values when applying complete HCL
func kerberosRealm_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_kerberos_realm.example", "id", kerberosRealmRealmId),
		resource.TestCheckResourceAttrSet("pingfederate_kerberos_realm.example", "kerberos_encrypted_password"),
	)
}

// Delete the resource
func kerberosRealm_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.KerberosRealmsAPI.DeleteKerberosRealm(acctest.TestBasicAuthContext(), kerberosRealmRealmId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func kerberosRealm_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.KerberosRealmsAPI.DeleteKerberosRealm(acctest.TestBasicAuthContext(), kerberosRealmRealmId).Execute()
	if err == nil {
		return fmt.Errorf("kerberos_realm still exists after tests. Expected it to be destroyed")
	}
	return nil
}
