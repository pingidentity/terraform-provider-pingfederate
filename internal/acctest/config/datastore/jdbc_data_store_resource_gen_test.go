// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package datastore_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const jdbcStoreId = "jdbcDataStoreId"

func TestAccJdbcDataStore_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: jdbcDataStore_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: jdbcDataStore_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					jdbcDataStore_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccJdbcDataStore_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: jdbcDataStore_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: jdbcDataStore_MinimalHCL(),
				Check:  jdbcDataStore_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  jdbcDataStore_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: jdbcDataStore_CompleteHCL(),
				Check:  jdbcDataStore_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: jdbcDataStore_MinimalHCL(),
				Check:  jdbcDataStore_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: jdbcDataStore_CompleteHCL(),
				Check:  jdbcDataStore_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               jdbcDataStore_CompleteHCL(),
				ResourceName:                         "pingfederate_data_store.example",
				ImportStateId:                        jdbcStoreId,
				ImportStateVerifyIdentifierAttribute: "data_store_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// password can't be imported, and encrypted_password will change each time it is read
				ImportStateVerifyIgnore: []string{"jdbc_data_store.password", "jdbc_data_store.encrypted_password"},
			},
		},
	})
}

// Minimal HCL with only required values set
func jdbcDataStore_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_data_store" "example" {
  data_store_id = "%s"
  jdbc_data_store = {
    connection_url = "jdbc:sqlserver://localhost;encrypt=true;integratedSecurity=true;"
    driver_class   = "org.hsqldb.jdbcDriver"
    password       = "mypassword"
  }
}
`, jdbcStoreId)
}

// Maximal HCL with all values set where possible
func jdbcDataStore_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_data_store" "example" {
  data_store_id         = "%s"
  mask_attribute_values = true
  jdbc_data_store = {
    name                         = "myjdbcstore"
    connection_url               = "jdbc:sqlserver://localhost;encrypt=true;integratedSecurity=true;"
    driver_class                 = "org.hsqldb.jdbcDriver"
    user_name                    = "myusername"
    password                     = "mypassword"
    allow_multi_value_attributes = true
    min_pool_size                = 15
    max_pool_size                = 200
    blocking_timeout             = 10000
    idle_timeout                 = 10
    connection_url_tags = [
      {
        connection_url = "jdbc:sqlserver://localhost;encrypt=true;integratedSecurity=true;"
        default_source = true
      },
      {
        connection_url = "secondurl.com"
        tags           = "us-east-1"
      },
      {
        connection_url = "thirdurl.com"
        tags           = "us-west-1"
        default_source = false
      }
    ]
    validate_connection_sql = "SELECT 1"
  }
}
`, jdbcStoreId)
}

// Validate any computed values when applying minimal HCL
func jdbcDataStore_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.allow_multi_value_attributes", "false"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.blocking_timeout", "5000"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.connection_url_tags.0.default_source", "true"),
		resource.TestCheckNoResourceAttr("pingfederate_data_store.example", "jdbc_data_store.connection_url_tags.0.tags"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.idle_timeout", "5"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.max_pool_size", "100"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.min_pool_size", "10"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.name", "jdbc:sqlserver://localhost;encrypt=true;integratedSecurity=true; (null)"),
		resource.TestCheckResourceAttrSet("pingfederate_data_store.example", "jdbc_data_store.encrypted_password"),
		resource.TestCheckNoResourceAttr("pingfederate_data_store.example", "jdbc_data_store.user_name"),
		resource.TestCheckNoResourceAttr("pingfederate_data_store.example", "jdbc_data_store.validate_connection_sql"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "id", jdbcStoreId),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "mask_attribute_values", "false"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.type", "JDBC"),
	)
}

// Validate any computed values when applying complete HCL
func jdbcDataStore_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_data_store.example", "jdbc_data_store.connection_url_tags.0.tags"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.connection_url_tags.1.default_source", "false"),
		resource.TestCheckResourceAttrSet("pingfederate_data_store.example", "jdbc_data_store.encrypted_password"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "id", jdbcStoreId),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "jdbc_data_store.type", "JDBC"),
	)
}

// Delete the resource
func jdbcDataStore_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.DataStoresAPI.DeleteDataStore(acctest.TestBasicAuthContext(), jdbcStoreId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func jdbcDataStore_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.DataStoresAPI.DeleteDataStore(acctest.TestBasicAuthContext(), jdbcStoreId).Execute()
	if err == nil {
		return fmt.Errorf("data_store still exists after tests. Expected it to be destroyed")
	}
	return nil
}
