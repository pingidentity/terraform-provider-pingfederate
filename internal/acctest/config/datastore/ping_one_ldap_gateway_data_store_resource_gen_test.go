// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package datastore_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

const pingOneLdapGatewayStoreId = "pingOneLdapGatewayDataStoreId"

func TestAccPingOneLdapGatewayDataStore_RemovalDrift(t *testing.T) {
	var pingOneConnectionRefId = os.Getenv("PF_TF_P1_CONNECTION_ID")
	var pingOneEnvironmentId = os.Getenv("PF_TF_P1_CONNECTION_ENV_ID")
	var pingOneLdapGatewayId = os.Getenv("PF_TF_P1_LDAP_GATEWAY_ID")
	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.ConfigurationPreCheck(t)
			if pingOneConnectionRefId == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ID must be set for the PingOneLdapGatewayDataStore acceptance test")
			}
			if pingOneEnvironmentId == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ENV_ID must be set for the PingOneLdapGatewayDataStore acceptance test")
			}
			if pingOneLdapGatewayId == "" {
				t.Fatal("PF_TF_P1_LDAP_GATEWAY_ID must be set for the PingOneLdapGatewayDataStore acceptance test")
			}
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: pingOneLdapGatewayDataStore_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: pingOneLdapGatewayDataStore_MinimalHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					pingOneLdapGatewayDataStore_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccPingOneLdapGatewayDataStore_MinimalMaximal(t *testing.T) {
	var pingOneConnectionRefId = os.Getenv("PF_TF_P1_CONNECTION_ID")
	var pingOneEnvironmentId = os.Getenv("PF_TF_P1_CONNECTION_ENV_ID")
	var pingOneLdapGatewayId = os.Getenv("PF_TF_P1_LDAP_GATEWAY_ID")
	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.ConfigurationPreCheck(t)
			if pingOneConnectionRefId == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ID must be set for the PingOneLdapGatewayDataStore acceptance test")
			}
			if pingOneEnvironmentId == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ENV_ID must be set for the PingOneLdapGatewayDataStore acceptance test")
			}
			if pingOneLdapGatewayId == "" {
				t.Fatal("PF_TF_P1_LDAP_GATEWAY_ID must be set for the PingOneLdapGatewayDataStore acceptance test")
			}
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: pingOneLdapGatewayDataStore_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: pingOneLdapGatewayDataStore_MinimalHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
				Check:  pingOneLdapGatewayDataStore_CheckComputedValuesMinimal(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
			},
			{
				// Delete the minimal model
				Config:  pingOneLdapGatewayDataStore_MinimalHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: pingOneLdapGatewayDataStore_CompleteHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
				Check:  pingOneLdapGatewayDataStore_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: pingOneLdapGatewayDataStore_MinimalHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
				Check:  pingOneLdapGatewayDataStore_CheckComputedValuesMinimal(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
			},
			{
				// Back to complete model
				Config: pingOneLdapGatewayDataStore_CompleteHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
				Check:  pingOneLdapGatewayDataStore_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               pingOneLdapGatewayDataStore_CompleteHCL(pingOneConnectionRefId, pingOneEnvironmentId, pingOneLdapGatewayId),
				ResourceName:                         "pingfederate_data_store.example",
				ImportStateId:                        pingOneLdapGatewayStoreId,
				ImportStateVerifyIdentifierAttribute: "data_store_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func pingOneLdapGatewayDataStore_MinimalHCL(connRef, envId, gatewayId string) string {
	return fmt.Sprintf(`
resource "pingfederate_data_store" "example" {
  data_store_id = "%s"
  ping_one_ldap_gateway_data_store = {
    ldap_type = "PING_DIRECTORY"
    ping_one_connection_ref = {
      id = "%s"
    }
    ping_one_environment_id  = "%s"
    ping_one_ldap_gateway_id = "%s"
  }
}
`, pingOneLdapGatewayStoreId, connRef, envId, gatewayId)
}

// Maximal HCL with all values set where possible
func pingOneLdapGatewayDataStore_CompleteHCL(connRef, envId, gatewayId string) string {
	versionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedHcl += `
		  use_start_tls = true
		  `
	}
	return fmt.Sprintf(`
resource "pingfederate_data_store" "example" {
  data_store_id         = "%s"
  mask_attribute_values = true
  ping_one_ldap_gateway_data_store = {
    binary_attributes = ["attr1", "attr2"]
    name              = "myp1datastore"
    ldap_type         = "PING_DIRECTORY"
    ping_one_connection_ref = {
      id = "%s"
    }
    ping_one_environment_id  = "%s"
    ping_one_ldap_gateway_id = "%s"
    use_ssl                  = true
	%s
  }
}
`, pingOneLdapGatewayStoreId, connRef, envId, gatewayId, versionedHcl)
}

func checkGatewayPf121ComputedAttrs() resource.TestCheckFunc {
	if acctest.VersionAtLeast(version.PingFederate1210) {
		return resource.TestCheckResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.use_start_tls", "false")
	}
	return resource.TestCheckNoResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.use_start_tls")
}

// Validate any computed values when applying minimal HCL
func pingOneLdapGatewayDataStore_CheckComputedValuesMinimal(connRef, envId, gatewayId string) resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.binary_attributes"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.name", fmt.Sprintf("%s:%s:%s", connRef, envId, gatewayId)),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.use_ssl", "false"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "id", pingOneLdapGatewayStoreId),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "mask_attribute_values", "false"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.type", "PING_ONE_LDAP_GATEWAY"),
		checkGatewayPf121ComputedAttrs(),
	)
}

// Validate any computed values when applying complete HCL
func pingOneLdapGatewayDataStore_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "id", pingOneLdapGatewayStoreId),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "ping_one_ldap_gateway_data_store.type", "PING_ONE_LDAP_GATEWAY"),
	)
}

// Delete the resource
func pingOneLdapGatewayDataStore_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.DataStoresAPI.DeleteDataStore(acctest.TestBasicAuthContext(), pingOneLdapGatewayStoreId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func pingOneLdapGatewayDataStore_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.DataStoresAPI.DeleteDataStore(acctest.TestBasicAuthContext(), pingOneLdapGatewayStoreId).Execute()
	if err == nil {
		return fmt.Errorf("data_store still exists after tests. Expected it to be destroyed")
	}
	return nil
}
