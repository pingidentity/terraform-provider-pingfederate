// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package datastore_test

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

const customStoreId = "customDataStoreId"

func TestAccCustomDataStore_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: customDataStore_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: customDataStore_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					customDataStore_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccCustomDataStore_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: customDataStore_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: customDataStore_MinimalHCL(),
				Check:  customDataStore_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  customDataStore_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: customDataStore_CompleteHCL(),
				Check:  customDataStore_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: customDataStore_MinimalHCL(),
				Check:  customDataStore_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: customDataStore_CompleteHCL(),
				Check:  customDataStore_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               customDataStore_CompleteHCL(),
				ResourceName:                         "pingfederate_data_store.example",
				ImportStateId:                        customStoreId,
				ImportStateVerifyIdentifierAttribute: "data_store_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// configuration.fields has some sensitive values which can't be imported
				ImportStateVerifyIgnore: []string{
					"custom_data_store.configuration.sensitive_fields.0",
					"custom_data_store.configuration.sensitive_fields.1",
				},
			},
		},
	})
}

// Minimal HCL with only required values set
func customDataStore_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_data_store" "example" {
  data_store_id = "%[1]s"
  custom_data_store = {
    name = "%[1]s"
	plugin_descriptor_ref = {
		id = "com.pingidentity.pf.datastore.other.RestDataSourceDriver"
	}
	configuration = {
      tables = [
        {
          name = "Base URLs and Tags"
          rows = [
            {
              fields = [
                {
                  name  = "Base URL"
                  value = "https://my_rest_datasource.bxretail.org/api/v1/users"
                },
                {
                  name  = "Tags"
                  value = "production"
                }
              ],
              default_row = true
            }
          ]
        },
		{
          name = "Attributes"
          rows = [
            {
              fields = [
                {
                  name  = "Local Attribute"
                  value = "givenName"
                },
                {
                  name  = "JSON Response Attribute Path"
                  value = "/givenName"
                }
              ],
            },
			]
}
	  ]
	}
  }
}
`, customStoreId)
}

// Maximal HCL with all values set where possible
func customDataStore_CompleteHCL() string {
	versionedFields := ""
	if acctest.VersionAtLeast(version.PingFederate1130) {
		versionedFields += `
        {
          name  = "Client TLS Certificate"
          value = ""
        },
        {
          name  = "Maximum Connections"
          value = "32"
        },
		`
	}
	if acctest.VersionAtLeast(version.PingFederate1214) {
		versionedFields += `
		{
		  name = "Exclude default Content-Type from GET Request"
		  value = "false"
		},
		`
	}
	return fmt.Sprintf(`
resource "pingfederate_data_store" "example" {
  data_store_id = "%[1]s"
  custom_data_store = {
    configuration = {
      tables = [
        {
          name = "Base URLs and Tags"
          rows = [
            {
              fields = [
                {
                  name  = "Base URL"
                  value = "https://my_rest_datasource.bxretail.org/api/v1/users"
                },
                {
                  name  = "Tags"
                  value = "production"
                }
              ],
              default_row = true
            }
          ]
        },
        {
          name = "HTTP Request Headers"
          rows = [
            {
              fields = [
                {
                  name  = "Header Name"
                  value = "header"
                },
                {
                  name  = "Header Value"
                  value = "header_value"
                }
              ],
              default_row = false
            }
          ]
        },
        {
          name = "Attributes"
          rows = [
            {
              fields = [
                {
                  name  = "Local Attribute"
                  value = "givenName"
                },
                {
                  name  = "JSON Response Attribute Path"
                  value = "/givenName"
                }
              ],
              default_row = false
            },
            {
              fields = [
                {
                  name  = "Local Attribute"
                  value = "familyName"
                },
                {
                  name  = "JSON Response Attribute Path"
                  value = "/familyName"
                }
              ],
              default_row = false
            },
            {
              fields = [
                {
                  name  = "Local Attribute"
                  value = "email"
                },
                {
                  name  = "JSON Response Attribute Path"
                  value = "/email"
                }
              ],
              default_row = false
            },
            {
              fields = [
                {
                  name  = "Local Attribute"
                  value = "password"
                },
                {
                  name  = "JSON Response Attribute Path"
                  value = "/password"
                }
              ],
              default_row = false
            }
          ]
        }
      ],
      fields = [
        {
          name  = "Authentication Method"
          value = "OAuth 2.0 Bearer Token"
        },
        {
          name  = "HTTP Method"
          value = "GET"
        },
        {
          name  = "Username"
          value = "user"
        },
        {
          name  = "Password Reference"
          value = ""
        },
        {
          name  = "OAuth Token Endpoint"
          value = "https://authservices.bxretail.org/as/token"
        },
        {
          name  = "OAuth Scope"
          value = "restapiscope"
        },
        {
          name  = "Client ID"
          value = "my_client_id"
        },
        {
          name  = "Client Secret Reference"
          value = ""
        },
        {
          name  = "Enable HTTPS Hostname Verification"
          value = "true"
        },
        {
          name  = "Read Timeout (ms)"
          value = "10000"
        },
        {
          name  = "Connection Timeout (ms)"
          value = "10000"
        },
        {
          name  = "Max Payload Size (KB)"
          value = "1024"
        },
        {
          name  = "Retry Request"
          value = "true"
        },
        {
          name  = "Maximum Retries Limit"
          value = "5"
        },
        {
          name  = "Retry Error Codes"
          value = "429"
        },
        {
          name  = "Test Connection URL"
          value = "https://my_rest_datasource.bxretail.org/api/v1/connectiontest"
        },
        {
          name  = "Test Connection Body"
          value = "{\"foo\":\"bar\"}"
        },
		%[2]s
      ]
      sensitive_fields = [
        {
          name  = "Password"
          value = "asdf"
        },
        {
          name  = "Client Secret"
          value = "asdf"
        }
      ]
    }

    name = "%[1]s"
    plugin_descriptor_ref = {
      id = "com.pingidentity.pf.datastore.other.RestDataSourceDriver"
    }
  }
    mask_attribute_values = false
}
`, customStoreId, versionedFields)
}

// Validate any computed values when applying minimal HCL
func customDataStore_CheckComputedValuesMinimal() resource.TestCheckFunc {
	fieldsCount := 19
	if acctest.VersionAtLeast(version.PingFederate1130) {
		fieldsCount += 2
	}
	if acctest.VersionAtLeast(version.PingFederate1214) {
		fieldsCount += 1
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.configuration.fields_all.#", strconv.Itoa(fieldsCount)),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.configuration.tables_all.#", "3"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.configuration.tables.1.rows.0.default_row", "false"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "id", customStoreId),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "mask_attribute_values", "false"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.type", "CUSTOM"),
	)
}

// Validate any computed values when applying complete HCL
func customDataStore_CheckComputedValuesComplete() resource.TestCheckFunc {
	fieldsCount := 19
	if acctest.VersionAtLeast(version.PingFederate1130) {
		fieldsCount += 2
	}
	if acctest.VersionAtLeast(version.PingFederate1214) {
		fieldsCount += 1
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.configuration.fields_all.#", strconv.Itoa(fieldsCount)),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.configuration.tables_all.#", "3"),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "id", customStoreId),
		resource.TestCheckResourceAttr("pingfederate_data_store.example", "custom_data_store.type", "CUSTOM"),
	)
}

// Delete the resource
func customDataStore_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.DataStoresAPI.DeleteDataStore(acctest.TestBasicAuthContext(), customStoreId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func customDataStore_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.DataStoresAPI.DeleteDataStore(acctest.TestBasicAuthContext(), customStoreId).Execute()
	if err == nil {
		return fmt.Errorf("data_store still exists after tests. Expected it to be destroyed")
	}
	return nil
}
