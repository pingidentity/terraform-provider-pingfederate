// Code generated by ping-terraform-plugin-framework-generator

package keypairssslclient_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const keypairsSslClientKeyGenerateKeyId = "keypairssslgenkeyid"
const keypairsSslClientKeyImportKeyId = "keypairssslimpkeyid"

func TestAccKeypairsSslClientKey_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: keypairsSslClientKey_GenerateCheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: keypairsSslClientKey_GenerateMinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					keypairsSslClientKey_Delete(t, keypairsSslClientKeyGenerateKeyId)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccKeypairsSslClientKey_GenerateMinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: keypairsSslClientKey_GenerateCheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: keypairsSslClientKey_GenerateMinimalHCL(),
				Check:  keypairsSslClientKey_CheckComputedValuesGenerateMinimal(),
			},
			{
				// Update with a complete model - this should cause a full replacement
				Config: keypairsSslClientKey_GenerateCompleteHCL(),
				Check:  keypairsSslClientKey_CheckComputedValuesGenerateComplete(),
			},
			// This resource does not support import
		},
	})
}

var fileDataInitial, fileDataUpdated string

func TestAccKeypairsSslClientKey_FileDataMinimalMaximal(t *testing.T) {
	fileDataInitial = os.Getenv("PF_TF_ACC_TEST_SIGNING_KEY_KEYSTORE_1")
	fileDataUpdated = os.Getenv("PF_TF_ACC_TEST_SIGNING_KEY_KEYSTORE_2")
	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.ConfigurationPreCheck(t)
			if fileDataInitial == "" {
				t.Fatal("PF_TF_ACC_TEST_SIGNING_KEY_KEYSTORE_1 must be set for TestAccKeypairsSslClientKey_FileDataMinimalMaximal")
			}
			if fileDataUpdated == "" {
				t.Fatal("PF_TF_ACC_TEST_SIGNING_KEY_KEYSTORE_2 must be set for TestAccKeypairsSslClientKey_FileDataMinimalMaximal")
			}
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: keypairsSslClientKey_ImportCheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: keypairsSslClientKey_ImportMinimalHCL(),
				Check:  keypairsSslClientKey_CheckComputedValuesImportMinimal(),
			},
			{
				// Update with a complete model - this should cause a full replacement
				Config: keypairsSslClientKey_ImportCompleteHCL(),
				Check:  keypairsSslClientKey_CheckComputedValuesImportComplete(),
			},
			// This resource does not support import
		},
	})
}

// Minimal HCL with only required values set
func keypairsSslClientKey_GenerateMinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_keypairs_ssl_client_key" "example" {
  key_id        = "%s"
  common_name   = "Example"
  country       = "US"
  key_algorithm = "RSA"
  organization  = "Ping Identity"
  valid_days    = 365
}

data "pingfederate_keypairs_ssl_client_key" "example" {
  depends_on = [pingfederate_keypairs_ssl_client_key.example]
  key_id     = pingfederate_keypairs_ssl_client_key.example.key_id
}
`, keypairsSslClientKeyGenerateKeyId)
}

// Maximal HCL with all values set where possible
func keypairsSslClientKey_GenerateCompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_keypairs_ssl_client_key" "example" {
  key_id                    = "%s"
  city                      = "Austin"
  common_name               = "Example"
  country                   = "US"
  key_algorithm             = "RSA"
  key_size                  = 2048
  organization              = "Ping Identity"
  organization_unit         = "Engineering"
  signature_algorithm       = "SHA256withRSA"
  state                     = "Texas"
  subject_alternative_names = ["example.com"]
  valid_days                = 365
}

data "pingfederate_keypairs_ssl_client_key" "example" {
  depends_on = [pingfederate_keypairs_ssl_client_key.example]
  key_id     = pingfederate_keypairs_ssl_client_key.example.key_id
}
`, keypairsSslClientKeyGenerateKeyId)
}

// Minimal HCL with only required values set
func keypairsSslClientKey_ImportMinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_keypairs_ssl_client_key" "example" {
  key_id    = "%s"
  file_data = "%s"
  password  = "2FederateM0re"
}

data "pingfederate_keypairs_ssl_client_key" "example" {
  depends_on = [pingfederate_keypairs_ssl_client_key.example]
  key_id     = pingfederate_keypairs_ssl_client_key.example.key_id
}
`, keypairsSslClientKeyImportKeyId, fileDataInitial)
}

// Maximal HCL with all values set where possible
func keypairsSslClientKey_ImportCompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_keypairs_ssl_client_key" "example" {
  key_id    = "%s"
  file_data = "%s"
  password  = "2FederateM0re"
  format    = "PKCS12"
}

data "pingfederate_keypairs_ssl_client_key" "example" {
  depends_on = [pingfederate_keypairs_ssl_client_key.example]
  key_id     = pingfederate_keypairs_ssl_client_key.example.key_id
}
`, keypairsSslClientKeyImportKeyId, fileDataUpdated)
}

// Validate any computed values when applying minimal generated key HCL
func keypairsSslClientKey_CheckComputedValuesGenerateMinimal() resource.TestCheckFunc {
	testChecks := []resource.TestCheckFunc{}
	for _, prefix := range []string{"", "data."} {
		testChecks = append(testChecks,
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "expires"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "id", keypairsSslClientKeyGenerateKeyId),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "issuer_dn", "CN=Example, O=Ping Identity, C=US"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "key_size", "2048"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "serial_number"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha1_fingerprint"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha256_fingerprint"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "signature_algorithm", "SHA256withRSA"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "status", "VALID"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_alternative_names.#", "0"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_dn", "CN=Example, O=Ping Identity, C=US"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "valid_from"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "version", "3"),
		)
	}

	return resource.ComposeTestCheckFunc(
		testChecks...,
	)
}

// Validate any computed values when applying complete generated key HCL
func keypairsSslClientKey_CheckComputedValuesGenerateComplete() resource.TestCheckFunc {
	testChecks := []resource.TestCheckFunc{}
	for _, prefix := range []string{"", "data."} {
		testChecks = append(testChecks,
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "expires"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "id", keypairsSslClientKeyGenerateKeyId),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "issuer_dn", "CN=Example, OU=Engineering, O=Ping Identity, L=Austin, ST=Texas, C=US"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "serial_number"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha1_fingerprint"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha256_fingerprint"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "signature_algorithm", "SHA256withRSA"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "status", "VALID"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_alternative_names.0", "example.com"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_dn", "CN=Example, OU=Engineering, O=Ping Identity, L=Austin, ST=Texas, C=US"),
			resource.TestCheckResourceAttrSet(prefix+"pingfederate_keypairs_ssl_client_key.example", "valid_from"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "version", "3"),
		)
	}

	return resource.ComposeTestCheckFunc(
		testChecks...,
	)
}

// Validate any computed values when applying minimal HCL
func keypairsSslClientKey_CheckComputedValuesImportMinimal() resource.TestCheckFunc {
	testChecks := []resource.TestCheckFunc{}
	for _, prefix := range []string{"", "data."} {
		testChecks = append(testChecks,
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "id", keypairsSslClientKeyImportKeyId),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "expires", "2044-07-24T15:46:27Z"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "issuer_dn", "CN=Example Authority, O=Example Corporation, C=US"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "key_size", "2048"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "serial_number", "28463092959443571178990831419139562736"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha1_fingerprint", "1C83D0C571A1AE934C3C2A4BF7BDC541974497E5"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha256_fingerprint", "B9A2940E5E5E06AC2852DD0A32B7192876C3B194577155CE58E1AD5234375EB7"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "signature_algorithm", "SHA256withRSA"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "status", "VALID"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_alternative_names.#", "0"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_dn", "CN=Example Authority, O=Example Corporation, C=US"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "valid_from", "2024-07-29T15:46:27Z"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "version", "3"),
		)
	}

	return resource.ComposeTestCheckFunc(
		testChecks...,
	)
}

// Validate any computed values when applying complete HCL
func keypairsSslClientKey_CheckComputedValuesImportComplete() resource.TestCheckFunc {
	testChecks := []resource.TestCheckFunc{}
	for _, prefix := range []string{"", "data."} {
		testChecks = append(testChecks,
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "id", keypairsSslClientKeyImportKeyId),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "expires", "2025-08-01T15:16:44Z"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "issuer_dn", "CN=Another Authority, O=Example Corporation, C=US"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "key_size", "2048"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "serial_number", "34314007937343527069893005115224475439"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha1_fingerprint", "60CB3F8861673E1E814D87D84C8FADDDC37AE270"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "sha256_fingerprint", "8AA7D3C77D5053A9C8781D4F3E123712667E6B9A3E103DB74D035D2751695938"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "signature_algorithm", "SHA256withRSA"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "status", "VALID"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_alternative_names.#", "0"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "subject_dn", "CN=Another Authority, O=Example Corporation, C=US"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "valid_from", "2024-08-01T15:16:44Z"),
			resource.TestCheckResourceAttr(prefix+"pingfederate_keypairs_ssl_client_key.example", "version", "3"),
		)
	}

	return resource.ComposeTestCheckFunc(
		testChecks...,
	)
}

// Delete the resource
func keypairsSslClientKey_Delete(t *testing.T, keyId string) {
	testClient := acctest.TestClient()
	_, err := testClient.KeyPairsSslClientAPI.DeleteSslClientKeyPair(acctest.TestBasicAuthContext(), keyId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func keypairsSslClientKey_GenerateCheckDestroy(s *terraform.State) error {
	return keypairsSslClientKey_CheckDestroy(s, keypairsSslClientKeyGenerateKeyId)
}

func keypairsSslClientKey_ImportCheckDestroy(s *terraform.State) error {
	return keypairsSslClientKey_CheckDestroy(s, keypairsSslClientKeyImportKeyId)
}

func keypairsSslClientKey_CheckDestroy(s *terraform.State, keyId string) error {
	testClient := acctest.TestClient()
	_, err := testClient.KeyPairsSslClientAPI.DeleteSslClientKeyPair(acctest.TestBasicAuthContext(), keyId).Execute()
	if err == nil {
		return fmt.Errorf("keypairs_ssl_client_key still exists after tests. Expected it to be destroyed")
	}
	return nil
}
