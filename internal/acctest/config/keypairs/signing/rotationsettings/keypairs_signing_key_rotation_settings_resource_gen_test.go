// Code generated by ping-terraform-plugin-framework-generator

package keypairssigningrotationsettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const keypairsSigningKeyRotationSettingsSettingsId = "rotationsettingstestkey"

func TestAccKeypairsSigningKeyRotationSettings_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: keypairsSigningKeyRotationSettings_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: keypairsSigningKeyRotationSettings_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					keypairsSigningKeyRotationSettings_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccKeypairsSigningKeyRotationSettings_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: keypairsSigningKeyRotationSettings_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: keypairsSigningKeyRotationSettings_MinimalHCL(),
				Check:  keypairsSigningKeyRotationSettings_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  keypairsSigningKeyRotationSettings_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model. No computed values to check.
				Config: keypairsSigningKeyRotationSettings_CompleteHCL(),
			},
			{
				// Back to minimal model
				Config: keypairsSigningKeyRotationSettings_MinimalHCL(),
				Check:  keypairsSigningKeyRotationSettings_CheckComputedValuesBackToMinimal(),
			},
			{
				// Back to complete model
				Config: keypairsSigningKeyRotationSettings_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               keypairsSigningKeyRotationSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_keypairs_signing_key_rotation_settings.example",
				ImportStateId:                        keypairsSigningKeyRotationSettingsSettingsId,
				ImportStateVerifyIdentifierAttribute: "key_pair_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// TODO when the new key_pair resource is added, use that to create the dependency here
// rather than relying on the one creating in data.json
// Minimal HCL with only required values set
func keypairsSigningKeyRotationSettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_keypairs_signing_key_rotation_settings" "example" {
  key_pair_id            = "%s"
  activation_buffer_days = 90
  creation_buffer_days   = 180
}
`, keypairsSigningKeyRotationSettingsSettingsId)
}

// Maximal HCL with all values set where possible
func keypairsSigningKeyRotationSettings_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_keypairs_signing_key_rotation_settings" "example" {
  key_pair_id            = "%s"
  activation_buffer_days = 180
  creation_buffer_days   = 270
  key_algorithm          = "RSA"
  key_size               = 4096
  signature_algorithm    = "SHA512withRSA"
  valid_days             = 730
}
`, keypairsSigningKeyRotationSettingsSettingsId)
}

// Validate any computed values when applying minimal HCL
func keypairsSigningKeyRotationSettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "id", keypairsSigningKeyRotationSettingsSettingsId),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "key_size", "2048"),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "signature_algorithm", "SHA256withRSA"),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "valid_days", "3000"),
	)
}

// Validate any computed values when applying minimal HCL the second time
func keypairsSigningKeyRotationSettings_CheckComputedValuesBackToMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "id", keypairsSigningKeyRotationSettingsSettingsId),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "key_size", "4096"),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "signature_algorithm", "SHA512withRSA"),
		resource.TestCheckResourceAttr("pingfederate_keypairs_signing_key_rotation_settings.example", "valid_days", "730"),
	)
}

// Delete the resource
func keypairsSigningKeyRotationSettings_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.KeyPairsSigningAPI.DeleteKeyPairRotationSettings(acctest.TestBasicAuthContext(), keypairsSigningKeyRotationSettingsSettingsId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func keypairsSigningKeyRotationSettings_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.KeyPairsSigningAPI.DeleteKeyPairRotationSettings(acctest.TestBasicAuthContext(), keypairsSigningKeyRotationSettingsSettingsId).Execute()
	if err == nil {
		return fmt.Errorf("keypairs_signing_key_rotation_settings still exists after tests. Expected it to be destroyed")
	}
	return nil
}
