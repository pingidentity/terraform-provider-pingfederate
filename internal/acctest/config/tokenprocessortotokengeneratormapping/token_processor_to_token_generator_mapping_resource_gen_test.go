// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package tokenprocessortotokengeneratormapping_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const mappingId = "tokenprocessor|tokengenerator"

func TestAccTokenProcessorToTokenGeneratorMapping_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: tokenProcessorToTokenGeneratorMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: tokenProcessorToTokenGeneratorMapping_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					tokenProcessorToTokenGeneratorMapping_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccTokenProcessorToTokenGeneratorMapping_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: tokenProcessorToTokenGeneratorMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: tokenProcessorToTokenGeneratorMapping_MinimalHCL(),
				Check:  tokenProcessorToTokenGeneratorMapping_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  tokenProcessorToTokenGeneratorMapping_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: tokenProcessorToTokenGeneratorMapping_CompleteHCL(),
				Check:  tokenProcessorToTokenGeneratorMapping_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: tokenProcessorToTokenGeneratorMapping_MinimalHCL(),
				Check:  tokenProcessorToTokenGeneratorMapping_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: tokenProcessorToTokenGeneratorMapping_CompleteHCL(),
				Check:  tokenProcessorToTokenGeneratorMapping_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               tokenProcessorToTokenGeneratorMapping_CompleteHCL(),
				ResourceName:                         "pingfederate_token_processor_to_token_generator_mapping.example",
				ImportStateId:                        mappingId,
				ImportStateVerifyIdentifierAttribute: "mapping_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func tokenProcessorToTokenGeneratorMapping_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_token_processor_to_token_generator_mapping" "example" {
  attribute_contract_fulfillment = {
    "SAML_SUBJECT" = {
      source = {
        type = "TEXT"
      }
      value = "myvalue"
    }
  }
  source_id = "tokenprocessor"
  target_id = "tokengenerator"
}
data "pingfederate_token_processor_to_token_generator_mapping" "example" {
  mapping_id = pingfederate_token_processor_to_token_generator_mapping.example.id
}
`)
}

// Maximal HCL with all values set where possible
func tokenProcessorToTokenGeneratorMapping_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_token_processor_to_token_generator_mapping" "example" {
  attribute_contract_fulfillment = {
    "SAML_SUBJECT" = {
      source = {
        type = "CONTEXT"
      }
      value = "ClientIp"
    }
  }
  attribute_sources = [
    {
      custom_attribute_source = {
        data_store_ref = {
          id = "customDataStore"
        }
        description = "APIStubs"
        filter_fields = [
          {
            name = "Authorization Header"
          },
          {
            name = "Body"
          },
          {
            name  = "Resource Path"
            value = "/users/external"
          },
        ]
        id = "APIStubs"
      }
    },
    {
      jdbc_attribute_source = {
        attribute_contract_fulfillment = null
        column_names                   = ["GRANTEE"]
        data_store_ref = {
          id = "ProvisionerDS"
        }
        description = "JDBC"
        filter      = "subject"
        id          = "jdbcguy"
        schema      = "INFORMATION_SCHEMA"
        table       = "ADMINISTRABLE_ROLE_AUTHORIZATIONS"
      }
    },
  ]
  default_target_resource = "https://example.com/haha"
  issuance_criteria = {
    conditional_criteria = [
      {
        attribute_name = "ClientIp"
        condition      = "EQUALS"
        error_result   = "myerrorresult"
        source = {
          type = "CONTEXT"
        }
        value = "value"
      },
    ]
    expression_criteria = null
  }
  source_id = "tokenprocessor"
  target_id = "tokengenerator"
}
data "pingfederate_token_processor_to_token_generator_mapping" "example" {
  mapping_id = pingfederate_token_processor_to_token_generator_mapping.example.id
}
`)
}

// Validate any computed values when applying minimal HCL
func tokenProcessorToTokenGeneratorMapping_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "attribute_contract_fulfillment.SAML_SUBJECT.source.id"),
		resource.TestCheckResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "id", mappingId),
		resource.TestCheckResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "mapping_id", mappingId),
	)
}

// Validate any computed values when applying complete HCL
func tokenProcessorToTokenGeneratorMapping_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "attribute_contract_fulfillment.SAML_SUBJECT.source.id"),
		resource.TestCheckResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "id", mappingId),
		resource.TestCheckResourceAttr("pingfederate_token_processor_to_token_generator_mapping.example", "mapping_id", mappingId),
	)
}

// Delete the resource
func tokenProcessorToTokenGeneratorMapping_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.TokenProcessorToTokenGeneratorMappingsAPI.DeleteTokenToTokenMappingById(acctest.TestBasicAuthContext(), mappingId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func tokenProcessorToTokenGeneratorMapping_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.TokenProcessorToTokenGeneratorMappingsAPI.DeleteTokenToTokenMappingById(acctest.TestBasicAuthContext(), mappingId).Execute()
	if err == nil {
		return fmt.Errorf("token_processor_to_token_generator_mapping still exists after tests. Expected it to be destroyed")
	}
	return nil
}
