// Code generated by ping-terraform-plugin-framework-generator

package spadapters_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const spAdapterAdapterId = "sp_adapterAdapterId"

func TestAccSpAdapter_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: spAdapter_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: spAdapter_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					spAdapter_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccSpAdapter_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: spAdapter_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: spAdapter_MinimalHCL(),
				Check:  spAdapter_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  spAdapter_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: spAdapter_CompleteHCL(),
				Check:  spAdapter_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: spAdapter_MinimalHCL(),
				Check:  spAdapter_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: spAdapter_CompleteHCL(),
				Check:  spAdapter_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               spAdapter_CompleteHCL(),
				ResourceName:                         "pingfederate_sp_adapter.example",
				ImportStateId:                        spAdapterAdapterId,
				ImportStateVerifyIdentifierAttribute: "adapter_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func spAdapter_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_sp_adapter" "example" {
  adapter_id = "%s"
  // TODO set values for minimal fields
  configuration = {
  }
  name = //TODO
  plugin_descriptor_ref = {
    id = //TODO
  }
}
`, spAdapterAdapterId)
}

// Maximal HCL with all values set where possible
func spAdapter_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_sp_adapter" "example" {
  adapter_id = "%s"
  // TODO set values for complete fields
  attribute_contract = {
    extended_attributes = [
      {
        name = //TODO
      }
    ]
  }
  configuration = {
    fields = [
      {
        name = //TODO
        value = //TODO
      }
    ]
    tables = [
      {
        name = //TODO
        rows = [
          {
            default_row = //TODO
            fields = [
              {
                name = //TODO
                value = //TODO
              }
            ]
          }
        ]
      }
    ]
  }
  name = //TODO
  parent_ref = {
    id = //TODO
  }
  plugin_descriptor_ref = {
    id = //TODO
  }
  target_application_info = {
    application_icon_url = //TODO
    application_name = //TODO
  }
}
`, spAdapterAdapterId)
}

// Validate any computed values when applying minimal HCL
// TODO remove any values that are not computed from this check
// TODO set expected values
func spAdapter_CheckComputedValuesMinimal() resource.TestCheckFunc {
	//TODO core_attributes
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "configuration.fields.0.value", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "configuration.tables.0.rows.0.default_row", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "configuration.tables.0.rows.0.fields.0.value", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "target_application_info.application_icon_url", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "target_application_info.application_name", "expected_value"),
	)
}

// Validate any computed values when applying complete HCL
// TODO This may not be needed as a separate function from minimal HCL if the expected values match
// TODO remove any values that are not computed from this check
// TODO set expected values
func spAdapter_CheckComputedValuesComplete() resource.TestCheckFunc {
	//TODO core_attributes
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "configuration.fields.0.value", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "configuration.tables.0.rows.0.default_row", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "configuration.tables.0.rows.0.fields.0.value", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "target_application_info.application_icon_url", "expected_value"),
		resource.TestCheckResourceAttr("pingfederate_sp_adapter.example", "target_application_info.application_name", "expected_value"),
	)
}

// Delete the resource
func spAdapter_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.SpAdaptersAPI.DeleteSpAdapter(acctest.TestBasicAuthContext(), spAdapterAdapterId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func spAdapter_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.SpAdaptersAPI.DeleteSpAdapter(acctest.TestBasicAuthContext(), spAdapterAdapterId).Execute()
	if err == nil {
		return fmt.Errorf("sp_adapter still exists after tests. Expected it to be destroyed")
	}
	return nil
}
