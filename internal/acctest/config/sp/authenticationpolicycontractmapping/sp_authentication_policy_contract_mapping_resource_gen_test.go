// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package spauthenticationpolicycontractmapping_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const mappingId = "exampleSourceContract|spadapter"

func TestAccSpAuthenticationPolicyContractMapping_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: spAuthenticationPolicyContractMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: spAuthenticationPolicyContractMapping_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					spAuthenticationPolicyContractMapping_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccSpAuthenticationPolicyContractMapping_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: spAuthenticationPolicyContractMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: spAuthenticationPolicyContractMapping_MinimalHCL(),
				Check:  spAuthenticationPolicyContractMapping_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  spAuthenticationPolicyContractMapping_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: spAuthenticationPolicyContractMapping_CompleteHCL(),
				Check:  spAuthenticationPolicyContractMapping_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: spAuthenticationPolicyContractMapping_MinimalHCL(),
				Check:  spAuthenticationPolicyContractMapping_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: spAuthenticationPolicyContractMapping_CompleteHCL(),
				Check:  spAuthenticationPolicyContractMapping_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:            spAuthenticationPolicyContractMapping_CompleteHCL(),
				ResourceName:      "pingfederate_sp_authentication_policy_contract_mapping.example",
				ImportStateId:     mappingId,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

// Minimal HCL with only required values set
func spAuthenticationPolicyContractMapping_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_authentication_policy_contract" "example" {
  extended_attributes = [{ name = "extended_attribute" }, { name = "extended_attribute2" }]
  name                = "exampleSourceContract"
  contract_id         = "exampleSourceContract"
}
resource "pingfederate_sp_authentication_policy_contract_mapping" "example" {
  attribute_contract_fulfillment = {
    "subject" = {
      source = {
        type = "TEXT"
      }
      value = "mysubject"
    }
  }
  source_id = pingfederate_authentication_policy_contract.example.id
  target_id = "spadapter"
}
data "pingfederate_sp_authentication_policy_contract_mapping" "example" {
  mapping_id = pingfederate_sp_authentication_policy_contract_mapping.example.id
}
`)
}

// Maximal HCL with all values set where possible
func spAuthenticationPolicyContractMapping_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_authentication_policy_contract" "example" {
  extended_attributes = [{ name = "extended_attribute" }, { name = "extended_attribute2" }]
  name                = "exampleSourceContract"
  contract_id         = "exampleSourceContract"
}
resource "pingfederate_sp_authentication_policy_contract_mapping" "example" {
  attribute_contract_fulfillment = {
    "subject" = {
      source = {
        type = "TEXT"
      }
      value = "mysubject"
    }
  }
  attribute_sources = [
    {
      ldap_attribute_source = {
        attribute_contract_fulfillment = null
        base_dn                        = "ou=Applications,ou=Ping,ou=Groups,dc=dm,dc=example,dc=com"
        binary_attribute_settings      = null
        id                             = "ldapguy"
        data_store_ref = {
          id = "pingdirectory"
        }
        description            = "PingDirectory"
        member_of_nested_group = false
        search_attributes      = ["Subject DN"]
        search_filter          = "(&(memberUid=uid)(cn=Postman))"
        search_scope           = "SUBTREE"
        type                   = "LDAP"
      }
    },
    {
      custom_attribute_source = {
        data_store_ref = {
          id = "customDataStore"
        }
        description = "APIStubs"
        filter_fields = [
          {
            name = "Authorization Header"
          },
          {
            name = "Body"
          },
          {
            name  = "Resource Path"
            value = "/users/external"
          },
        ]
        id = "APIStubs"
      }
    },
  ]
  default_target_resource = "https://example.com/resource"
  issuance_criteria = {
    conditional_criteria = [
      {
        attribute_name = "ClientIp"
        condition      = "EQUALS"
        error_result   = "myerrorresult"
        source = {
          type = "CONTEXT"
        }
        value = "value"
      },
    ]
  }
  source_id = pingfederate_authentication_policy_contract.example.id
  target_id = "spadapter"
}
data "pingfederate_sp_authentication_policy_contract_mapping" "example" {
  mapping_id = pingfederate_sp_authentication_policy_contract_mapping.example.id
}
`)
}

// Validate any computed values when applying minimal HCL
func spAuthenticationPolicyContractMapping_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "attribute_contract_fulfillment.key.source.id"),
		resource.TestCheckResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "id", mappingId),
		resource.TestCheckResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "mapping_id", mappingId),
	)
}

// Validate any computed values when applying complete HCL
func spAuthenticationPolicyContractMapping_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "attribute_contract_fulfillment.key.source.id"),
		resource.TestCheckResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "id", mappingId),
		resource.TestCheckNoResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckResourceAttr("pingfederate_sp_authentication_policy_contract_mapping.example", "mapping_id", mappingId),
	)
}

// Delete the resource
func spAuthenticationPolicyContractMapping_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.SpAuthenticationPolicyContractMappingsAPI.DeleteApcToSpAdapterMappingById(acctest.TestBasicAuthContext(), mappingId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func spAuthenticationPolicyContractMapping_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.SpAuthenticationPolicyContractMappingsAPI.DeleteApcToSpAdapterMappingById(acctest.TestBasicAuthContext(), mappingId).Execute()
	if err == nil {
		return fmt.Errorf("sp_authentication_policy_contract_mapping still exists after tests. Expected it to be destroyed")
	}
	return nil
}
