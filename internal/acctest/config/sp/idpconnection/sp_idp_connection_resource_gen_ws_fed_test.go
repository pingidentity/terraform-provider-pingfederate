// Copyright Â© 2025 Ping Identity Corporation

// Code generated by ping-terraform-plugin-framework-generator

package resource_sp_idp_connection_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const idpConnWsFedId = "wsfedidpconn"

func TestAccSpIdpConnection_WsFedMinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: spIdpConnection_WsFedCheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: spIdpConnection_WsFedMinimalHCL(),
				Check:  spIdpConnection_CheckComputedValuesWsFedMinimal(),
			},
			{
				// Delete the minimal model
				Config:  spIdpConnection_WsFedMinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: spIdpConnection_WsFedCompleteHCL(),
				Check:  spIdpConnection_CheckComputedValuesWsFedComplete(),
			},
			{
				// Back to minimal model
				Config: spIdpConnection_WsFedMinimalHCL(),
				Check:  spIdpConnection_CheckComputedValuesWsFedMinimal(),
			},
			{
				// Back to complete model
				Config: spIdpConnection_WsFedCompleteHCL(),
				Check:  spIdpConnection_CheckComputedValuesWsFedComplete(),
			},
			{
				// Test importing the resource
				Config:            spIdpConnection_WsFedCompleteHCL(),
				ResourceName:      "pingfederate_sp_idp_connection.example",
				ImportStateId:     idpConnWsFedId,
				ImportState:       true,
				ImportStateVerify: true,
				// file_data gets formatted by PF so it won't match, and passwords won't be returned by the API
				// encrypted_passwords change on each get.
				// A couple password attributes also are not returned by the API when set to false.
				// The adapter override settings seem to come back re-encrypted and in a different order, so we can't verify them here.
				ImportStateVerifyIgnore: []string{
					"credentials.certs.0.x509_file.file_data",
					"credentials.inbound_back_channel_auth.http_basic_credentials.password",
					"credentials.inbound_back_channel_auth.http_basic_credentials.encrypted_password",
					"credentials.outbound_back_channel_auth.http_basic_credentials.password",
					"credentials.outbound_back_channel_auth.http_basic_credentials.encrypted_password",
					"credentials.signing_settings.include_cert_in_signature",
					"idp_browser_sso.sign_authn_requests",
					"idp_browser_sso.adapter_mappings.0.adapter_override_settings.configuration.sensitive_fields",
				},
			},
		},
	})
}

func spIdpConnection_WsFedDependencyHCL() string {
	return `
resource "pingfederate_authentication_policy_contract" "apc1" {
  contract_id = "sp_idp1"
  name        = "Example sp_idp1"
  extended_attributes = [
    {
      name = "directory_id"
    },
    {
      name = "given_name"
    },
    {
      name = "family_name"
    },
    {
      name = "email"
    }
  ]
}

resource "pingfederate_authentication_policy_contract" "apc2" {
  contract_id = "sp_idp2"
  name        = "Example sp_idp2"
  extended_attributes = [
    {
      name = "directory_id"
    },
    {
      name = "given_name"
    },
    {
      name = "family_name"
    },
    {
      name = "email"
    }
  ]
}

resource "pingfederate_sp_adapter" "example" {
  adapter_id = "OTSPJava"
  attribute_contract = {
    extended_attributes = [
    ]
  }
  configuration = {
    fields = [
      {
        name  = "Account Link Service"
        value = "https://localhost:9031/SpSample/?cmd=accountlink"
      },
      {
        name  = "Authentication Service"
        value = ""
      },
      {
        name  = "Cipher Suite"
        value = jsonencode(2)
      },
      {
        name  = "Cookie Domain"
        value = ""
      },
      {
        name  = "Cookie Path"
        value = "/"
      },
      {
        name  = "Force SunJCE Provider"
        value = jsonencode(false)
      },
      {
        name  = "HTTP Only Flag"
        value = jsonencode(true)
      },
      {
        name  = "Logout Service"
        value = "https://localhost:9031/SpSample/?cmd=slo"
      },
      {
        name  = "Not Before Tolerance"
        value = jsonencode(0)
      },
      {
        name  = "Obfuscate Password"
        value = jsonencode(true)
      },
      {
        name  = "SameSite Cookie"
        value = jsonencode(3)
      },
      {
        name  = "Secure Cookie"
        value = jsonencode(false)
      },
      {
        name  = "Send Extended Attributes"
        value = jsonencode(0)
      },
      {
        name  = "Send Subject as Query Parameter"
        value = jsonencode(false)
      },
      {
        name  = "Session Cookie"
        value = jsonencode(false)
      },
      {
        name  = "Session Lifetime"
        value = jsonencode(43200)
      },
      {
        name  = "Skip Trimming of Trailing Backslashes"
        value = jsonencode(false)
      },
      {
        name  = "Subject Query Parameter                 "
        value = ""
      },
      {
        name  = "Token Lifetime"
        value = jsonencode(300)
      },
      {
        name  = "Token Name"
        value = "spopentoken"
      },
      {
        name  = "Transport Mode"
        value = jsonencode(2)
      },
      {
        name  = "URL Encode Cookie Values"
        value = jsonencode(true)
      },
      {
        name  = "Use Verbose Error Messages"
        value = jsonencode(false)
      },
    ]
    sensitive_fields = [
      {
        name  = "Password"
        value = "2FederateM0re"
      },
      {
        name  = "Confirm Password"
        value = "2FederateM0re"
      },
    ]
    tables = [
    ]
  }
  name       = "OTSPJava"
  parent_ref = null
  plugin_descriptor_ref = {
    id = "com.pingidentity.adapters.opentoken.SpAuthnAdapter"
  }
  target_application_info = {
    application_icon_url = null
    application_name     = null
  }
}
  `
}

// Minimal HCL with only required values set
func spIdpConnection_WsFedMinimalHCL() string {
	return fmt.Sprintf(`
%s

resource "pingfederate_sp_idp_connection" "example" {
  base_url      = "https://localhost:9031"
  connection_id = "%s"
  credentials = {
    certs = [
      {
        active_verification_cert    = true
        encryption_cert             = false
        primary_verification_cert   = true
        secondary_verification_cert = false
        x509_file = {
          file_data = "-----BEGIN CERTIFICATE-----\nMIIDOjCCAiICCQCjbB7XBVkxCzANBgkqhkiG9w0BAQsFADBfMRIwEAYDVQQDDAlsb2NhbGhvc3Qx\nDjAMBgNVBAgMBVRFWEFTMQ8wDQYDVQQHDAZBVVNUSU4xDTALBgNVBAsMBFBJTkcxDDAKBgNVBAoM\nA0NEUjELMAkGA1UEBhMCVVMwHhcNMjMwNzE0MDI1NDUzWhcNMjQwNzEzMDI1NDUzWjBfMRIwEAYD\nVQQDDAlsb2NhbGhvc3QxDjAMBgNVBAgMBVRFWEFTMQ8wDQYDVQQHDAZBVVNUSU4xDTALBgNVBAsM\nBFBJTkcxDDAKBgNVBAoMA0NEUjELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\nggEKAoIBAQC5yFrh9VR2wk9IjzMz+Ei80K453g1j1/Gv3EQ/SC9h7HZBI6aV9FaEYhGnaquRT5q8\n7p8lzCphKNXVyeL6T/pDJOW70zXItkl8Ryoc0tIaknRQmj8+YA0Hr9GDdmYev2yrxSoVS7s5Bl8p\noasn3DljgnWT07vsQz+hw3NY4SPp7IFGP2PpGUBBIIvrOaDWpPGsXeznBxSFtis6Qo+JiEoaVql9\nb9/XyKZj65wOsVyZhFWeM1nCQITSP9OqOc9FSoDFYQ1AVogm4A2AzUrkMnT1SrN2dCuTmNbeVw7g\nOMqMrVf0CiTv9hI0cATbO5we1sPAlJxscSkJjsaI+sQfjiAnAgMBAAEwDQYJKoZIhvcNAQELBQAD\nggEBACgwoH1qklPF1nI9+WbIJ4K12Dl9+U3ZMZa2lP4hAk1rMBHk9SHboOU1CHDQKT1Z6uxi0NI4\nJZHmP1qP8KPNEWTI8Q76ue4Q3aiA53EQguzGb3SEtyp36JGBq05Jor9erEebFftVl83NFvio72Fn\n0N2xvu8zCnlylf2hpz9x1i01Xnz5UNtZ2ppsf2zzT+4U6w3frH+pkp0RDPuoe9mnBF001AguP31h\nSBZyZzWcwQltuNELnSRCcgJl4kC2h3mAgaVtYalrFxLRa3tA2XF2BHRHmKgocedVhTq+81xrqj+W\nQuDmUe06DnrS3Ohmyj3jhsCCluznAolmrBhT/SaDuGg=\n-----END CERTIFICATE-----\n"
          id        = "4qrossmq1vxa4p836kyqzp48h"
        }
      },
    ]
  }
  entity_id = "wsfed"
  idp_browser_sso = {
    adapter_mappings = [
      {
        attribute_contract_fulfillment = {
          subject = {
            source = {
              id   = null
              type = "ASSERTION"
            }
            value = "SAML_SUBJECT"
          }
        }
        sp_adapter_ref = {
          id = pingfederate_sp_adapter.example.id
        }
      },
    ]
    attribute_contract = {
    }
    idp_identity_mapping = "ACCOUNT_MAPPING"
    protocol             = "WSFED"
    sso_service_endpoints = [
      {
        binding = null
        url     = "/idp/prp.wsf"
      },
    ]
  }
  name = "wsfedidpconn"
}
`, spIdpConnection_WsFedDependencyHCL(), idpConnWsFedId)
}

// Maximal HCL with all values set where possible
func spIdpConnection_WsFedCompleteHCL() string {
	return fmt.Sprintf(`
%s

resource "pingfederate_sp_idp_connection" "example" {
  active        = true
  base_url      = "https://localhost:9031"
  connection_id = "%s"
  contact_info = {
    company    = "Ping Identity"
    email      = "test@test.com"
    first_name = "test"
    last_name  = "test"
    phone      = "555-5555"
  }
  credentials = {
    certs = [
      {
        active_verification_cert    = true
        encryption_cert             = false
        primary_verification_cert   = true
        secondary_verification_cert = false
        x509_file = {
          file_data = "-----BEGIN CERTIFICATE-----\nMIIDOjCCAiICCQCjbB7XBVkxCzANBgkqhkiG9w0BAQsFADBfMRIwEAYDVQQDDAlsb2NhbGhvc3Qx\nDjAMBgNVBAgMBVRFWEFTMQ8wDQYDVQQHDAZBVVNUSU4xDTALBgNVBAsMBFBJTkcxDDAKBgNVBAoM\nA0NEUjELMAkGA1UEBhMCVVMwHhcNMjMwNzE0MDI1NDUzWhcNMjQwNzEzMDI1NDUzWjBfMRIwEAYD\nVQQDDAlsb2NhbGhvc3QxDjAMBgNVBAgMBVRFWEFTMQ8wDQYDVQQHDAZBVVNUSU4xDTALBgNVBAsM\nBFBJTkcxDDAKBgNVBAoMA0NEUjELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\nggEKAoIBAQC5yFrh9VR2wk9IjzMz+Ei80K453g1j1/Gv3EQ/SC9h7HZBI6aV9FaEYhGnaquRT5q8\n7p8lzCphKNXVyeL6T/pDJOW70zXItkl8Ryoc0tIaknRQmj8+YA0Hr9GDdmYev2yrxSoVS7s5Bl8p\noasn3DljgnWT07vsQz+hw3NY4SPp7IFGP2PpGUBBIIvrOaDWpPGsXeznBxSFtis6Qo+JiEoaVql9\nb9/XyKZj65wOsVyZhFWeM1nCQITSP9OqOc9FSoDFYQ1AVogm4A2AzUrkMnT1SrN2dCuTmNbeVw7g\nOMqMrVf0CiTv9hI0cATbO5we1sPAlJxscSkJjsaI+sQfjiAnAgMBAAEwDQYJKoZIhvcNAQELBQAD\nggEBACgwoH1qklPF1nI9+WbIJ4K12Dl9+U3ZMZa2lP4hAk1rMBHk9SHboOU1CHDQKT1Z6uxi0NI4\nJZHmP1qP8KPNEWTI8Q76ue4Q3aiA53EQguzGb3SEtyp36JGBq05Jor9erEebFftVl83NFvio72Fn\n0N2xvu8zCnlylf2hpz9x1i01Xnz5UNtZ2ppsf2zzT+4U6w3frH+pkp0RDPuoe9mnBF001AguP31h\nSBZyZzWcwQltuNELnSRCcgJl4kC2h3mAgaVtYalrFxLRa3tA2XF2BHRHmKgocedVhTq+81xrqj+W\nQuDmUe06DnrS3Ohmyj3jhsCCluznAolmrBhT/SaDuGg=\n-----END CERTIFICATE-----\n"
          id        = "4qrossmq1vxa4p836kyqzp48h"
        }
      },
    ]
    signing_settings = {
      signing_key_pair_ref = {
        id = "419x9yg43rlawqwq9v6az997k"
      }
      include_raw_key_in_signature = false
      include_cert_in_signature    = false
      algorithm                    = "SHA256withRSA"
    }
  }
  default_virtual_entity_id = "virtual_server_id_1"
  entity_id                 = "wsfed"
  error_page_msg_id         = "errorDetail.spSsoFailure"
  extended_properties = {
    authNexp = {
      values = ["val1"]
    }
    useAuthnApi = {
      values = ["val2"]
    }
  }
  idp_browser_sso = {
    adapter_mappings = [
      {
        adapter_override_settings = {
          attribute_contract = {
            extended_attributes = [
              {
                name = "another"
              },
            ]
          }
          configuration = {
            fields = [
              {
                name  = "Account Link Service"
                value = "https://localhost:9031/SpSample/?cmd=accountlink"
              },
              {
                name  = "Authentication Service"
                value = ""
              },
              {
                name  = "Cipher Suite"
                value = jsonencode(2)
              },
              {
                name  = "Cookie Domain"
                value = ""
              },
              {
                name  = "Cookie Path"
                value = "/"
              },
              {
                name  = "Force SunJCE Provider"
                value = jsonencode(false)
              },
              {
                name  = "HTTP Only Flag"
                value = jsonencode(true)
              },
              {
                name  = "Logout Service"
                value = "https://localhost:9031/SpSample/?cmd=slo"
              },
              {
                name  = "Not Before Tolerance"
                value = jsonencode(0)
              },
              {
                name  = "Obfuscate Password"
                value = jsonencode(true)
              },
              {
                name  = "SameSite Cookie"
                value = jsonencode(3)
              },
              {
                name  = "Secure Cookie"
                value = jsonencode(false)
              },
              {
                name  = "Send Extended Attributes"
                value = jsonencode(0)
              },
              {
                name  = "Send Subject as Query Parameter"
                value = jsonencode(false)
              },
              {
                name  = "Session Cookie"
                value = jsonencode(false)
              },
              {
                name  = "Session Lifetime"
                value = jsonencode(43200)
              },
              {
                name  = "Skip Trimming of Trailing Backslashes"
                value = jsonencode(false)
              },
              {
                name  = "Subject Query Parameter                 "
                value = ""
              },
              {
                name  = "Token Lifetime"
                value = jsonencode(300)
              },
              {
                name  = "Token Name"
                value = "spopentoken"
              },
              {
                name  = "Transport Mode"
                value = jsonencode(2)
              },
              {
                name  = "URL Encode Cookie Values"
                value = jsonencode(true)
              },
              {
                name  = "Use Verbose Error Messages"
                value = jsonencode(false)
              },
            ]
            sensitive_fields = [
              {
                encrypted_value = "OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiUWVzOVR5eTV5WiIsInZlcnNpb24iOiIxMi4xLjMuMCJ9..VYp2zsO6T89Ajc9xV0wc3A.Bu1hIvcW9UXXy3lpZ2n1ErAkQlQAnwhhc4U7YzW9NpE.eFWBpj-CpfC_GVncRujP_Q"
                name            = "Confirm Password"
                value           = null # sensitive
              },
              {
                encrypted_value = "OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiUWVzOVR5eTV5WiIsInZlcnNpb24iOiIxMi4xLjMuMCJ9..PlJgJcAtqwjdT-xF-fWmDA.WMp4sRbeqN2xGRkNonszGgtgoY99BnzTNEWCOP5sY7A.lB4raSqNL7P-kTPHIRqwnQ"
                name            = "Password"
                value           = null # sensitive
              },
            ]
            tables = [
            ]
          }
          id   = "OTSPJavaWsfed"
          name = ""
          parent_ref = {
            id = pingfederate_sp_adapter.example.id
          }
          plugin_descriptor_ref = {
            id = ""
          }
        }
        attribute_contract_fulfillment = {
          another = {
            source = {
              id   = null
              type = "TEXT"
            }
            value = "example"
          }
        }
        attribute_sources = [
        ]
        issuance_criteria = {
          conditional_criteria = [
          ]
          expression_criteria = null
        }
        restrict_virtual_entity_ids   = false
        restricted_virtual_entity_ids = []
      },
    ]
    always_sign_artifact_response = false
    assertions_signed             = false
    attribute_contract = {
      extended_attributes = [
        {
          masked = true
          name   = "anotherone"
        },
      ]
    }
    authentication_policy_contract_mappings = [
      {
        attribute_contract_fulfillment = {
          directory_id = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          email = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          family_name = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          given_name = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          subject = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
        }
        attribute_sources = [
        ]
        authentication_policy_contract_ref = {
          id = pingfederate_authentication_policy_contract.apc1.id
        }
        issuance_criteria = {
          conditional_criteria = [
            {
              attribute_name = "SAML_SUBJECT"
              condition      = "EQUALS"
              source = {
                id   = null
                type = "ASSERTION"
              }
              value = "value"
            },
          ]
          expression_criteria = null
        }
        restrict_virtual_server_ids   = true
        restricted_virtual_server_ids = ["virtual_server_id_1", "virtual_server_id_2"]
      },
      {
        attribute_contract_fulfillment = {
          directory_id = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          email = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          family_name = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          given_name = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
          subject = {
            source = {
              id   = null
              type = "NO_MAPPING"
            }
            value = ""
          }
        }
        attribute_sources = [
        ]
        authentication_policy_contract_ref = {
          id = pingfederate_authentication_policy_contract.apc2.id
        }
        issuance_criteria = {
          conditional_criteria = [
            {
              attribute_name = "SAML_SUBJECT"
              condition      = "EQUALS"
              error_result   = "error"
              source = {
                id   = null
                type = "ASSERTION"
              }
              value = "value"
            },
          ]
          expression_criteria = null
        }
        restrict_virtual_server_ids   = true
        restricted_virtual_server_ids = ["virtual_server_id_3"]
      },
    ]
    decryption_policy = {
      assertion_encrypted           = false
      attributes_encrypted          = false
      slo_encrypt_subject_name_id   = false
      slo_subject_name_id_encrypted = false
      subject_name_id_encrypted     = false
    }
    default_target_url   = "https://example.com"
    idp_identity_mapping = "ACCOUNT_MAPPING"
    jit_provisioning = {
      error_handling = "ABORT_SSO"
      event_trigger  = "NEW_USER_ONLY"
      user_attributes = {
        do_attribute_query = false
      }
      user_repository = {
        ldap = {
          data_store_ref = {
            id = "pingdirectory"
          }
          unique_user_id_filter = "uid=john,ou=org"
          base_dn               = "dc=example,dc=com"
          jit_repository_attribute_mapping = {
            USER_KEY = {
              source = {
                id   = null
                type = "NO_MAPPING"
              }
              value = ""
            }
            USER_NAME = {
              source = {
                id   = null
                type = "TEXT"
              }
              value = "asdf"
            }
          }
        }
      }
    }
    protocol            = "WSFED"
    sign_authn_requests = false
    sso_oauth_mapping = {
      attribute_contract_fulfillment = {
        USER_KEY = {
          source = {
            id   = null
            type = "NO_MAPPING"
          }
          value = ""
        }
        USER_NAME = {
          source = {
            id   = null
            type = "NO_MAPPING"
          }
          value = ""
        }
      }
      attribute_sources = [
        {
          custom_attribute_source = null
          jdbc_attribute_source = {
            attribute_contract_fulfillment = null
            column_names                   = ["GRANTEE"]
            data_store_ref = {
              id = "ProvisionerDS"
            }
            description = "JDBC"
            filter      = "$${SAML_SUBJECT}"
            id          = "jdbcattrsource"
            schema      = "INFORMATION_SCHEMA"
            table       = "ADMINISTRABLE_ROLE_AUTHORIZATIONS"
          }
          ldap_attribute_source = null
        },
      ]
      issuance_criteria = {
        conditional_criteria = [
        ]
        expression_criteria = null
      }
    }
    sso_service_endpoints = [
      {
        binding = null
        url     = "/idp/prp.wsf"
      },
    ]
    url_whitelist_entries = [
      {
        allow_query_and_fragment = false
        require_https            = false
        valid_domain             = "www.mozilla.com"
        valid_path               = "/example"
      },
      {
        allow_query_and_fragment = false
        require_https            = true
        valid_domain             = "localhost"
        valid_path               = "/anotherone"
      },
    ]
  }
  idp_oauth_grant_attribute_mapping = {
    access_token_manager_mappings = [
      {
        attribute_contract_fulfillment = {
          "Username" = {
            source = {
              type = "NO_MAPPING"
            }
            value = ""
          }
          "OrgName" = {
            source = {
              type = "NO_MAPPING"
            }
            value = ""
          }
        }
        attribute_sources = []
        issuance_criteria = {
          conditional_criteria = [
            {
              attribute_name = "Username"
              condition      = "MULTIVALUE_CONTAINS_DN"
              source = {
                type = "MAPPED_ATTRIBUTES"
              }
              value = "cn=Example,dc=example,dc=com"
            },
          ]
          expression_criteria = null
        }
        access_token_manager_ref = {
          id = "jwt"
        }
      }
    ]
    idp_oauth_attribute_contract = {
      extended_attributes = [
        {
          masked = false
          name   = "asdf"
        },
        {
          masked = false
          name   = "asdfd"
        }
      ]
    }
  }
  logging_mode       = "STANDARD"
  name               = "wsfedidpconn"
  virtual_entity_ids = ["virtual_server_id_1", "virtual_server_id_2", "virtual_server_id_3"]
}
`, spIdpConnection_WsFedDependencyHCL(), idpConnWsFedId)
}

// Validate any computed values when applying minimal HCL
func spIdpConnection_CheckComputedValuesWsFedMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "active", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.expires", "2024-07-13T02:54:53Z"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.id", "4qrossmq1vxa4p836kyqzp48h"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.issuer_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_size", "2048"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.serial_number", "11775821034523537675"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha1_fingerprint", "3CFE421ED628F7CEFE08B02DEB3EB4FB5DE9B92D"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha256_fingerprint", "633FF42A14E808AEEE5810D78F2C68358AD27787CDDADA302A7E201BA7F2A046"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.signature_algorithm", "SHA256withRSA"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.status", "EXPIRED"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.subject_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.valid_from", "2023-07-14T02:54:53Z"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.version", "1"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "credentials.certs.0.x509_file.formatted_file_data"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "error_page_msg_id", "errorDetail.spSsoFailure"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "id", idpConnWsFedId),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.restrict_virtual_entity_ids", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.restricted_virtual_entity_ids.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.always_sign_artifact_response", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.assertions_signed", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.attribute_contract.core_attributes.0.name", "SAML_SUBJECT"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.attribute_contract.extended_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.authentication_policy_contract_mappings.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.assertion_encrypted", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.attributes_encrypted", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.slo_encrypt_subject_name_id", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.slo_subject_name_id_encrypted", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.subject_name_id_encrypted", "false"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.default_target_url", ""),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.sign_authn_requests", "false"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.sso_application_endpoint"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "logging_mode", "STANDARD"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "virtual_entity_ids.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func spIdpConnection_CheckComputedValuesWsFedComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.expires", "2024-07-13T02:54:53Z"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.id", "4qrossmq1vxa4p836kyqzp48h"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.issuer_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_size", "2048"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.serial_number", "11775821034523537675"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha1_fingerprint", "3CFE421ED628F7CEFE08B02DEB3EB4FB5DE9B92D"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha256_fingerprint", "633FF42A14E808AEEE5810D78F2C68358AD27787CDDADA302A7E201BA7F2A046"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.signature_algorithm", "SHA256withRSA"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.status", "EXPIRED"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.subject_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.valid_from", "2023-07-14T02:54:53Z"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.version", "1"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "credentials.certs.0.x509_file.formatted_file_data"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "id", idpConnWsFedId),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.attribute_contract.core_attributes.0.name", "subject"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.configuration.fields_all.#"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.configuration.tables_all.#"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.target_application_info.%"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.attribute_contract.core_attributes.0.name", "SAML_SUBJECT"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.jit_provisioning.user_attributes.attribute_contract.#", "2"),
		resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.sso_application_endpoint"),
		resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_oauth_grant_attribute_mapping.idp_oauth_attribute_contract.core_attributes.0.name", "TOKEN_SUBJECT"),
	)
}

// Test that any objects created by the test are destroyed
func spIdpConnection_WsFedCheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.SpIdpConnectionsAPI.DeleteConnection(acctest.TestBasicAuthContext(), idpConnWsFedId).Execute()
	if err == nil {
		return fmt.Errorf("sp_idp_connection still exists after tests. Expected it to be destroyed")
	}
	return nil
}
