// Code generated by ping-terraform-plugin-framework-generator

package resource_sp_idp_connection_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const idpConnOidcId = "oidcconn"

func TestAccSpIdpConnection_OidcMinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: spIdpConnection_OidcCheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: spIdpConnection_OidcMinimalHCL(),
				Check:  spIdpConnection_CheckComputedValuesOidcMinimal(),
			},
			{
				// Delete the minimal model
				Config:  spIdpConnection_OidcMinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: spIdpConnection_OidcCompleteHCL(),
				Check:  spIdpConnection_CheckComputedValuesOidcComplete(),
			},
			{
				// Back to minimal model
				Config: spIdpConnection_OidcMinimalHCL(),
				Check:  spIdpConnection_CheckComputedValuesOidcMinimal(),
			},
			{
				// Back to complete model
				Config: spIdpConnection_OidcCompleteHCL(),
				Check:  spIdpConnection_CheckComputedValuesOidcComplete(),
			},
			{
				// Test importing the resource
				Config:            spIdpConnection_OidcCompleteHCL(),
				ResourceName:      "pingfederate_sp_idp_connection.example",
				ImportStateId:     idpConnOidcId,
				ImportState:       true,
				ImportStateVerify: true,
				// file_data gets formatted by PF so it won't match, and passwords won't be returned by the API
				// encrypted_passwords change on each get.
				// A couple password attributes also are not returned by the API when set to false.
				// The adapter override settings seem to come back re-encrypted and in a different order, so we can't verify them here.
				// ImportStateVerifyIgnore: []string{
				// 	"credentials.certs.0.x509_file.file_data",
				// 	"credentials.inbound_back_channel_auth.http_basic_credentials.password",
				// 	"credentials.inbound_back_channel_auth.http_basic_credentials.encrypted_password",
				// 	"credentials.outbound_back_channel_auth.http_basic_credentials.password",
				// 	"credentials.outbound_back_channel_auth.http_basic_credentials.encrypted_password",
				// 	"credentials.signing_settings.include_cert_in_signature",
				// 	"idp_browser_sso.sign_authn_requests",
				// 	"idp_browser_sso.adapter_mappings.0.adapter_override_settings.configuration.sensitive_fields",
				// },
			},
		},
	})
}

func spIdpConnection_OidcDependencyHCL() string {
	return `
resource "pingfederate_authentication_policy_contract" "apc1" {
  contract_id = "sp_idp1"
  name = "Example sp_idp1"
  extended_attributes = [
    {
      name = "directory_id"
    },
    {
      name = "given_name"
    },
    {
      name = "family_name"
    },
    {
      name = "email"
    }
  ]
}
  `
}

// Minimal HCL with only required values set
func spIdpConnection_OidcMinimalHCL() string {
	return fmt.Sprintf(`
%s

resource "pingfederate_sp_idp_connection" "oidc_example" {
  entity_id = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as"

  name         = "PingOne"

  oidc_client_credentials = {
    client_id     = "myclientid"
  }

  error_page_msg_id = "errorDetail.spSsoFailure"

  idp_browser_sso = {
    attribute_contract = {
      extended_attributes = [
        { name = "acr" },
        { name = "address" },
        { name = "auth_time" },
        { name = "email" },
        { name = "family_name" },
        { name = "given_name" },
        { name = "iss" },
        { name = "locale" },
        { name = "middle_name" },
        { name = "name" },
        { name = "phone_number" },
        { name = "picture" },
        { name = "preferred_username" },
        { name = "profile" },
      ]
    }
    authentication_policy_contract_mappings = [
      {
        authentication_policy_contract_ref = {
          id = pingfederate_authentication_policy_contract.apc1.id
        }

        attribute_contract_fulfillment = {
          directory_id = {
            source = {
              type = "CLAIMS"
            }
            value = "sub"
          }
          email = {
            source = {
              type = "CLAIMS"
            }
            value = "email"
          }
          family_name = {
            source = {
              type = "CLAIMS"
            }
            value = "family_name"
          }
          given_name = {
            source = {
              type = "CLAIMS"
            }
            value = "given_name"
          }
          subject = {
            source = {
              type = "CLAIMS"
            }
            value = "sub"
          }
        }
      },
    ]

    idp_identity_mapping = "ACCOUNT_MAPPING"

    oidc_provider_settings = {
      authorization_endpoint                       = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/authorize"
      jwks_url                                     = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/jwks"
      login_type                                   = "POST"
      scopes                         = "openid profile email address phone"
    }
    protocol = "OIDC"
  }
}
`, spIdpConnection_OidcDependencyHCL(), idpConnOidcId)
}

// Maximal HCL with all values set where possible
func spIdpConnection_OidcCompleteHCL() string {
	return fmt.Sprintf(`
%s

resource "pingfederate_sp_idp_connection" "example" {
  active = true
  additional_allowed_entities_configuration = {
    additional_allowed_entities = [
      {
        entity_id = "https://bxretail.org",
        entity_description = "additional entity"
      }
    ]
    allow_additional_entities = true
    allow_all_entities        = false
  }
  base_url      = "https://bxretail.org"
  connection_id   = "%s"
  contact_info = {
    company    = "Ping Identity"
    email      = "test@test.com"
    first_name = "test"
    last_name  = "test"
    phone      = "555-5555"
  }
  entity_id                 = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as"
  error_page_msg_id         = "errorDetail.spSsoFailure"
  extended_properties = {
    authNexp = {
      values = ["val1"]
    }
    useAuthnApi = {
      values = ["val2"]
    }
  }
  idp_browser_sso = {
    adapter_mappings = [
      {
        attribute_sources = []
        attribute_contract_fulfillment = {
          subject = {
            source = {
              type = "NO_MAPPING"
            }
              value = ""
          }
        }
        issuance_criteria = {
          conditional_criteria = []
        }
        restrict_virtual_entity_ids   = false
        restricted_virtual_entity_ids = []
        sp_adapter_ref = {
          id = "spadapter"
        }
      }
    ]
    always_sign_artifact_response = false
    attribute_contract = {
      extended_attributes = [
        {
          masked = false
          name   = "acr"
        },
        {
          masked = false
          name   = "address"
        },
        {
          masked = false
          name   = "auth_time"
        },
        {
          masked = false
          name   = "email"
        },
        {
          masked = false
          name   = "family_name"
        },
        {
          masked = false
          name   = "given_name"
        },
        {
          masked = false
          name   = "iss"
        },
        {
          masked = false
          name   = "locale"
        },
        {
          masked = false
          name   = "middle_name"
        },
        {
          masked = false
          name   = "name"
        },
        {
          masked = false
          name   = "phone_number"
        },
        {
          masked = false
          name   = "picture"
        },
        {
          masked = false
          name   = "preferred_username"
        },
        {
          masked = false
          name   = "profile"
        },
      ]
    }
    authentication_policy_contract_mappings = [
      {
        attribute_contract_fulfillment = {
          directory_id = {
            source = {
              id   = null
              type = "CLAIMS"
            }
            value = "sub"
          }
          email = {
            source = {
              id   = null
              type = "CLAIMS"
            }
            value = "email"
          }
          family_name = {
            source = {
              id   = null
              type = "CLAIMS"
            }
            value = "family_name"
          }
          given_name = {
            source = {
              id   = null
              type = "CLAIMS"
            }
            value = "given_name"
          }
          subject = {
            source = {
              id   = null
              type = "CLAIMS"
            }
            value = "sub"
          }
        }
        attribute_sources = [
        ]
        authentication_policy_contract_ref = {
          id = pingfederate_authentication_policy_contract.apc1.id
        }
        issuance_criteria = {
          conditional_criteria = [
          ]
          expression_criteria = null
        }
        restrict_virtual_server_ids   = false
        restricted_virtual_server_ids = []
      },
    ]
    authn_context_mappings = [
      {
        local  = "1fa"
        remote = "Single_Factor"
      },
      {
        local  = "mfa"
        remote = "Multi_Factor"
      },
    ]
    default_target_url                       = "https://example.com"
    idp_identity_mapping                     = "ACCOUNT_MAPPING"
    jit_provisioning                         = {
      error_handling = "ABORT_SSO"
      event_trigger = "NEW_USER_ONLY"
      user_attributes = {
        do_attribute_query = false
      }
      user_repository = {
        ldap = {
          data_store_ref = {
            id = "pingdirectory"
          }
          unique_user_id_filter = "uid=john,ou=org"
          base_dn = "dc=example,dc=com"
          jit_repository_attribute_mapping = {
            USER_KEY = {
              source = {
                id   = null
                type = "NO_MAPPING"
              }
              value = ""
            }
            USER_NAME = {
              source = {
                id   = null
                type = "TEXT"
              }
              value = "asdf"
            }
          }
        }
      }
    }
    oauth_authentication_policy_contract_ref = {
      id = pingfederate_authentication_policy_contract.apc1.id
    }
    oidc_provider_settings = {
      authentication_scheme                        = "PRIVATE_KEY_JWT"
      authentication_signing_algorithm             = "RS256"
      authorization_endpoint                       = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/authorize"
      enable_pkce                                  = true
      jwks_url                                     = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/jwks"
      jwt_secured_authorization_response_mode_type = "DISABLED"
      login_type                                   = "CODE"
      logout_endpoint                              = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/signoff"
      pushed_authorization_request_endpoint        = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/par"
      request_parameters = [
        {
          application_endpoint_override = false
          attribute_value = {
            source = {
              id   = null
              type = "TEXT"
            }
            value = "param1"
          }
          name  = "param1"
          value = null
        },
        {
          application_endpoint_override = true
          attribute_value = {
            source = {
              id   = null
              type = "CONTEXT"
            }
            value = "ClientIp"
          }
          name  = "param2"
          value = null
        },
      ]
      request_signing_algorithm      = "RS256"
      scopes                         = "openid profile email address phone"
      token_endpoint                 = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/token"
      track_user_sessions_for_logout = true
      user_info_endpoint             = "https://auth.pingone.eu/85a52cf7-357f-40c1-b909-de24d976031d/as/userinfo"
    }
    protocol              = "OIDC"
    sign_authn_requests   = false
  }
  idp_oauth_grant_attribute_mapping = {
    access_token_manager_mappings = [
      {
        attribute_contract_fulfillment = {
          "Username" = {
            source = {
              type = "NO_MAPPING"
            }
              value = ""
          }
          "OrgName" = {
            source = {
              type = "NO_MAPPING"
            }
              value = ""
          }
        }
          attribute_sources = []
      issuance_criteria = {
        conditional_criteria = [
        ]
        expression_criteria = null
      }
        access_token_manager_ref = {
          id = "jwt"
        }
      }
    ]
    idp_oauth_attribute_contract = {
      extended_attributes = [
        {
      masked = false
          name = "asdf"
        },
        {
      masked = false
          name = "asdfd"
        }
      ]
    }
  }
  logging_mode                      = "FULL"
  name                              = "PingOne"
  oidc_client_credentials = {
    client_id     = "myclientid"
    client_secret = "myclientsecrets"
  }
}
`, spIdpConnection_OidcDependencyHCL(), idpConnOidcId)
}

// Validate any computed values when applying minimal HCL
func spIdpConnection_CheckComputedValuesOidcMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "active", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.expires", "2024-07-13T02:54:53Z"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.id", "4qrossmq1vxa4p836kyqzp48h"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.issuer_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_algorithm", "RSA"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_size", "2048"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.serial_number", "11775821034523537675"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha1_fingerprint", "3CFE421ED628F7CEFE08B02DEB3EB4FB5DE9B92D"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha256_fingerprint", "633FF42A14E808AEEE5810D78F2C68358AD27787CDDADA302A7E201BA7F2A046"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.signature_algorithm", "SHA256withRSA"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.status", "EXPIRED"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.subject_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.valid_from", "2023-07-14T02:54:53Z"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.version", "1"),
	// resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "credentials.certs.0.x509_file.formatted_file_data"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "id", idpConnOidcId),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.attribute_sources.#", "0"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.issuance_criteria.conditional_criteria.#", "0"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.restrict_virtual_entity_ids", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.restricted_virtual_entity_ids.#", "0"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.always_sign_artifact_response", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.assertions_signed", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.attribute_contract.core_attributes.0.name", "SAML_SUBJECT"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.attribute_contract.extended_attributes.#", "0"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.authentication_policy_contract_mappings.#", "0"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.assertion_encrypted", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.attributes_encrypted", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.slo_encrypt_subject_name_id", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.slo_subject_name_id_encrypted", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.decryption_policy.subject_name_id_encrypted", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.default_target_url", ""),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.sign_authn_requests", "false"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.sso_application_endpoint", "https://localhost:9031/sp/startSSO.ping?PartnerIdpId=wsfed"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "logging_mode", "STANDARD"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "virtual_entity_ids.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func spIdpConnection_CheckComputedValuesOidcComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.expires", "2024-07-13T02:54:53Z"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.id", "4qrossmq1vxa4p836kyqzp48h"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.issuer_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_algorithm", "RSA"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.key_size", "2048"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.serial_number", "11775821034523537675"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha1_fingerprint", "3CFE421ED628F7CEFE08B02DEB3EB4FB5DE9B92D"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.sha256_fingerprint", "633FF42A14E808AEEE5810D78F2C68358AD27787CDDADA302A7E201BA7F2A046"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.signature_algorithm", "SHA256withRSA"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.status", "EXPIRED"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.subject_dn", "C=US, O=CDR, OU=PING, L=AUSTIN, ST=TEXAS, CN=localhost"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.valid_from", "2023-07-14T02:54:53Z"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "credentials.certs.0.cert_view.version", "1"),
	// resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "credentials.certs.0.x509_file.formatted_file_data"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "id", idpConnOidcId),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.attribute_contract.core_attributes.0.name", "subject"),
	// resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.configuration.fields_all.#"),
	// resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.configuration.tables_all.#"),
	// resource.TestCheckResourceAttrSet("pingfederate_sp_idp_connection.example", "idp_browser_sso.adapter_mappings.0.adapter_override_settings.target_application_info.%"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.attribute_contract.core_attributes.0.name", "SAML_SUBJECT"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.jit_provisioning.user_attributes.attribute_contract.#", "2"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_browser_sso.sso_application_endpoint", "https://localhost:9031/sp/startSSO.ping?PartnerIdpId=wsfed"),
	// resource.TestCheckResourceAttr("pingfederate_sp_idp_connection.example", "idp_oauth_grant_attribute_mapping.idp_oauth_attribute_contract.core_attributes.0.name", "TOKEN_SUBJECT"),
	)
}

// Test that any objects created by the test are destroyed
func spIdpConnection_OidcCheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.SpIdpConnectionsAPI.DeleteConnection(acctest.TestBasicAuthContext(), idpConnOidcId).Execute()
	if err == nil {
		return fmt.Errorf("sp_idp_connection still exists after tests. Expected it to be destroyed")
	}
	return nil
}
