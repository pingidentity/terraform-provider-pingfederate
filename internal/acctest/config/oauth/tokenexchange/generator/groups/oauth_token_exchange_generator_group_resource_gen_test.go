// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangegeneratorgroups_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthTokenExchangeGeneratorGroupGroupId = "oauthTokenExchangeGeneratorGroup"

func TestAccOauthTokenExchangeGeneratorGroup_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthTokenExchangeGeneratorGroup_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeGeneratorGroup_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthTokenExchangeGeneratorGroup_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthTokenExchangeGeneratorGroup_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthTokenExchangeGeneratorGroup_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeGeneratorGroup_MinimalHCL(),
				Check:  oauthTokenExchangeGeneratorGroup_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthTokenExchangeGeneratorGroup_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthTokenExchangeGeneratorGroup_CompleteHCL(),
				Check:  oauthTokenExchangeGeneratorGroup_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthTokenExchangeGeneratorGroup_MinimalHCL(),
				Check:  oauthTokenExchangeGeneratorGroup_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthTokenExchangeGeneratorGroup_CompleteHCL(),
				Check:  oauthTokenExchangeGeneratorGroup_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthTokenExchangeGeneratorGroup_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_token_exchange_generator_group.example",
				ImportStateId:                        oauthTokenExchangeGeneratorGroupGroupId,
				ImportStateVerifyIdentifierAttribute: "group_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

//TODO dependency HCL

// Minimal HCL with only required values set
func oauthTokenExchangeGeneratorGroup_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_token_exchange_generator_group" "example" {
  group_id = "%s"
  generator_mappings = [
    {
      default_mapping = true
      requested_token_type = "urn:ietf:params:oauth:token-type:saml2"
      token_generator = {
        id = "tokengenerator"
      }
    }
  ]
  name = "My generator group"
}
`, oauthTokenExchangeGeneratorGroupGroupId)
}

// Maximal HCL with all values set where possible
func oauthTokenExchangeGeneratorGroup_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_token_exchange_generator_group" "example" {
  group_id = "%s"
  generator_mappings = [
    {
      default_mapping = true
      requested_token_type = "urn:ietf:params:oauth:token-type:saml2"
      token_generator = {
        id = "tokengenerator"
      }
    }
  ]
  name = "My updated generator group"
  resource_uris = ["https://apps.example.com/scim/"]
}
`, oauthTokenExchangeGeneratorGroupGroupId)
}

// Validate any computed values when applying minimal HCL
func oauthTokenExchangeGeneratorGroup_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		/*resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_token_exchange_generator_group.example", "generator_mappings.*", map[string]string{
			"default_mapping": "false",
		}),*/
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_generator_group.example", "resource_uris.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
// TODO This may not be needed as a separate function from minimal HCL if the expected values match
// TODO remove any values that are not computed from this check
// TODO set expected values
func oauthTokenExchangeGeneratorGroup_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
	/*resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_generator_group.example", "generator_mappings.0.default_mapping", "expected_value"),
	resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_generator_group.example", "resource_uris.0", "expected_value"),*/
	)
}

// Delete the resource
func oauthTokenExchangeGeneratorGroup_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthTokenExchangeGeneratorAPI.DeleteOauthTokenExchangeGroup(acctest.TestBasicAuthContext(), oauthTokenExchangeGeneratorGroupGroupId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthTokenExchangeGeneratorGroup_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthTokenExchangeGeneratorAPI.DeleteOauthTokenExchangeGroup(acctest.TestBasicAuthContext(), oauthTokenExchangeGeneratorGroupGroupId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_token_exchange_generator_group still exists after tests. Expected it to be destroyed")
	}
	return nil
}
