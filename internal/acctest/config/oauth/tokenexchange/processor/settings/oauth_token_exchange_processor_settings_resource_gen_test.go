// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangeprocessorsettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccOauthTokenExchangeProcessorSettings_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeProcessorSettings_MinimalHCL(),
			},
			{
				// Update to a complete model
				Config: oauthTokenExchangeProcessorSettings_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               oauthTokenExchangeProcessorSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_token_exchange_processor_settings.example",
				ImportStateVerifyIdentifierAttribute: "default_processor_policy_ref.%",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: oauthTokenExchangeProcessorSettings_MinimalHCL(),
			},
		},
	})
}

func dependencyOauthTokenExchangeProcessorPolicy() string {
	return `
resource "pingfederate_idp_token_processor" "saml2" {
  processor_id = "nestDependencyTokenProcessor"
  attribute_contract = {
    core_attributes = [
      {
        name = "SAML_SUBJECT"
      }
    ]
  }
  configuration = {
    fields = [
      {
        name  = "Audience",
        value = "myaudience"
      }
    ]
  }
  name = "My nested dep token processor"
  plugin_descriptor_ref = {
    id = "org.sourceid.wstrust.processor.saml.Saml20TokenProcessor"
  }
}

resource "pingfederate_oauth_token_exchange_processor_policy" "policyDep" {
  policy_id = "defaultpolicy"
  name      = "My default processor policy"
  processor_mappings = [
    {
      attribute_contract_fulfillment = {
        "subject" = {
          source = {
            type = "TEXT"
          }
          value = "value"
        }
      }
      subject_token_processor = {
        id = pingfederate_idp_token_processor.saml2.processor_id
      }
      subject_token_type = "urn:ietf:params:oauth:token-type:saml2"
    }
  ]
}
	`
}

// Minimal HCL with only required values set
func oauthTokenExchangeProcessorSettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_token_exchange_processor_settings" "example" {
}
`)
}

// Maximal HCL with all values set where possible
func oauthTokenExchangeProcessorSettings_CompleteHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_token_exchange_processor_settings" "example" {
  default_processor_policy_ref = {
    id = pingfederate_oauth_token_exchange_processor_policy.policyDep.policy_id
  }
}
`, dependencyOauthTokenExchangeProcessorPolicy())
}
