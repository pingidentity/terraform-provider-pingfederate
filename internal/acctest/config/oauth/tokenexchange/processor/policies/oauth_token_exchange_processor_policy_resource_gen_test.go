// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangeprocessorpolicies_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthTokenExchangeProcessorPolicyPolicyId = "oauthTokenExchangeProcessorPolic"

func TestAccOauthTokenExchangeProcessorPolicy_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthTokenExchangeProcessorPolicy_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeProcessorPolicy_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthTokenExchangeProcessorPolicy_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthTokenExchangeProcessorPolicy_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthTokenExchangeProcessorPolicy_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeProcessorPolicy_MinimalHCL(),
				Check:  oauthTokenExchangeProcessorPolicy_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthTokenExchangeProcessorPolicy_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthTokenExchangeProcessorPolicy_CompleteHCL(),
				Check:  oauthTokenExchangeProcessorPolicy_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthTokenExchangeProcessorPolicy_MinimalHCL(),
				Check:  oauthTokenExchangeProcessorPolicy_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthTokenExchangeProcessorPolicy_CompleteHCL(),
				Check:  oauthTokenExchangeProcessorPolicy_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthTokenExchangeProcessorPolicy_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_token_exchange_processor_policy.example",
				ImportStateId:                        oauthTokenExchangeProcessorPolicyPolicyId,
				ImportStateVerifyIdentifierAttribute: "policy_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func dependencyTokenProcessorHCL() string {
	return `
resource "pingfederate_idp_token_processor" "saml2" {
  processor_id = "dependencyTokenProcessor"
  attribute_contract = {
    core_attributes = [
      {
        name = "SAML_SUBJECT"
      }
    ]
  }
  configuration = {
    fields = [
      {
        name  = "Audience",
        value = "myaudience"
      }
    ]
  }
  name = "My token processor"
  plugin_descriptor_ref = {
    id = "org.sourceid.wstrust.processor.saml.Saml20TokenProcessor"
  }
}
`
}

// Minimal HCL with only required values set
func oauthTokenExchangeProcessorPolicy_MinimalHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_token_exchange_processor_policy" "example" {
  policy_id = "%s"
  name      = "My processor policy"
  processor_mappings = [
    {
      attribute_contract_fulfillment = {
        "subject" = {
          source = {
            type = "TEXT"
          }
          value = "value"
        }
      }
      subject_token_processor = {
        id = pingfederate_idp_token_processor.saml2.processor_id
      }
      subject_token_type = "urn:ietf:params:oauth:token-type:saml2"
    }
  ]
}
`, dependencyTokenProcessorHCL(), oauthTokenExchangeProcessorPolicyPolicyId)
}

// Maximal HCL with all values set where possible
func oauthTokenExchangeProcessorPolicy_CompleteHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_token_exchange_processor_policy" "example" {
  policy_id            = "%s"
  actor_token_required = true
  attribute_contract = {
    extended_attributes = [
      {
        name = "extendedattr"
      }
    ]
  }
  name = "My updated processor policy"
  processor_mappings = [
    {
      actor_token_processor = {
        id = pingfederate_idp_token_processor.saml2.processor_id
      }
      actor_token_type = "urn:ietf:params:oauth:token-type:saml2"
      attribute_contract_fulfillment = {
        "subject" = {
          source = {
            type = "CONTEXT"
          }
          value = "ClientId"
        },
        "extendedattr" = {
          source = {
            type = "TEXT"
          }
          value = "value"
        }
      }
      // attribute_sources
      %s
      // issuance_criteria
      %s
      subject_token_processor = {
        id = pingfederate_idp_token_processor.saml2.processor_id
      }
      subject_token_type = "urn:ietf:params:oauth:token-type:saml2"
    }
  ]
}
`, dependencyTokenProcessorHCL(), oauthTokenExchangeProcessorPolicyPolicyId,
		attributesources.Hcl(nil, attributesources.LdapClientStruct("(cn=Example)", "SUBTREE", *client.NewResourceLink("pingdirectory"))),
		issuancecriteria.Hcl(issuancecriteria.ConditionalCriteria()))
}

// Validate any computed values when applying minimal HCL
func oauthTokenExchangeProcessorPolicy_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "id", oauthTokenExchangeProcessorPolicyPolicyId),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "actor_token_required", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "attribute_contract.core_attributes.0.name", "subject"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "attribute_contract.extended_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "processor_mappings.0.attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "processor_mappings.0.issuance_criteria.conditional_criteria.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func oauthTokenExchangeProcessorPolicy_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "id", oauthTokenExchangeProcessorPolicyPolicyId),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_processor_policy.example", "attribute_contract.core_attributes.0.name", "subject"),
	)
}

// Delete the resource
func oauthTokenExchangeProcessorPolicy_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthTokenExchangeProcessorAPI.DeleteOauthTokenExchangeProcessorPolicyy(acctest.TestBasicAuthContext(), oauthTokenExchangeProcessorPolicyPolicyId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthTokenExchangeProcessorPolicy_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthTokenExchangeProcessorAPI.DeleteOauthTokenExchangeProcessorPolicyy(acctest.TestBasicAuthContext(), oauthTokenExchangeProcessorPolicyPolicyId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_token_exchange_processor_policy still exists after tests. Expected it to be destroyed")
	}
	return nil
}
