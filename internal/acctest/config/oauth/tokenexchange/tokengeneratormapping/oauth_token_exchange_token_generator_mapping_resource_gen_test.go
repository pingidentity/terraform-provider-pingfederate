// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangetokengeneratormapping_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const tokenExchangeProcessorPolicyToTokenGeneratorMappingId = "tokenexchangeprocessorpolicy|tokengenerator"

func TestAccOauthTokenExchangeTokenGeneratorMapping_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthTokenExchangeTokenGeneratorMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeTokenGeneratorMapping_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthTokenExchangeTokenGeneratorMapping_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthTokenExchangeTokenGeneratorMapping_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthTokenExchangeTokenGeneratorMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthTokenExchangeTokenGeneratorMapping_MinimalHCL(),
				Check:  oauthTokenExchangeTokenGeneratorMapping_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthTokenExchangeTokenGeneratorMapping_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthTokenExchangeTokenGeneratorMapping_CompleteHCL(),
				Check:  oauthTokenExchangeTokenGeneratorMapping_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthTokenExchangeTokenGeneratorMapping_MinimalHCL(),
				Check:  oauthTokenExchangeTokenGeneratorMapping_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthTokenExchangeTokenGeneratorMapping_CompleteHCL(),
				Check:  oauthTokenExchangeTokenGeneratorMapping_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthTokenExchangeTokenGeneratorMapping_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_token_exchange_token_generator_mapping.example",
				ImportStateId:                        tokenExchangeProcessorPolicyToTokenGeneratorMappingId,
				ImportStateVerifyIdentifierAttribute: "mapping_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthTokenExchangeTokenGeneratorMapping_MinimalHCL() string {
	return `
resource "pingfederate_oauth_token_exchange_token_generator_mapping" "example" {
  attribute_contract_fulfillment = {
    "SAML_SUBJECT" = {
      source = {
        type = "TEXT"
      }
      value = "value"
    }
  }
  source_id = "tokenexchangeprocessorpolicy"
  target_id = "tokengenerator"
}
data "pingfederate_oauth_token_exchange_token_generator_mapping" "example" {
  mapping_id = pingfederate_oauth_token_exchange_token_generator_mapping.example.id
}
`
}

// Maximal HCL with all values set where possible
func oauthTokenExchangeTokenGeneratorMapping_CompleteHCL() string {
	return `
resource "pingfederate_oauth_token_exchange_token_generator_mapping" "example" {
  attribute_contract_fulfillment = {
    "SAML_SUBJECT" = {
      source = {
        type = "CONTEXT"
      }
      value = "ClientIp"
    }
  }
  attribute_sources = [{
    ldap_attribute_source = {
      attribute_contract_fulfillment = null
      base_dn                        = "ou=Applications,ou=Ping,ou=Groups,dc=dm,dc=example,dc=com"
      binary_attribute_settings      = null
      id                             = "ldapguy"
      data_store_ref = {
        id = "pingdirectory"
      }
      description            = "PingDirectory"
      member_of_nested_group = false
      search_attributes      = ["Subject DN"]
      search_filter          = "(&(memberUid=uid)(cn=Postman))"
      search_scope           = "SUBTREE"
      type                   = "LDAP"
    }
  }]
  issuance_criteria = {
    conditional_criteria = [
      {
        attribute_name = "SAML_SUBJECT"
        condition      = "MULTIVALUE_CONTAINS_DN"
        source = {
          type = "MAPPED_ATTRIBUTES"
        }
        value = "cn=Example,dc=example,dc=com"
      },
    ]
    expression_criteria = null
  }
  source_id = "tokenexchangeprocessorpolicy"
  target_id = "tokengenerator"
}
data "pingfederate_oauth_token_exchange_token_generator_mapping" "example" {
  mapping_id = pingfederate_oauth_token_exchange_token_generator_mapping.example.id
}
`
}

// Validate any computed values when applying minimal HCL
func oauthTokenExchangeTokenGeneratorMapping_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "attribute_contract_fulfillment.key.source.id"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "id", tokenExchangeProcessorPolicyToTokenGeneratorMappingId),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "license_connection_group_assignment"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "mapping_id", tokenExchangeProcessorPolicyToTokenGeneratorMappingId),
	)
}

// Validate any computed values when applying complete HCL
func oauthTokenExchangeTokenGeneratorMapping_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "attribute_contract_fulfillment.key.source.id"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "id", tokenExchangeProcessorPolicyToTokenGeneratorMappingId),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "license_connection_group_assignment"),
		resource.TestCheckResourceAttr("pingfederate_oauth_token_exchange_token_generator_mapping.example", "mapping_id", tokenExchangeProcessorPolicyToTokenGeneratorMappingId),
	)
}

// Delete the resource
func oauthTokenExchangeTokenGeneratorMapping_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthTokenExchangeTokenGeneratorMappingsAPI.DeleteTokenGeneratorMappingById(acctest.TestBasicAuthContext(), tokenExchangeProcessorPolicyToTokenGeneratorMappingId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthTokenExchangeTokenGeneratorMapping_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthTokenExchangeTokenGeneratorMappingsAPI.DeleteTokenGeneratorMappingById(acctest.TestBasicAuthContext(), tokenExchangeProcessorPolicyToTokenGeneratorMappingId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_token_exchange_token_generator_mapping still exists after tests. Expected it to be destroyed")
	}
	return nil
}
