// Code generated by ping-terraform-plugin-framework-generator

package oauthauthorizationdetailtypes_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthAuthorizationDetailTypeTypeId = "oauthAuthorizationDetailTypeType"

func TestAccOauthAuthorizationDetailType_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAuthorizationDetailType_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAuthorizationDetailType_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthAuthorizationDetailType_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthAuthorizationDetailType_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAuthorizationDetailType_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAuthorizationDetailType_MinimalHCL(),
				Check:  oauthAuthorizationDetailType_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthAuthorizationDetailType_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model. No computed values for the complete model.
				Config: oauthAuthorizationDetailType_CompleteHCL(),
			},
			{
				// Back to minimal model
				Config: oauthAuthorizationDetailType_MinimalHCL(),
				Check:  oauthAuthorizationDetailType_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthAuthorizationDetailType_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               oauthAuthorizationDetailType_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_authorization_detail_type.example",
				ImportStateId:                        oauthAuthorizationDetailTypeTypeId,
				ImportStateVerifyIdentifierAttribute: "type_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func dependencyAuthorizationDetailProcessorHCL() string {
	return `
resource "pingfederate_oauth_authorization_detail_processor" "example" {
  processor_id = "mydependencyprocessor"
  configuration = {
    fields = [
      {
        name  = "enrichment value"
        value = "default"
      }
    ]
  }
  name = "my dependency processor"
  plugin_descriptor_ref = {
    id = "com.pingidentity.authorizationdetail.AuthorizationDetailProcessorImplForTestingOnly"
  }
}
`
}

// Minimal HCL with only required values set
func oauthAuthorizationDetailType_MinimalHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_authorization_detail_type" "example" {
  type_id = "%s"
  authorization_detail_processor_ref = {
    id = pingfederate_oauth_authorization_detail_processor.example.processor_id
  }
  type = "mytype"
}
`, dependencyAuthorizationDetailProcessorHCL(), oauthAuthorizationDetailTypeTypeId)
}

// Maximal HCL with all values set where possible
func oauthAuthorizationDetailType_CompleteHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_authorization_detail_type" "example" {
  type_id = "%s"
  active  = false
  authorization_detail_processor_ref = {
    id = pingfederate_oauth_authorization_detail_processor.example.processor_id
  }
  description = "This is a detail type"
  type        = "updatedtype"
}
`, dependencyAuthorizationDetailProcessorHCL(), oauthAuthorizationDetailTypeTypeId)
}

// Validate any computed values when applying minimal HCL
func oauthAuthorizationDetailType_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_authorization_detail_type.example", "id", oauthAuthorizationDetailTypeTypeId),
		resource.TestCheckResourceAttr("pingfederate_oauth_authorization_detail_type.example", "active", "true"),
	)
}

// Delete the resource
func oauthAuthorizationDetailType_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthAuthorizationDetailTypesAPI.DeleteAuthorizationDetailType(acctest.TestBasicAuthContext(), oauthAuthorizationDetailTypeTypeId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthAuthorizationDetailType_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthAuthorizationDetailTypesAPI.DeleteAuthorizationDetailType(acctest.TestBasicAuthContext(), oauthAuthorizationDetailTypeTypeId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_authorization_detail_type still exists after tests. Expected it to be destroyed")
	}
	return nil
}
