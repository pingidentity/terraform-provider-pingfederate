// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthopenidconnectpolicy_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

const openidConnectPolicyPolicyId = "openidConnectPolicyPolicyId"

func TestAccOpenidConnectPolicy_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: openidConnectPolicy_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: openidConnectPolicy_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					openidConnectPolicy_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOpenidConnectPolicy_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: openidConnectPolicy_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: openidConnectPolicy_MinimalHCL(),
				Check:  openidConnectPolicy_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  openidConnectPolicy_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: openidConnectPolicy_CompleteHCL(),
				Check:  openidConnectPolicy_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: openidConnectPolicy_MinimalHCL(),
				Check:  openidConnectPolicy_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: openidConnectPolicy_CompleteHCL(),
				Check:  openidConnectPolicy_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               openidConnectPolicy_CompleteHCL(),
				ResourceName:                         "pingfederate_openid_connect_policy.example",
				ImportStateId:                        openidConnectPolicyPolicyId,
				ImportStateVerifyIdentifierAttribute: "policy_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func openidConnectPolicy_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_access_token_manager" "example" {
  manager_id = "oidcJsonWebTokenExample"
  name       = "oidcJsonWebTokenExample"
  plugin_descriptor_ref = {
    id = "com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin"
  }
  configuration = {
    tables = [
      {
        name = "Symmetric Keys"
        rows = [
          {
            fields = [
              {
                name  = "Key ID"
                value = "keyidentifier"
              },
              {
                name  = "Encoding"
                value = "b64u"
              }
            ]
            sensitive_fields = [
              {
                name  = "Key"
                value = "e1oDxOiC3Jboz3um8hBVmW3JRZNo9z7C0DMm/oj2V1gclQRcgi2gKM2DBj9N05G4"
              },
            ]
          }
        ]
      },
      {
        name = "Certificates"
        rows = []
      }
    ]
    fields = [
      {
        name  = "JWE Algorithm"
        value = "dir"
      },
      {
        name  = "JWE Content Encryption Algorithm"
        value = "A192CBC-HS384"
      },
      {
        name  = "Active Symmetric Encryption Key ID"
        value = "keyidentifier"
      },
    ]
  }
  attribute_contract = {
    extended_attributes = [
      {
        name = "contract"
      },
      {
        name         = "another"
        multi_valued = false
      }
    ]
  }
}

resource "pingfederate_openid_connect_policy" "example" {
  policy_id = "%s"
  access_token_manager_ref = {
    id = pingfederate_oauth_access_token_manager.example.id
  }
  attribute_contract = {
  }
  attribute_mapping = {
    attribute_contract_fulfillment = {
      "sub" = {
        source = {
          type = "TOKEN"
        }
        value = "contract"
      }
    }
  }
  name = "myoidcpolicy"
}
data "pingfederate_openid_connect_policy" "example" {
  policy_id = pingfederate_openid_connect_policy.example.policy_id
}
`, openidConnectPolicyPolicyId)
}

// Maximal HCL with all values set where possible
func openidConnectPolicy_CompleteHCL() string {
	var versionedHcl string
	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedHcl += `
  return_id_token_on_token_exchange_grant = true
    `
	}

	return fmt.Sprintf(`
resource "pingfederate_oauth_server_settings" "example" {
  authorization_code_entropy = 30
  authorization_code_timeout = 60
  refresh_rolling_interval   = 2
  refresh_token_length       = 50
  scopes = [
    {
      name        = "email"
      description = "email scope"
      dynamic     = false
    }
  ]
}

resource "pingfederate_oauth_access_token_manager" "example" {
  manager_id = "oidcJsonWebTokenExample"
  name       = "oidcJsonWebTokenExample"
  plugin_descriptor_ref = {
    id = "com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin"
  }
  configuration = {
    tables = [
      {
        name = "Symmetric Keys"
        rows = [
          {
            fields = [
              {
                name  = "Key ID"
                value = "keyidentifier"
              },
              {
                name  = "Encoding"
                value = "b64u"
              }
            ]
            sensitive_fields = [
              {
                name  = "Key"
                value = "e1oDxOiC3Jboz3um8hBVmW3JRZNo9z7C0DMm/oj2V1gclQRcgi2gKM2DBj9N05G4"
              },
            ]
          }
        ]
      },
      {
        name = "Certificates"
        rows = []
      }
    ]
    fields = [
      {
        name  = "JWE Algorithm"
        value = "dir"
      },
      {
        name  = "JWE Content Encryption Algorithm"
        value = "A192CBC-HS384"
      },
      {
        name  = "Active Symmetric Encryption Key ID"
        value = "keyidentifier"
      },
    ]
  }
  attribute_contract = {
    extended_attributes = [
      {
        name = "contract"
      },
      {
        name         = "another"
        multi_valued = false
      }
    ]
  }
}

resource "pingfederate_openid_connect_policy" "example" {
  depends_on = [pingfederate_oauth_server_settings.example]
  policy_id  = "%s"
  access_token_manager_ref = {
    id = pingfederate_oauth_access_token_manager.example.id
  }
  attribute_contract = {
    extended_attributes = [
      {
        multi_valued = true
        name         = "extended"
      },
      {
        multi_valued = false
        name         = "another"
      }
    ]
  }
  attribute_mapping = {
    attribute_contract_fulfillment = {
      "sub" = {
        source = {
          type = "TOKEN"
        }
        value = "contract"
      }
      "extended" = {
        source = {
          type = "NO_MAPPING"
        }
      }
      "another" = {
        source = {
          type = "TEXT"
        }
        value = "example2"
      }
    }
    attribute_sources = [
      {
        jdbc_attribute_source = {
          attribute_contract_fulfillment = null
          column_names                   = ["GRANTEE"]
          data_store_ref = {
            id = "ProvisionerDS"
          }
          description = "JDBC"
          filter      = "subject"
          id          = "jdbcguy"
          schema      = "INFORMATION_SCHEMA"
          table       = "ADMINISTRABLE_ROLE_AUTHORIZATIONS"
        }
      },
    ]
    issuance_criteria = {
      conditional_criteria = [
        {
          attribute_name = "sub"
          condition      = "MULTIVALUE_CONTAINS_DN"
          source = {
            type = "MAPPED_ATTRIBUTES"
          }
          value = "cn=Example,dc=example,dc=com"
        },
      ]
      expression_criteria = null
    }
  }
  id_token_lifetime                = 7
  include_s_hash_in_id_token       = true
  include_sri_in_id_token          = true
  include_user_info_in_id_token    = true
  name                             = "myoidcpolicy"
  reissue_id_token_in_hybrid_flow  = true
  return_id_token_on_refresh_grant = true
  scope_attribute_mappings = {
    "email" = {
      values = ["extended"]
    }
  }
  include_x5t_in_id_token   = true
  id_token_typ_header_value = "Example"
  %s
}
data "pingfederate_openid_connect_policy" "example" {
  policy_id = pingfederate_openid_connect_policy.example.policy_id
}
`, openidConnectPolicyPolicyId, versionedHcl)
}

// Validate any computed values when applying minimal HCL
func openidConnectPolicy_CheckComputedValuesMinimal() resource.TestCheckFunc {
	var versionedChecks []resource.TestCheckFunc
	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "return_id_token_on_token_exchange_grant", "false"),
		)
	} else {
		versionedChecks = append(versionedChecks,
			resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "return_id_token_on_token_exchange_grant"),
		)
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.include_in_id_token"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.include_in_user_info"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.multi_valued", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.name", "sub"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.extended_attributes.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.attribute_contract_fulfillment.key.source.id"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.issuance_criteria.expression_criteria"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "id_token_lifetime", "5"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "id", openidConnectPolicyPolicyId),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "id_token_typ_header_value"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "include_s_hash_in_id_token", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "include_sri_in_id_token", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "include_user_info_in_id_token", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "reissue_id_token_in_hybrid_flow", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "return_id_token_on_refresh_grant", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "scope_attribute_mappings.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "include_x5t_in_id_token", "false"),
		resource.ComposeTestCheckFunc(versionedChecks...),
	)
}

// Validate any computed values when applying complete HCL
func openidConnectPolicy_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.include_in_id_token"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.include_in_user_info"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.multi_valued", "false"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.core_attributes.0.name", "sub"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.extended_attributes.0.include_in_id_token"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_contract.extended_attributes.0.include_in_user_info"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.attribute_contract_fulfillment.another.source.id"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.attribute_contract_fulfillment.extended.source.id"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.attribute_contract_fulfillment.extended.value", ""),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.attribute_contract_fulfillment.sub.source.id"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.issuance_criteria.conditional_criteria.0.error_result"),
		resource.TestCheckNoResourceAttr("pingfederate_openid_connect_policy.example", "attribute_mapping.issuance_criteria.conditional_criteria.0.source.id"),
		resource.TestCheckResourceAttr("pingfederate_openid_connect_policy.example", "id", openidConnectPolicyPolicyId),
	)
}

// Delete the resource
func openidConnectPolicy_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthOpenIdConnectAPI.DeleteOIDCPolicy(acctest.TestBasicAuthContext(), openidConnectPolicyPolicyId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func openidConnectPolicy_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthOpenIdConnectAPI.DeleteOIDCPolicy(acctest.TestBasicAuthContext(), openidConnectPolicyPolicyId).Execute()
	if err == nil {
		return fmt.Errorf("openid_connect_policy still exists after tests. Expected it to be destroyed")
	}
	return nil
}
