// Code generated by ping-terraform-plugin-framework-generator

package oauthidpadaptermappings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthIdpAdapterMappingMappingId = "IDFirst"

func TestAccOauthIdpAdapterMapping_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthIdpAdapterMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthIdpAdapterMapping_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthIdpAdapterMapping_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthIdpAdapterMapping_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthIdpAdapterMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthIdpAdapterMapping_MinimalHCL(),
				Check:  oauthIdpAdapterMapping_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthIdpAdapterMapping_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthIdpAdapterMapping_CompleteHCL(),
				Check:  oauthIdpAdapterMapping_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthIdpAdapterMapping_MinimalHCL(),
				Check:  oauthIdpAdapterMapping_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthIdpAdapterMapping_CompleteHCL(),
				Check:  oauthIdpAdapterMapping_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthIdpAdapterMapping_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_idp_adapter_mapping.example",
				ImportStateId:                        oauthIdpAdapterMappingMappingId,
				ImportStateVerifyIdentifierAttribute: "mapping_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthIdpAdapterMapping_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_idp_adapter_mapping" "example" {
  mapping_id = "%s"
  attribute_contract_fulfillment = {
    "USER_NAME" = {
      source = {
        type = "ADAPTER"
      }
      value = "subject"
    }
    "USER_KEY" = {
      source = {
        type = "ADAPTER"
      }
      value = "uid"
    }
  }
}
`, oauthIdpAdapterMappingMappingId)
}

// Maximal HCL with all values set where possible
func oauthIdpAdapterMapping_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_idp_adapter_mapping" "example" {
  mapping_id = "%s"
  attribute_contract_fulfillment = {
    "USER_NAME" = {
      source = {
        type = "ADAPTER"
      }
      value = "subject"
    }
    "USER_KEY" = {
      source = {
        type = "ADAPTER"
      }
      value = "uid"
    }
  }
  // attribute_sources
  %s
  // issuance_criteria
  %s
}
`, oauthIdpAdapterMappingMappingId,
		attributesources.Hcl(nil, attributesources.LdapClientStruct("(cn=Example)", "SUBTREE", *client.NewResourceLink("pingdirectory"))),
		issuancecriteria.Hcl(issuancecriteria.ConditionalCriteria()))
}

// Validate any computed values when applying minimal HCL
func oauthIdpAdapterMapping_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_idp_adapter_mapping.example", "idp_adapter_ref.id", oauthIdpAdapterMappingMappingId),
		resource.TestCheckResourceAttr("pingfederate_oauth_idp_adapter_mapping.example", "attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_idp_adapter_mapping.example", "issuance_criteria.conditional_criteria.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func oauthIdpAdapterMapping_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_idp_adapter_mapping.example", "idp_adapter_ref.id", oauthIdpAdapterMappingMappingId),
	)
}

// Delete the resource
func oauthIdpAdapterMapping_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthIdpAdapterMappingsAPI.DeleteIdpAdapterMapping(acctest.TestBasicAuthContext(), oauthIdpAdapterMappingMappingId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthIdpAdapterMapping_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthIdpAdapterMappingsAPI.DeleteIdpAdapterMapping(acctest.TestBasicAuthContext(), oauthIdpAdapterMappingMappingId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_idp_adapter_mapping still exists after tests. Expected it to be destroyed")
	}
	return nil
}
