// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthissuer_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthIssuerIssuerId = "oauthIssuerIssuerId"

func TestAccOauthIssuer_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthIssuer_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthIssuer_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthIssuer_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthIssuer_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthIssuer_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthIssuer_MinimalHCL(),
				Check:  oauthIssuer_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthIssuer_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthIssuer_CompleteHCL(),
				Check:  oauthIssuer_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthIssuer_MinimalHCL(),
				Check:  oauthIssuer_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthIssuer_CompleteHCL(),
				Check:  oauthIssuer_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthIssuer_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_issuer.example",
				ImportStateId:                        oauthIssuerIssuerId,
				ImportStateVerifyIdentifierAttribute: "issuer_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthIssuer_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_issuer" "example" {
  issuer_id = "%s"
  host      = "myhost"
  name      = "myname"
}
`, oauthIssuerIssuerId)
}

// Maximal HCL with all values set where possible
func oauthIssuer_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_issuer" "example" {
  issuer_id   = "%s"
  description = "mydesc"
  host        = "myhostupdated"
  name        = "mynameupdated"
  path        = "/mypath"
}
`, oauthIssuerIssuerId)
}

// Validate any computed values when applying minimal HCL
func oauthIssuer_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_oauth_issuer.example", "description"),
		resource.TestCheckResourceAttr("pingfederate_oauth_issuer.example", "id", oauthIssuerIssuerId),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_issuer.example", "path"),
	)
}

// Validate any computed values when applying complete HCL
func oauthIssuer_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_issuer.example", "id", oauthIssuerIssuerId),
	)
}

// Delete the resource
func oauthIssuer_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthIssuersAPI.DeleteOauthIssuer(acctest.TestBasicAuthContext(), oauthIssuerIssuerId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthIssuer_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthIssuersAPI.DeleteOauthIssuer(acctest.TestBasicAuthContext(), oauthIssuerIssuerId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_issuer still exists after tests. Expected it to be destroyed")
	}
	return nil
}
