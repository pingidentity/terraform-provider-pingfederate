// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthauthserversettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccOauthServerSettings_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthServerSettings_MinimalHCL(),
				Check:  oauthServerSettings_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model
				Config: oauthServerSettings_CompleteHCL(),
				Check:  oauthServerSettings_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthServerSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_server_settings.example",
				ImportStateVerifyIdentifierAttribute: "activation_code_check_mode",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: oauthServerSettings_MinimalHCL(),
				Check:  oauthServerSettings_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthServerSettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_server_settings" "example" {
  authorization_code_entropy = 30
  authorization_code_timeout = 60
  refresh_rolling_interval   = 2
  refresh_token_length       = 50
}
`)
}

// Maximal HCL with all values set where possible
func oauthServerSettings_CompleteHCL() string {
	versionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1130) {
		versionedHcl += `
dpop_proof_require_nonce = true
dpop_proof_lifetime_seconds = 60
dpop_proof_enforce_replay_prevention = false
		`
	}

	if acctest.VersionAtLeast(version.PingFederate1200) {
		versionedHcl += `
bypass_authorization_for_approved_consents = true
consent_lifetime_days = 5
		`
	}

	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedHcl += `
require_offline_access_scope_to_issue_refresh_tokens = true
offline_access_require_consent_prompt = true
refresh_rolling_interval_time_unit = "MINUTES"
enable_cookieless_user_authorization_authentication_api = true
		`
	}

	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedHcl += `
return_id_token_on_open_id_with_device_authz_grant = true
		  `
	}
	return fmt.Sprintf(`
resource "pingfederate_oauth_access_token_manager" "example" {
  access_control_settings = {
    allowed_clients = [
    ]
    restrict_clients = false
  }
  attribute_contract = {
    default_subject_attribute = "OrgName"
    extended_attributes = [
      {
        multi_valued = false
        name         = "OrgName"
      },
      {
        multi_valued = false
        name         = "Username"
      },
    ]
  }
  configuration = {
    fields = [
      {
        name  = "Access Grant GUID Claim Name"
        value = "agid"
      },
      {
        name  = "Active Signing Certificate Key ID"
        value = "k1"
      },
      {
        name  = "Authorization Details Claim Name"
        value = "authorization_details"
      },
      {
        name  = "Client ID Claim Name"
        value = "client_id_name"
      },
      {
        name  = "Default JWKS URL Cache Duration"
        value = "720"
      },
      {
        name  = "Enable Token Revocation"
        value = "false"
      },
      {
        name  = "Expand Scope Groups"
        value = "false"
      },
      {
        name  = "Include Issued At Claim"
        value = "false"
      },
      {
        name  = "Include JWE Key ID Header Parameter"
        value = "true"
      },
      {
        name  = "Include JWE X.509 Thumbprint Header Parameter"
        value = "false"
      },
      {
        name  = "Include Key ID Header Parameter"
        value = "true"
      },
      {
        name  = "Include X.509 Thumbprint Header Parameter"
        value = "false"
      },
      {
        name  = "JWKS Endpoint Cache Duration"
        value = "720"
      },
      {
        name  = "JWS Algorithm"
        value = "RS256"
      },
      {
        name  = "JWT ID Claim Length"
        value = "22"
      },
      {
        name  = "Publish Key ID X.509 URL"
        value = "false"
      },
      {
        name  = "Publish Thumbprint X.509 URL"
        value = "false"
      },
      {
        name  = "Scope Claim Name"
        value = "scope"
      },
      {
        name  = "Space Delimit Scope Values"
        value = "false"
      },
      {
        name  = "Token Lifetime"
        value = "120"
      },
      {
        name  = "Type Header Value"
        value = ""
      },
      {
        name  = "Use Centralized Signing Key"
        value = "false"
      },
    ]
    tables = [
      {
        name = "Symmetric Keys"
        rows = null
      },
      {
        name = "Certificates"
        rows = [
          {
            default_row = false
            fields = [
              {
                name  = "Certificate"
                value = "419x9yg43rlawqwq9v6az997k"
              },
              {
                name  = "Key ID"
                value = "k1"
              },
            ]
          },
        ]
      },
    ]
  }
  manager_id = "testatm"
  name       = "testatm"
  plugin_descriptor_ref = {
    id = "com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin"
  }
  selection_settings = {
    resource_uris = []
  }
  session_validation_settings = {
    check_session_revocation_status = false
    check_valid_authn_session       = false
    include_session_id              = false
    update_authn_session_activity   = false
  }
}

resource "pingfederate_password_credential_validator" "example" {
  validator_id = "oauthServerSettingsValidator"
  name         = "oauthServerSettingsValidator"
  plugin_descriptor_ref = {
    id = "org.sourceid.saml20.domain.SimpleUsernamePasswordCredentialValidator"
  }
  configuration = {
    tables = [
      {
        name = "Users"
        rows = [
          {
            fields = [
              {
                name  = "Username"
                value = "example"
              },
              {
                name  = "Relax Password Requirements"
                value = "false"
              }
            ]
            sensitive_fields = [
              {
                name  = "Password"
                value = "2FederateM0re"
              },
              {
                name  = "Confirm Password"
                value = "2FederateM0re"
              },
            ]
            default_row = false
          },
        ],
      }
    ]
  }
  attribute_contract = {}
}

resource "pingfederate_oauth_server_settings" "example" {
  activation_code_check_mode = "BEFORE_AUTHENTICATION"
  admin_web_service_pcv_ref = {
    id = pingfederate_password_credential_validator.example.id
  }
  allow_unidentified_client_extension_grants = true
  allow_unidentified_client_ro_creds         = true
  allowed_origins                            = ["https://example.com:*"]
  atm_id_for_oauth_grant_management          = pingfederate_oauth_access_token_manager.example.id
  authorization_code_entropy                 = 31
  authorization_code_timeout                 = 61
  bypass_activation_code_confirmation        = true
  bypass_authorization_for_approved_grants   = true
  client_secret_retention_period             = 60
  default_scope_description                  = "example scope desc"
  device_polling_interval                    = 3
  disallow_plain_pkce                        = true
  exclusive_scopes = [
    {
      name        = "exampleexclusivescope",
      description = "example scope",
      dynamic     = false
    }
  ]
  exclusive_scope_groups = [
    {
      name        = "exampleexclusivescopegroup",
      description = "example exclusive scope group"
      scopes      = ["exampleexclusivescope"]
    }
  ]
  include_issuer_in_authorization_response         = true
  jwt_secured_authorization_response_mode_lifetime = 60
  par_reference_length                             = 24
  par_reference_timeout                            = 60
  par_status                                       = "ENABLED"
  pending_authorization_timeout                    = 650
  persistent_grant_contract = {
    extended_attributes = [
      {
        name = "example_extended_attribute"
      }
    ]
  }
  persistent_grant_idle_timeout           = 60
  persistent_grant_idle_timeout_time_unit = "MINUTES"
  persistent_grant_lifetime               = 100
  persistent_grant_lifetime_unit          = "MINUTES"
  persistent_grant_reuse_grant_types      = ["AUTHORIZATION_CODE"]
  refresh_rolling_interval                = 3
  refresh_token_length                    = 51
  refresh_token_rolling_grace_period      = 1
  registered_authorization_path           = "/example"
  roll_refresh_token_values               = true
  scope_for_oauth_grant_management        = "examplescope"
  scopes = [
    {
      name        = "examplescope",
      description = "example scope",
      dynamic     = false
    }
  ]
  scope_groups = [
    {
      name        = "examplescopegroup",
      description = "example scope group"
      scopes      = ["examplescope"]
    }
  ]
  token_endpoint_base_url                 = "https://example.com"
  track_user_sessions_for_logout          = true
  user_authorization_consent_page_setting = "INTERNAL"
  user_authorization_url                  = "https://example.com"

  %s

  # Ensures this resource will be updated before deleting the dependencies
  lifecycle {
    create_before_destroy = true
  }
}
`, versionedHcl)
}

func checkPf121ComputedAttrs() resource.TestCheckFunc {
	versionedChecks := []resource.TestCheckFunc{}
	if acctest.VersionAtLeast(version.PingFederate1130) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "dpop_proof_require_nonce", "false"),
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "dpop_proof_lifetime_seconds", "120"),
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "dpop_proof_enforce_replay_prevention", "false"),
		)
	} else {
		versionedChecks = append(versionedChecks,
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "dpop_proof_require_nonce"),
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "dpop_proof_lifetime_seconds"),
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "dpop_proof_enforce_replay_prevention"),
		)
	}
	if acctest.VersionAtLeast(version.PingFederate1200) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "bypass_authorization_for_approved_consents", "false"),
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "consent_lifetime_days", "-1"),
		)
	} else {
		versionedChecks = append(versionedChecks,
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "bypass_authorization_for_approved_consents"),
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "consent_lifetime_days"),
		)
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "require_offline_access_scope_to_issue_refresh_tokens", "false"),
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "offline_access_require_consent_prompt", "false"),
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "refresh_rolling_interval_time_unit", "HOURS"),
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "enable_cookieless_user_authorization_authentication_api", "false"),
		)
	} else {
		versionedChecks = append(versionedChecks,
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "require_offline_access_scope_to_issue_refresh_tokens"),
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "offline_access_require_consent_prompt"),
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "refresh_rolling_interval_time_unit"),
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "enable_cookieless_user_authorization_authentication_api"),
		)
	}
	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedChecks = append(versionedChecks,
			resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "return_id_token_on_open_id_with_device_authz_grant", "false"),
		)
	} else {
		versionedChecks = append(versionedChecks,
			resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "return_id_token_on_open_id_with_device_authz_grant"),
		)
	}
	return resource.ComposeTestCheckFunc(versionedChecks...)
}

// Validate any computed values when applying minimal HCL
func oauthServerSettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "activation_code_check_mode", "AFTER_AUTHENTICATION"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "admin_web_service_pcv_ref"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "allow_unidentified_client_extension_grants", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "allow_unidentified_client_ro_creds", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "allowed_origins.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "approved_authorization_detail_attribute"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "approved_scopes_attribute"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "atm_id_for_oauth_grant_management", ""),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "bypass_activation_code_confirmation", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "bypass_authorization_for_approved_grants", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "client_secret_retention_period", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "default_scope_description", ""),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "device_polling_interval", "5"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "disallow_plain_pkce", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "exclusive_scope_groups.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "exclusive_scopes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "include_issuer_in_authorization_response", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "jwt_secured_authorization_response_mode_lifetime", "600"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "par_reference_length", "24"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "par_reference_timeout", "60"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "par_status", "ENABLED"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "pending_authorization_timeout", "600"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_contract.core_attributes.#", "2"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_contract.extended_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_idle_timeout", "30"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_idle_timeout_time_unit", "DAYS"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_lifetime", "-1"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_lifetime_unit", "DAYS"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_reuse_grant_types.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "refresh_token_rolling_grace_period", "60"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "registered_authorization_path", ""),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "roll_refresh_token_values", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "scope_for_oauth_grant_management", ""),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "scope_groups.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "scopes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "token_endpoint_base_url", ""),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "track_user_sessions_for_logout", "false"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "user_authorization_consent_adapter"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "user_authorization_consent_page_setting", "INTERNAL"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "user_authorization_url", ""),
		checkPf121ComputedAttrs(),
	)
}

// Validate any computed values when applying complete HCL
func oauthServerSettings_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "approved_authorization_detail_attribute"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "approved_scopes_attribute"),
		resource.TestCheckResourceAttr("pingfederate_oauth_server_settings.example", "persistent_grant_contract.core_attributes.#", "2"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_server_settings.example", "user_authorization_consent_adapter"),
	)
}
