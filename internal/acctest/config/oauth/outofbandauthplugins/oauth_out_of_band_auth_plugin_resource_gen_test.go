// Code generated by ping-terraform-plugin-framework-generator

package oauthoutofbandauthplugins_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthOutOfBandAuthPluginPluginId = "oauthOutOfBandAuthPluginPluginId"

var pingOneConnection, pingOneEnvironment, pingOneApplication string

func TestAccOauthOutOfBandAuthPlugin_RemovalDrift(t *testing.T) {
	pingOneConnection = os.Getenv("PF_TF_P1_CONNECTION_ID")
	pingOneEnvironment = os.Getenv("PF_TF_P1_CONNECTION_ENV_ID")
	pingOneApplication = os.Getenv("PF_TF_P1_EXAMPLE_OAUTH_APP_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.ConfigurationPreCheck(t)
			if pingOneConnection == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ID must be set for the TestAccOauthOutOfBandAuthPlugin_RemovalDrift acceptance test")
			}
			if pingOneEnvironment == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ENV_ID must be set for the TestAccOauthOutOfBandAuthPlugin_RemovalDrift acceptance test")
			}
			if pingOneApplication == "" {
				t.Fatal("PF_TF_P1_EXAMPLE_OAUTH_APP_ID must be set for the TestAccOauthOutOfBandAuthPlugin_RemovalDrift acceptance test")
			}
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthOutOfBandAuthPlugin_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthOutOfBandAuthPlugin_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthOutOfBandAuthPlugin_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthOutOfBandAuthPlugin_MinimalMaximal(t *testing.T) {
	pingOneConnection = os.Getenv("PF_TF_P1_CONNECTION_ID")
	pingOneEnvironment = os.Getenv("PF_TF_P1_CONNECTION_ENV_ID")
	pingOneApplication = os.Getenv("PF_TF_P1_EXAMPLE_OAUTH_APP_ID")

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.ConfigurationPreCheck(t)
			if pingOneConnection == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ID must be set for the TestAccOauthOutOfBandAuthPlugin_MinimalMaximal acceptance test")
			}
			if pingOneEnvironment == "" {
				t.Fatal("PF_TF_P1_CONNECTION_ENV_ID must be set for the TestAccOauthOutOfBandAuthPlugin_MinimalMaximal acceptance test")
			}
			if pingOneApplication == "" {
				t.Fatal("PF_TF_P1_EXAMPLE_OAUTH_APP_ID must be set for the TestAccOauthOutOfBandAuthPlugin_MinimalMaximal acceptance test")
			}
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthOutOfBandAuthPlugin_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthOutOfBandAuthPlugin_MinimalHCL(),
				Check:  oauthOutOfBandAuthPlugin_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthOutOfBandAuthPlugin_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthOutOfBandAuthPlugin_CompleteHCL(),
				Check:  oauthOutOfBandAuthPlugin_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthOutOfBandAuthPlugin_MinimalHCL(),
				Check:  oauthOutOfBandAuthPlugin_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthOutOfBandAuthPlugin_CompleteHCL(),
				Check:  oauthOutOfBandAuthPlugin_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthOutOfBandAuthPlugin_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_out_of_band_auth_plugin.example",
				ImportStateId:                        oauthOutOfBandAuthPluginPluginId,
				ImportStateVerifyIdentifierAttribute: "plugin_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthOutOfBandAuthPlugin_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_out_of_band_auth_plugin" "example" {
  plugin_id = "%s"
  configuration = {
    tables = [
      {
        name = "PingOne Template Variables"
        rows = []
      }
    ]
    fields = [
      {
        name  = "PingOne Environment"
        value = "%s|%s"
      },
      {
        name  = "Application"
        value = "%s"
      },
      {
        name  = "PingOne Authentication Policy"
        value = "Standalone_MFA"
      },
      {
        name  = "Test Username"
        value = "user.0"
      },
      {
        name  = "PingOne Template Name"
        value = "transaction"
      },
      {
        name  = "PingOne Template Variant"
        value = ""
      },
      {
        name  = "Client Context"
        value = "Example"
      },
      {
        name  = "Messages Files"
        value = "pingone-mfa-messages"
      },
      {
        name  = "API Request Timeout"
        value = "5000"
      },
      {
        name  = "Proxy Settings"
        value = "System Defaults"
      }
    ]
  }
  name = "Facile CIBA"
  plugin_descriptor_ref = {
    id = "com.pingidentity.oobauth.pingone.mfa.PingOneMfaCibaAuthenticator"
  }
}
`, oauthOutOfBandAuthPluginPluginId, pingOneConnection, pingOneEnvironment, pingOneApplication)
}

// Maximal HCL with all values set where possible
func oauthOutOfBandAuthPlugin_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_out_of_band_auth_plugin" "example" {
  plugin_id = "%s"
  configuration = {
    tables = [
      {
        name = "PingOne Template Variables"
        rows = []
      }
    ]
    fields = [
      {
        name  = "PingOne Environment"
        value = "%s|%s"
      },
      {
        name  = "Application"
        value = "%s"
      },
      {
        name  = "PingOne Authentication Policy"
        value = "Standalone_MFA"
      },
      {
        name  = "Test Username"
        value = "user.1"
      },
      {
        name  = "PingOne Template Name"
        value = "transaction"
      },
      {
        name  = "PingOne Template Variant"
        value = ""
      },
      {
        name  = "Client Context"
        value = "Example"
      },
      {
        name  = "Messages Files"
        value = "pingone-mfa-messages"
      },
      {
        name  = "API Request Timeout"
        value = "6000"
      },
      {
        name  = "Proxy Settings"
        value = "System Defaults"
      },
      {
        name  = "Custom Proxy Host"
        value = ""
      },
      {
        name  = "Custom Proxy Port"
        value = ""
      }
    ]
  }
  name = "Facile CIBA Updated"
  plugin_descriptor_ref = {
    id = "com.pingidentity.oobauth.pingone.mfa.PingOneMfaCibaAuthenticator"
  }
  attribute_contract = {
    extended_attributes = [
      {
        name = "extendedAttr"
      }
    ]
  }
}
`, oauthOutOfBandAuthPluginPluginId, pingOneConnection, pingOneEnvironment, pingOneApplication)
}

// Validate any computed values when applying minimal HCL
func oauthOutOfBandAuthPlugin_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "id", oauthOutOfBandAuthPluginPluginId),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.fields_all.#", "12"),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.tables_all.#", "1"),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.fields_all.*", map[string]string{
			"name":  "Custom Proxy Host",
			"value": "",
		}),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.fields_all.*", map[string]string{
			"name":  "Custom Proxy Port",
			"value": "",
		}),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.tables_all.*", map[string]string{
			"name": "PingOne Template Variables",
		}),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "attribute_contract.core_attributes.0.name", "subject"),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "attribute_contract.extended_attributes.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func oauthOutOfBandAuthPlugin_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "id", oauthOutOfBandAuthPluginPluginId),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.fields_all.#", "12"),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.tables_all.#", "1"),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.fields_all.*", map[string]string{
			"name":  "API Request Timeout",
			"value": "6000",
		}),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.fields_all.*", map[string]string{
			"name":  "Test Username",
			"value": "user.1",
		}),
		resource.TestCheckTypeSetElemNestedAttrs("pingfederate_oauth_out_of_band_auth_plugin.example", "configuration.tables_all.*", map[string]string{
			"name": "PingOne Template Variables",
		}),
		resource.TestCheckResourceAttr("pingfederate_oauth_out_of_band_auth_plugin.example", "attribute_contract.core_attributes.0.name", "subject"),
	)
}

// Delete the resource
func oauthOutOfBandAuthPlugin_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthOutOfBandAuthPluginsAPI.DeleteOOBAuthenticator(acctest.TestBasicAuthContext(), oauthOutOfBandAuthPluginPluginId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthOutOfBandAuthPlugin_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthOutOfBandAuthPluginsAPI.DeleteOOBAuthenticator(acctest.TestBasicAuthContext(), oauthOutOfBandAuthPluginPluginId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_out_of_band_auth_plugin still exists after tests. Expected it to be destroyed")
	}
	return nil
}
