// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthresourceownercredentialsmappings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const oauthResourceOwnerCredentialsMappingMappingId = "testPCV"

func TestAccOauthResourceOwnerCredentialsMapping_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthResourceOwnerCredentialsMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthResourceOwnerCredentialsMapping_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthResourceOwnerCredentialsMapping_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthResourceOwnerCredentialsMapping_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthResourceOwnerCredentialsMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthResourceOwnerCredentialsMapping_MinimalHCL(),
				Check:  oauthResourceOwnerCredentialsMapping_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthResourceOwnerCredentialsMapping_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthResourceOwnerCredentialsMapping_CompleteHCL(),
				Check:  oauthResourceOwnerCredentialsMapping_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthResourceOwnerCredentialsMapping_MinimalHCL(),
				Check:  oauthResourceOwnerCredentialsMapping_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthResourceOwnerCredentialsMapping_CompleteHCL(),
				Check:  oauthResourceOwnerCredentialsMapping_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthResourceOwnerCredentialsMapping_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_resource_owner_credentials_mapping.example",
				ImportStateId:                        oauthResourceOwnerCredentialsMappingMappingId,
				ImportStateVerifyIdentifierAttribute: "mapping_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

func passwordCredentialValidatorHcl() string {
	return fmt.Sprintf(`
resource "pingfederate_password_credential_validator" "pcv" {
  validator_id = "%s"
  name         = "pcv"
  plugin_descriptor_ref = {
    id = "org.sourceid.saml20.domain.SimpleUsernamePasswordCredentialValidator"
  }
	attribute_contract = {}
  configuration = {
    tables = [
      {
        name = "Users"
        rows = [
          {
            fields = [
              {
                name  = "Username"
                value = "example"
              },
              {
                name  = "Password"
                value = "2FederateM0re"
              },
              {
                name  = "Confirm Password"
                value = "2FederateM0re"
              },
              {
                name  = "Relax Password Requirements"
                value = "true"
              }
            ]
            default_row = false
          },
        ]
      }
    ]
  }
}
  `, oauthResourceOwnerCredentialsMappingMappingId)
}

// Minimal HCL with only required values set
func oauthResourceOwnerCredentialsMapping_MinimalHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_resource_owner_credentials_mapping" "example" {
  mapping_id = pingfederate_password_credential_validator.pcv.validator_id
  attribute_contract_fulfillment = {
    "USER_KEY" = {
      source = {
        type = "CONTEXT"
      }
      value = "ClientId"
    }
  }
}
`, passwordCredentialValidatorHcl())
}

// Maximal HCL with all values set where possible
func oauthResourceOwnerCredentialsMapping_CompleteHCL() string {
	return fmt.Sprintf(`
%s
resource "pingfederate_oauth_resource_owner_credentials_mapping" "example" {
  mapping_id = pingfederate_password_credential_validator.pcv.validator_id
  attribute_contract_fulfillment = {
    "USER_KEY" = {
      source = {
        type = "CONTEXT"
      }
      value = "ClientId"
    }
  }
  // attribute_sources
  %s
  // issuance_criteria
  %s
}
`, passwordCredentialValidatorHcl(),
		attributesources.Hcl(nil, attributesources.LdapClientStruct("(cn=Example)", "SUBTREE", *client.NewResourceLink("pingdirectory"))),
		issuancecriteria.Hcl(issuancecriteria.ConditionalCriteria()))
}

// Validate any computed values when applying minimal HCL
func oauthResourceOwnerCredentialsMapping_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_resource_owner_credentials_mapping.example", "id", oauthResourceOwnerCredentialsMappingMappingId),
		resource.TestCheckResourceAttr("pingfederate_oauth_resource_owner_credentials_mapping.example", "password_validator_ref.id", oauthResourceOwnerCredentialsMappingMappingId),
		resource.TestCheckResourceAttr("pingfederate_oauth_resource_owner_credentials_mapping.example", "attribute_sources.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_resource_owner_credentials_mapping.example", "issuance_criteria.conditional_criteria.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func oauthResourceOwnerCredentialsMapping_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_resource_owner_credentials_mapping.example", "id", oauthResourceOwnerCredentialsMappingMappingId),
		resource.TestCheckResourceAttr("pingfederate_oauth_resource_owner_credentials_mapping.example", "password_validator_ref.id", oauthResourceOwnerCredentialsMappingMappingId),
	)
}

// Delete the resource
func oauthResourceOwnerCredentialsMapping_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthResourceOwnerCredentialsMappingsAPI.DeleteResourceOwnerCredentialsMapping(acctest.TestBasicAuthContext(), oauthResourceOwnerCredentialsMappingMappingId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthResourceOwnerCredentialsMapping_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthResourceOwnerCredentialsMappingsAPI.DeleteResourceOwnerCredentialsMapping(acctest.TestBasicAuthContext(), oauthResourceOwnerCredentialsMappingMappingId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_resource_owner_credentials_mapping still exists after tests. Expected it to be destroyed")
	}
	return nil
}
