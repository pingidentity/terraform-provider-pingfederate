// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthresourceownercredentialsmappings

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributecontractfulfillment"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &oauthResourceOwnerCredentialsMappingResource{}
	_ resource.ResourceWithConfigure   = &oauthResourceOwnerCredentialsMappingResource{}
	_ resource.ResourceWithImportState = &oauthResourceOwnerCredentialsMappingResource{}
)

func OauthResourceOwnerCredentialsMappingResource() resource.Resource {
	return &oauthResourceOwnerCredentialsMappingResource{}
}

type oauthResourceOwnerCredentialsMappingResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *oauthResourceOwnerCredentialsMappingResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oauth_resource_owner_credentials_mapping"
}

func (r *oauthResourceOwnerCredentialsMappingResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type oauthResourceOwnerCredentialsMappingResourceModel struct {
	AttributeContractFulfillment types.Map    `tfsdk:"attribute_contract_fulfillment"`
	AttributeSources             types.Set    `tfsdk:"attribute_sources"`
	IssuanceCriteria             types.Object `tfsdk:"issuance_criteria"`
	MappingId                    types.String `tfsdk:"mapping_id"`
	PasswordValidatorRef         types.Object `tfsdk:"password_validator_ref"`
}

func (r *oauthResourceOwnerCredentialsMappingResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage an oauth resource owner credentials mapping.",
		Attributes: map[string]schema.Attribute{
			"attribute_contract_fulfillment": attributecontractfulfillment.ToSchema(true, false, false),
			"attribute_sources":              attributesources.ToSchema(0, false),
			"issuance_criteria":              issuancecriteria.ToSchema(),
			"mapping_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the Resource Owner Credentials Mapping.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"password_validator_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
						Validators: []validator.String{
							stringvalidator.LengthAtLeast(1),
						},
					},
				},
				Optional:    true,
				Description: "A reference to a resource.",
			},
		},
	}
}

func (model *oauthResourceOwnerCredentialsMappingResourceModel) buildClientStruct() (*client.ResourceOwnerCredentialsMapping, diag.Diagnostics) {
	result := &client.ResourceOwnerCredentialsMapping{}
	// attribute_contract_fulfillment
	result.AttributeContractFulfillment = attributecontractfulfillment.ClientStruct(model.AttributeContractFulfillment)

	// attribute_sources
	result.AttributeSources = attributesources.ClientStruct(model.AttributeSources)

	// issuance_criteria
	result.IssuanceCriteria = issuancecriteria.ClientStruct(model.IssuanceCriteria)

	// mapping_id
	result.Id = model.MappingId.ValueString()
	// password_validator_ref
	if !model.PasswordValidatorRef.IsNull() && !model.PasswordValidatorRef.IsUnknown() {
		passwordValidatorRefValue := &client.ResourceLink{}
		passwordValidatorRefAttrs := model.PasswordValidatorRef.Attributes()
		passwordValidatorRefValue.Id = passwordValidatorRefAttrs["id"].(types.String).ValueString()
		result.PasswordValidatorRef = passwordValidatorRefValue
	}

	return result, nil
}

func (state *oauthResourceOwnerCredentialsMappingResourceModel) readClientResponse(response *client.ResourceOwnerCredentialsMapping) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// attribute_contract_fulfillment
	attributeContractFulfillmentValue, diags := attributecontractfulfillment.ToState(context.Background(), &response.AttributeContractFulfillment)
	respDiags.Append(diags...)
	state.AttributeContractFulfillment = attributeContractFulfillmentValue
	// attribute_sources
	attributeSourcesValue, diags := attributesources.ToState(context.Background(), response.AttributeSources)
	respDiags.Append(diags...)
	state.AttributeSources = attributeSourcesValue
	// issuance_criteria
	issuanceCriteriaValue, diags := issuancecriteria.ToState(context.Background(), response.IssuanceCriteria)
	respDiags.Append(diags...)
	state.IssuanceCriteria = issuanceCriteriaValue
	// password_validator_ref
	passwordValidatorRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var passwordValidatorRefValue types.Object
	if response.PasswordValidatorRef == nil {
		passwordValidatorRefValue = types.ObjectNull(passwordValidatorRefAttrTypes)
	} else {
		passwordValidatorRefValue, diags = types.ObjectValue(passwordValidatorRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.PasswordValidatorRef.Id),
		})
		respDiags.Append(diags...)
	}
	state.PasswordValidatorRef = passwordValidatorRefValue
	return respDiags
}

func (r *oauthResourceOwnerCredentialsMappingResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data oauthResourceOwnerCredentialsMappingResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.OauthResourceOwnerCredentialsMappingsAPI.CreateResourceOwnerCredentialsMapping(config.AuthContext(ctx, r.providerConfig))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthResourceOwnerCredentialsMappingsAPI.CreateResourceOwnerCredentialsMappingExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the oauthResourceOwnerCredentialsMapping", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthResourceOwnerCredentialsMappingResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data oauthResourceOwnerCredentialsMappingResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.OauthResourceOwnerCredentialsMappingsAPI.GetResourceOwnerCredentialsMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "oauthResourceOwnerCredentialsMapping", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the oauthResourceOwnerCredentialsMapping", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthResourceOwnerCredentialsMappingResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data oauthResourceOwnerCredentialsMappingResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.OauthResourceOwnerCredentialsMappingsAPI.UpdateResourceOwnerCredentialsMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthResourceOwnerCredentialsMappingsAPI.UpdateResourceOwnerCredentialsMappingExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the oauthResourceOwnerCredentialsMapping", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthResourceOwnerCredentialsMappingResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data oauthResourceOwnerCredentialsMappingResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.OauthResourceOwnerCredentialsMappingsAPI.DeleteResourceOwnerCredentialsMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the oauthResourceOwnerCredentialsMapping", err, httpResp)
	}
}

func (r *oauthResourceOwnerCredentialsMappingResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to mapping_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("mapping_id"), req, resp)
}
