// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthaccesstokenmanager_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

const atmId = "oauthATMId"

func TestAccOauthAccessTokenManager_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAccessTokenManager_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAccessTokenManager_MinimalInternallyManagedHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthAccessTokenManager_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthAccessTokenManager_MinimalMaximalInternallyManaged(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAccessTokenManager_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAccessTokenManager_MinimalInternallyManagedHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesMinimalInternallyManaged(),
			},
			{
				// Delete the minimal model
				Config:  oauthAccessTokenManager_MinimalInternallyManagedHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthAccessTokenManager_CompleteInternallyManagedHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesCompleteInternallyManaged(),
			},
			{
				// Back to minimal model
				Config: oauthAccessTokenManager_MinimalInternallyManagedHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesMinimalInternallyManaged(),
			},
			{
				// Back to complete model
				Config: oauthAccessTokenManager_CompleteInternallyManagedHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesCompleteInternallyManaged(),
			},
			{
				// Test importing the resource
				Config:                               oauthAccessTokenManager_CompleteInternallyManagedHCL(),
				ResourceName:                         "pingfederate_oauth_access_token_manager.example",
				ImportStateId:                        atmId,
				ImportStateVerifyIdentifierAttribute: "manager_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				ImportStateVerifyIgnore: []string{
					"configuration.tables",
					"configuration.fields",
				},
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthAccessTokenManager_MinimalInternallyManagedHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_access_token_manager" "example" {
  manager_id = "%s"
  configuration = {
  }
  name = "myATM"
  plugin_descriptor_ref = {
    id = "org.sourceid.oauth20.token.plugin.impl.ReferenceBearerAccessTokenManagementPlugin"
  }
  attribute_contract = {
    coreAttributes = []
    extended_attributes = [
      {
        name = "extended_contract"
      }
    ]
  }
}
`, atmId)
}

// Maximal HCL with all values set where possible
func oauthAccessTokenManager_CompleteInternallyManagedHCL() string {
	versionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedHcl += `
token_endpoint_attribute_contract = {
attributes = [
  {
	mapped_scopes = ["email"]
	multi_valued  = false
	name          = "normal"
  },
  {
	mapped_scopes = []
	multi_valued  = true
	name          = "another"
  },
]
}
`
	}
	return fmt.Sprintf(`
resource "pingfederate_oauth_access_token_manager" "example" {
  manager_id = "%s"
  access_control_settings = {
    allowed_clients  = []
    restrict_clients = false
  }
  attribute_contract = {
    default_subject_attribute = "another"
    extended_attributes = [
      {
        name         = "extended_contract"
        multi_valued = true
      },
      {
        name         = "another"
        multi_valued = false
      }
    ]
  }
  configuration = {
    fields = [
      {
        name  = "Expand Scope Groups"
        value = "false"
      },
      {
        name  = "Lifetime Extension Policy"
        value = "NONE"
      },
      {
        name  = "Lifetime Extension Threshold Percentage"
        value = "30"
      },
      {
        name  = "Maximum Token Lifetime"
        value = ""
      },
      {
        name  = "Mode for Synchronous RPC"
        value = "3"
      },
      {
        name  = "RPC Timeout"
        value = "500"
      },
      {
        name  = "Token Length"
        value = "28"
      },
      {
        name  = "Token Lifetime"
        value = "120"
      }
    ]
    tables = []
  }
  name = "myATMUpdated"
  plugin_descriptor_ref = {
    id = "org.sourceid.oauth20.token.plugin.impl.ReferenceBearerAccessTokenManagementPlugin"
  }
  selection_settings = {
    resource_uris = ["https://example.com"]
  }
  session_validation_settings = {
    check_session_revocation_status = true
    check_valid_authn_session       = true
    include_session_id              = true
    update_authn_session_activity   = true
  }
  %s
}
data "pingfederate_oauth_access_token_manager" "example" {
  manager_id = pingfederate_oauth_access_token_manager.example.id
}
`, atmId, versionedHcl)
}

// Validate any computed values when applying minimal HCL
func oauthAccessTokenManager_CheckComputedValuesMinimalInternallyManaged() resource.TestCheckFunc {
	versionedCheck := resource.ComposeTestCheckFunc()
	if acctest.VersionAtLeast(version.PingFederate1220) {
		versionedCheck = resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "token_endpoint_attribute_contract.attributes.#", "0")
	}
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.allowed_clients.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.restrict_clients", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.core_attributes.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.default_subject_attribute"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.extended_attributes.0.multi_valued", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.fields_all.#", "8"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.tables_all.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "id", atmId),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "selection_settings.resource_uris.#", "0"),
		resource.TestCheckResourceAttrSet("pingfederate_oauth_access_token_manager.example", "sequence_number"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.check_session_revocation_status", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.check_valid_authn_session", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.include_session_id", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.update_authn_session_activity", "false"),
		versionedCheck,
	)
}

// Validate any computed values when applying complete HCL
func oauthAccessTokenManager_CheckComputedValuesCompleteInternallyManaged() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.allowed_clients.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.restrict_clients", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.core_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.fields_all.#", "8"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.tables_all.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "id", atmId),
		resource.TestCheckResourceAttrSet("pingfederate_oauth_access_token_manager.example", "sequence_number"),
	)
}

// Delete the resource
func oauthAccessTokenManager_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthAccessTokenManagersAPI.DeleteTokenManager(acctest.TestBasicAuthContext(), atmId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthAccessTokenManager_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthAccessTokenManagersAPI.DeleteTokenManager(acctest.TestBasicAuthContext(), atmId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_access_token_manager still exists after tests. Expected it to be destroyed")
	}
	return nil
}
