// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package oauthaccesstokenmanager_test

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccOauthAccessTokenManager_MinimalMaximalJsonWeb(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAccessTokenManager_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAccessTokenManager_MinimalJsonWebHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesMinimalJsonWeb(),
			},
			{
				// Delete the minimal model
				Config:  oauthAccessTokenManager_MinimalJsonWebHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthAccessTokenManager_CompleteJsonWebHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesCompleteJsonWeb(),
			},
			{
				// Back to minimal model
				Config: oauthAccessTokenManager_MinimalJsonWebHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesMinimalJsonWeb(),
			},
			{
				// Back to complete model
				Config: oauthAccessTokenManager_CompleteJsonWebHCL(),
				Check:  oauthAccessTokenManager_CheckComputedValuesCompleteJsonWeb(),
			},
			{
				// Test importing the resource
				Config:                               oauthAccessTokenManager_CompleteJsonWebHCL(),
				ResourceName:                         "pingfederate_oauth_access_token_manager.example",
				ImportStateId:                        atmId,
				ImportStateVerifyIdentifierAttribute: "manager_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// sensitive fields can't be imported
				ImportStateVerifyIgnore: []string{
					"configuration.tables.0.rows.0.sensitive_fields",
				},
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthAccessTokenManager_MinimalJsonWebHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_oauth_access_token_manager" "example" {
  manager_id = "%s"
  configuration = {
    tables = [
      {
        name = "Symmetric Keys"
        rows = [
          {
            fields = [
              {
                name  = "Key ID"
                value = "keyidentifier"
              },
              {
                name  = "Encoding"
                value = "b64u"
              }
            ]
            sensitive_fields = [
              {
                name  = "Key"
                value = "+d5OB5b+I4dqn1Mjp8YE/M/QFWvDX7Nxz3gC8mAEwRLqL67SrHcwRyMtGvZKxvIn"
              }
            ]
          }
        ]
      },
    ]
    fields = [
      {
        name  = "JWE Algorithm"
        value = "dir"
      },
      {
        name  = "JWE Content Encryption Algorithm"
        value = "A192CBC-HS384"
      },
      {
        name  = "Active Symmetric Encryption Key ID"
        value = "keyidentifier"
      },
    ]
  }
  name = "myATM"
  plugin_descriptor_ref = {
    id = "com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin"
  }
  attribute_contract = {
    coreAttributes = []
    extended_attributes = [
      {
        name = "extended_contract"
      }
    ]
  }
}
`, atmId)
}

// Maximal HCL with all values set where possible
func oauthAccessTokenManager_CompleteJsonWebHCL() string {
	versionedFields := ""
	if acctest.VersionAtLeast(version.PingFederate1130) {
		versionedFields += `
  {
	name  = "Not Before Claim Offset"
	value = ""
  },
  {
	name  = "Include Issued At Claim",
	value = "false"
  },
`
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		versionedFields += `
  {
	name  = "Publish Keys to the PingFederate JWKS Endpoint"
	value = "false"
  },
`
	}
	additionalVersionedHcl := ""
	if acctest.VersionAtLeast(version.PingFederate1220) {
		additionalVersionedHcl += `
token_endpoint_attribute_contract = {
attributes = [
  {
	mapped_scopes = ["email"]
	multi_valued  = false
	name          = "normal"
  },
  {
	mapped_scopes = []
	multi_valued  = true
	name          = "another"
  },
]
}
`
	}

	return fmt.Sprintf(`
resource "pingfederate_oauth_access_token_manager" "example" {
  manager_id = "%s"
  access_control_settings = {
    allowed_clients  = []
    restrict_clients = false
  }
  attribute_contract = {
    default_subject_attribute = "contract1"
    extended_attributes = [
      {
        name         = "contract"
        multi_valued = false
      },
      {
        name         = "contract1"
        multi_valued = false
      },
      {
        name         = "contract2"
        multi_valued = true
      },
      {
        name         = "contract3"
        multi_valued = false
      },
      {
        name         = "contract4"
        multi_valued = true
      },
      {
        name         = "contract5"
        multi_valued = false
      }
    ]
  }
  configuration = {
    tables = [
      {
        name = "Symmetric Keys"
        rows = [
          {
            default_row = false
            fields = [
              {
                name  = "Key ID"
                value = "keyidentifier2"
              },
              {
                name  = "Encoding"
                value = "b64u"
              }
            ]
            sensitive_fields = [
              {
                name  = "Key"
                value = "e1oDxOiC3Jboz3um8hBVmW3JRZNo9z7C0DMm/oj2V1gclQRcgi2gKM2DBj9N05G4"
              }
            ]
          }
        ]
      },
      {
        name = "Certificates"
        rows = []
      }
    ]
    fields = [
      {
        name  = "Token Lifetime"
        value = "56"
      },
      {
        name  = "Use Centralized Signing Key"
        value = "false"
      },
      {
        name  = "JWS Algorithm"
        value = ""
      },
      {
        name  = "Active Symmetric Key ID"
        value = "keyidentifier2"
      },
      {
        name  = "Active Signing Certificate Key ID"
        value = ""
      },
      {
        name  = "JWE Algorithm"
        value = "dir"
      },
      {
        name  = "JWE Content Encryption Algorithm"
        value = "A192CBC-HS384"
      },
      {
        name  = "Active Symmetric Encryption Key ID"
        value = "keyidentifier2"
      },
      {
        name  = "Asymmetric Encryption Key"
        value = ""
      },
      {
        name  = "Asymmetric Encryption JWKS URL"
        value = ""
      },
      {
        name  = "Enable Token Revocation"
        value = "false"
      },
      {
        name  = "Include Key ID Header Parameter"
        value = "true"
      },
      {
        name  = "Default JWKS URL Cache Duration"
        value = "720"
      },
      {
        name  = "Include JWE Key ID Header Parameter"
        value = "true"
      },
      {
        name  = "Client ID Claim Name"
        value = "client_id"
      },
      {
        name  = "Scope Claim Name"
        value = "scope"
      },
      {
        name  = "Space Delimit Scope Values"
        value = "true"
      },
      {
        name  = "Authorization Details Claim Name"
        value = "authorization_details"
      },
      {
        name  = "Issuer Claim Value"
        value = ""
      },
      {
        name  = "Audience Claim Value"
        value = ""
      },
      {
        name  = "JWT ID Claim Length"
        value = "22"
      },
      {
        name  = "Access Grant GUID Claim Name"
        value = ""
      },
      {
        name  = "JWKS Endpoint Path"
        value = ""
      },
      {
        name  = "JWKS Endpoint Cache Duration"
        value = "720"
      },
      {
        name  = "Expand Scope Groups"
        value = "false"
      },
      {
        name  = "Type Header Value"
        value = ""
      },
      {
        name  = "Publish Thumbprint X.509 URL"
        value = "false"
      },
      {
        name  = "Publish Key ID X.509 URL"
        value = "false"
      },
      {
        name  = "Include JWE X.509 Thumbprint Header Parameter",
        value = "false"
      },
      {
        name  = "Include X.509 Thumbprint Header Parameter",
        value = "false"
      },
	  %s
    ]
  }
  name = "myATMUpdated"
  plugin_descriptor_ref = {
    id = "com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin"
  }
  selection_settings = {
    resource_uris = ["https://example.com"]
  }
  session_validation_settings = {
    check_session_revocation_status = true
    check_valid_authn_session       = true
    include_session_id              = true
    update_authn_session_activity   = true
  }
  %s
}
data "pingfederate_oauth_access_token_manager" "example" {
  manager_id = pingfederate_oauth_access_token_manager.example.id
}
`, atmId, versionedFields, additionalVersionedHcl)
}

func oauthAccessTokenManager_CheckVersionedFields(minimal bool) resource.TestCheckFunc {
	checks := []resource.TestCheckFunc{}
	numFields := 30
	if acctest.VersionAtLeast(version.PingFederate1130) {
		numFields += 2
	}
	if acctest.VersionAtLeast(version.PingFederate1210) {
		numFields += 1
	}
	checks = append(checks, resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.fields_all.#", strconv.Itoa(numFields)))
	if minimal && acctest.VersionAtLeast(version.PingFederate1220) {
		checks = append(checks, resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "token_endpoint_attribute_contract.attributes.#", "0"))
	}
	return resource.ComposeTestCheckFunc(checks...)
}

// Validate any computed values when applying minimal HCL
func oauthAccessTokenManager_CheckComputedValuesMinimalJsonWeb() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.allowed_clients.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.restrict_clients", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.core_attributes.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.default_subject_attribute"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.extended_attributes.0.multi_valued", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.tables.0.rows.0.default_row", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "id", atmId),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "selection_settings.resource_uris.#", "0"),
		resource.TestCheckResourceAttrSet("pingfederate_oauth_access_token_manager.example", "sequence_number"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.check_session_revocation_status", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.check_valid_authn_session", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.include_session_id", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "session_validation_settings.update_authn_session_activity", "false"),
		oauthAccessTokenManager_CheckVersionedFields(true),
	)
}

// Validate any computed values when applying complete HCL
func oauthAccessTokenManager_CheckComputedValuesCompleteJsonWeb() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.allowed_clients.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "access_control_settings.restrict_clients", "false"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "attribute_contract.core_attributes.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "configuration.tables_all.#", "2"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_manager.example", "id", atmId),
		resource.TestCheckResourceAttrSet("pingfederate_oauth_access_token_manager.example", "sequence_number"),
		oauthAccessTokenManager_CheckVersionedFields(false),
	)
}
