// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package accesstokenmapping_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const accessTokenMappingId = "default|devicesATM"

func TestAccOauthAccessTokenMapping_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAccessTokenMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAccessTokenMapping_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					oauthAccessTokenMapping_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccOauthAccessTokenMapping_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: oauthAccessTokenMapping_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: oauthAccessTokenMapping_MinimalHCL(),
				Check:  oauthAccessTokenMapping_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  oauthAccessTokenMapping_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: oauthAccessTokenMapping_CompleteHCL(),
				Check:  oauthAccessTokenMapping_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: oauthAccessTokenMapping_MinimalHCL(),
				Check:  oauthAccessTokenMapping_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: oauthAccessTokenMapping_CompleteHCL(),
				Check:  oauthAccessTokenMapping_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               oauthAccessTokenMapping_CompleteHCL(),
				ResourceName:                         "pingfederate_oauth_access_token_mapping.example",
				ImportStateId:                        accessTokenMappingId,
				ImportStateVerifyIdentifierAttribute: "mapping_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func oauthAccessTokenMapping_MinimalHCL() string {
	return `
resource "pingfederate_oauth_access_token_manager" "devices" {
  manager_id = "devicesATM"
  name       = "Device Token Manager"

  plugin_descriptor_ref = {
    id = "org.sourceid.oauth20.token.plugin.impl.ReferenceBearerAccessTokenManagementPlugin"
  }

  configuration = {
    fields = [
      {
        name  = "Token Length"
        value = "56"
      },
      {
        name  = "Token Lifetime"
        value = "240"
      },
    ]
  }
  attribute_contract = {
    extended_attributes = [
      { name = "directory_id" },
      { name = "device_id" },
      { name = "device_owner_user_id" },
      { name = "device_custodian_user_id" },
    ]
  }
}

resource "pingfederate_oauth_access_token_mapping" "example" {
  access_token_manager_ref = {
    id = pingfederate_oauth_access_token_manager.devices.id
  }
  attribute_contract_fulfillment = {
    "directory_id" = {
      source = {
        type = "TEXT"
      }
      value = "uid"
    },
    "device_id" = {
      source = {
        type = "TEXT"
      }
      value = "serialNumber"
    },
    "device_owner_user_id" = {
      source = {
        type = "TEXT"
      }
      value = "owner"
    },
    "device_custodian_user_id" = {
      source = {
        type = "TEXT"
      }
      value = "seeAlso"
    },
  }
  context = {
    type = "DEFAULT"
  }
}
`
}

// Maximal HCL with all values set where possible
func oauthAccessTokenMapping_CompleteHCL() string {
	return `
resource "pingfederate_oauth_access_token_manager" "devices" {
  manager_id = "devicesATM"
  name       = "Device Token Manager"

  plugin_descriptor_ref = {
    id = "org.sourceid.oauth20.token.plugin.impl.ReferenceBearerAccessTokenManagementPlugin"
  }

  configuration = {
    fields = [
      {
        name  = "Token Length"
        value = "56"
      },
      {
        name  = "Token Lifetime"
        value = "240"
      },
    ]
  }
  attribute_contract = {
    extended_attributes = [
      { name = "directory_id" },
      { name = "device_id" },
      { name = "device_owner_user_id" },
      { name = "device_custodian_user_id" },
    ]
  }
}

resource "pingfederate_oauth_access_token_mapping" "example" {
  context = {
    type = "DEFAULT"
  }

  access_token_manager_ref = {
    id = pingfederate_oauth_access_token_manager.devices.id
  }

  attribute_sources = [
    {
      ldap_attribute_source = {
        base_dn = "ou=Devices,dc=bxretail,dc=org"
        data_store_ref = {
          id = "pingdirectory"
        }
        description            = "Directory"
        id                     = "Directory"
        member_of_nested_group = false
        search_attributes = [
          "Subject DN",
          "serialNumber",
          "owner",
          "seeAlso",
          "uid",
        ]
        search_filter = "cn=$${USER_KEY}"
        search_scope  = "SUBTREE"
        type          = "LDAP"
      }
    },
  ]

  attribute_contract_fulfillment = {
    "directory_id" = {
      source = {
        id   = "Directory"
        type = "LDAP_DATA_STORE"
      }
      value = "uid"
    },
    "device_id" = {
      source = {
        id   = "Directory"
        type = "LDAP_DATA_STORE"
      }
      value = "serialNumber"
    },
    "device_owner_user_id" = {
      source = {
        id   = "Directory"
        type = "LDAP_DATA_STORE"
      }
      value = "owner"
    },
    "device_custodian_user_id" = {
      source = {
        type = "EXPRESSION"
      }
      value = "'test1|test2|test3'.split(\"\\\\|\")[1]"
    },
  }

  issuance_criteria = {
    conditional_criteria = [
      {
        attribute_name = "ClientId"
        condition      = "EQUALS_CASE_INSENSITIVE"
        error_result   = "Cannot issue access token"
        source = {
          type = "CONTEXT"
        }
        value = "example"
      },
    ]
  }
}
`
}

// Validate any computed values when applying minimal HCL
func oauthAccessTokenMapping_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "attribute_contract_fulfillment.device_custodian_user_id.source.id"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "attribute_contract_fulfillment.device_id.source.id"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "attribute_contract_fulfillment.device_owner_user_id.source.id"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "attribute_contract_fulfillment.directory_id.source.id"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_mapping.example", "id", accessTokenMappingId),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_mapping.example", "issuance_criteria.conditional_criteria.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_mapping.example", "mapping_id", accessTokenMappingId),
	)
}

// Validate any computed values when applying complete HCL
func oauthAccessTokenMapping_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_mapping.example", "id", accessTokenMappingId),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "issuance_criteria.conditional_criteria.0.source.id"),
		resource.TestCheckNoResourceAttr("pingfederate_oauth_access_token_mapping.example", "issuance_criteria.expression_criteria"),
		resource.TestCheckResourceAttr("pingfederate_oauth_access_token_mapping.example", "mapping_id", accessTokenMappingId),
	)
}

// Delete the resource
func oauthAccessTokenMapping_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.OauthAccessTokenMappingsAPI.DeleteMapping(acctest.TestBasicAuthContext(), accessTokenMappingId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func oauthAccessTokenMapping_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.OauthAccessTokenMappingsAPI.DeleteMapping(acctest.TestBasicAuthContext(), accessTokenMappingId).Execute()
	if err == nil {
		return fmt.Errorf("oauth_access_token_mapping still exists after tests. Expected it to be destroyed")
	}
	return nil
}
