// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package sessionapplicationsessionpolicy_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccSessionApplicationPolicy_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: sessionApplicationPolicy_MinimalHCL(),
				Check:  sessionApplicationPolicy_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed fields to check.
				Config: sessionApplicationPolicy_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               sessionApplicationPolicy_CompleteHCL(),
				ResourceName:                         "pingfederate_session_application_policy.example",
				ImportStateVerifyIdentifierAttribute: "idle_timeout_mins",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: sessionApplicationPolicy_MinimalHCL(),
				Check:  sessionApplicationPolicy_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func sessionApplicationPolicy_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_session_application_policy" "example" {
}
data "pingfederate_session_application_policy" "example" {
  depends_on = [pingfederate_session_application_policy.example]
}
`)
}

// Maximal HCL with all values set where possible
func sessionApplicationPolicy_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_session_application_policy" "example" {
  idle_timeout_mins = 120
  max_timeout_mins  = 360
}
data "pingfederate_session_application_policy" "example" {
  depends_on = [pingfederate_session_application_policy.example]
}
`)
}

// Validate any computed values when applying minimal HCL
func sessionApplicationPolicy_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_session_application_policy.example", "idle_timeout_mins", "60"),
		resource.TestCheckResourceAttr("pingfederate_session_application_policy.example", "max_timeout_mins", "480"),
	)
}
