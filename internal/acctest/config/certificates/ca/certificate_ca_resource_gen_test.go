// Copyright Â© 2025 Ping Identity Corporation

// Code generated by ping-terraform-plugin-framework-generator

package certificatesca_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

var initialFileData = os.Getenv("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_1")
var updatedFileData = os.Getenv("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_2")

const certificateCaCaId = "certid"

func TestAccCertificateCa_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			if initialFileData == "" {
				t.Fatal("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_1 must be set for acceptance tests")
			}
			acctest.ConfigurationPreCheck(t)
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: certificateCa_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: certificateCa_MinimalHCL(initialFileData),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					certificateCa_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccCertificateCa_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			if initialFileData == "" {
				t.Fatal("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_1 must be set for acceptance tests")
			}
			if updatedFileData == "" {
				t.Fatal("PF_TF_ACC_TEST_CERTIFICATE_CA_FILE_DATA_2 must be set for acceptance tests")
			}
			acctest.ConfigurationPreCheck(t)
		},
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: certificateCa_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: certificateCa_MinimalHCL(initialFileData),
				Check:  certificateCa_CheckComputedValuesInitial(),
			},
			{
				// Back to complete model
				Config: certificateCa_MinimalHCL(updatedFileData),
				Check:  certificateCa_CheckComputedValuesUpdated(),
			},
			{
				// Test importing the resource
				Config:                               certificateCa_MinimalHCL(updatedFileData),
				ResourceName:                         "pingfederate_certificate_ca.example",
				ImportStateId:                        certificateCaCaId,
				ImportStateVerifyIdentifierAttribute: "ca_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// TODO currently the file_data isn't imported - see CDI-462
				ImportStateVerifyIgnore: []string{"file_data"},
			},
		},
	})
}

// Minimal HCL with only required values set
func certificateCa_MinimalHCL(fileData string) string {
	return fmt.Sprintf(`
resource "pingfederate_certificate_ca" "example" {
  ca_id     = "%s"
  file_data = "%s"
}
data "pingfederate_certificate_ca" "example" {
  ca_id = pingfederate_certificate_ca.example.id
}
`, certificateCaCaId, fileData)
}

// Validate any computed values when applying initial HCL
func certificateCa_CheckComputedValuesInitial() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_certificate_ca.example", "crypto_provider"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "expires", "2024-05-29T15:59:19Z"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "issuer_dn", "EMAILADDRESS=test@gmail.com, CN=terraformtest, OU=Devops, O=ping Identity, L=san Jose, ST=SJC, C=US"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "key_size", "2048"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "serial_number", "16677565866115840610"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "sha1_fingerprint", "A98434F2CD96AF202E50DDDD8FD6D9354CAC2B80"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "sha256_fingerprint", "0D82B801AAA7CCE20C752EEA02D02296AF258EAA3FF7D565164A0F880EEA910B"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "signature_algorithm", "SHA256withRSA"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "status", "EXPIRED"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "subject_alternative_names.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "subject_dn", "EMAILADDRESS=test@gmail.com, CN=terraformtest, OU=Devops, O=ping Identity, L=san Jose, ST=SJC, C=US"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "valid_from", "2023-05-30T15:59:19Z"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "version", "1"),
	)
}

// Validate any computed values when applying updated HCL
func certificateCa_CheckComputedValuesUpdated() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_certificate_ca.example", "crypto_provider"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "expires", "2043-12-27T00:00:00Z"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "issuer_dn", "CN=Example Authority, O=Example Corporation, C=US"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "key_size", "2048"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "serial_number", "80133226587660155953237711066254559718"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "sha1_fingerprint", "D2B4B2033511D50BABE289E0AF2C17B8DA15FCC3"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "sha256_fingerprint", "6E61905D5223D6667B68D8E600E779B1F13DA404041A8BA7CDF07DB01179A897"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "signature_algorithm", "SHA256withRSA"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "status", "VALID"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "subject_alternative_names.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "subject_dn", "CN=Example Authority, O=Example Corporation, C=US"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "valid_from", "2024-01-01T00:00:00Z"),
		resource.TestCheckResourceAttr("pingfederate_certificate_ca.example", "version", "3"),
	)
}

// Delete the resource
func certificateCa_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.CertificatesCaAPI.DeleteTrustedCA(acctest.TestBasicAuthContext(), certificateCaCaId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func certificateCa_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.CertificatesCaAPI.DeleteTrustedCA(acctest.TestBasicAuthContext(), certificateCaCaId).Execute()
	if err == nil {
		return fmt.Errorf("certificate_ca still exists after tests. Expected it to be destroyed")
	}
	return nil
}
