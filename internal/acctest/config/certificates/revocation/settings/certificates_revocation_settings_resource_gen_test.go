// Code generated by ping-terraform-plugin-framework-generator

package certificatesrevocationsettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

func TestAccCertificatesRevocationSettings_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model.
				Config: certificatesRevocationSettings_MinimalHCL(),
				Check:  certificatesRevocationSettings_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model
				Config: certificatesRevocationSettings_CompleteHCL(),
				Check:  certificatesRevocationSettings_CheckComputedValuesComputed(),
			},
			{
				// Test importing the resource
				Config:                               certificatesRevocationSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_certificates_revocation_settings.example",
				ImportStateVerifyIdentifierAttribute: "ocsp_settings.%",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: certificatesRevocationSettings_MinimalHCL(),
				Check:  certificatesRevocationSettings_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func certificatesRevocationSettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_certificates_revocation_settings" "example" {
  ocsp_settings = {
  }
}
`)
}

// Maximal HCL with all values set where possible
func certificatesRevocationSettings_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_certificates_revocation_settings" "example" {
  crl_settings = {
  }
  ocsp_settings = {
    action_on_responder_unavailable = "FAILOVER"
    action_on_status_unknown        = "FAILOVER"
    action_on_unsuccessful_response = "FAILOVER"
    current_update_grace_period     = 6
    next_update_grace_period        = 7
    requester_add_nonce             = true
    responder_timeout               = 4
    responder_url                   = "https://example.com"
    response_cache_period           = 64
  }
  proxy_settings = {
    host = "example.com"
    port = 1234
  }
}
`)
}

// Validate any computed values when applying minimal HCL
func certificatesRevocationSettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.action_on_responder_unavailable", "CONTINUE"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.action_on_status_unknown", "FAIL"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.action_on_unsuccessful_response", "FAIL"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.current_update_grace_period", "5"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.next_update_grace_period", "5"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.requester_add_nonce", "false"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.responder_timeout", "5"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "ocsp_settings.response_cache_period", "48"),
	)
}

// Validate any computed values when applying minimal HCL
func certificatesRevocationSettings_CheckComputedValuesComputed() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "crl_settings.next_retry_mins_when_next_update_in_past", "60"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "crl_settings.next_retry_mins_when_resolve_failed", "1440"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "crl_settings.treat_non_retrievable_crl_as_revoked", "false"),
		resource.TestCheckResourceAttr("pingfederate_certificates_revocation_settings.example", "crl_settings.verify_crl_signature", "true"),
	)
}
