// Code generated by ping-terraform-plugin-framework-generator

package clustersettings_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

func TestAccClusterSettings_MinimalMaximal(t *testing.T) {
	// Check if the server is running in clustered mode or not
	testClient := acctest.TestClient()
	_, _, err := testClient.ClusterAPI.GetClusterSettings(acctest.TestBasicAuthContext()).Execute()
	if err != nil {
		// This server must not be in clustered mode, so skip this test
		t.Skip("This server is not in clustered mode, skipping TestAccClusterSettings_MinimalMaximal")
	}
	// Check if the server is at least PF 12.0 for this resource
	if !acctest.VersionAtLeast(version.PingFederate1200) {
		t.Skip("This server is not at least PingFederate 12.0 so pingfederate_cluster_settings is not supported, skipping TestAccClusterSettings_MinimalMaximal")
	}
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: clusterSettings_MinimalHCL(),
				Check:  clusterSettings_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: clusterSettings_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               clusterSettings_CompleteHCL(),
				ResourceName:                         "pingfederate_cluster_settings.example",
				ImportStateVerifyIdentifierAttribute: "replicate_clients_on_save",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: clusterSettings_MinimalHCL(),
				Check:  clusterSettings_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func clusterSettings_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_cluster_settings" "example" {
}
`)
}

// Maximal HCL with all values set where possible
func clusterSettings_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_cluster_settings" "example" {
  replicate_clients_on_save     = true
  replicate_connections_on_save = true
}
`)
}

// Validate any computed values when applying minimal HCL
func clusterSettings_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_cluster_settings.example", "replicate_clients_on_save", "false"),
		resource.TestCheckResourceAttr("pingfederate_cluster_settings.example", "replicate_connections_on_save", "false"),
	)
}
