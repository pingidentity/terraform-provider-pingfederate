// Code generated by ping-terraform-plugin-framework-generator

package metadataurls_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const metadataUrlUrlId = "metadataUrlUrlId"

func TestAccMetadataUrl_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: metadataUrl_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: metadataUrl_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					metadataUrl_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccMetadataUrl_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: metadataUrl_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: metadataUrl_MinimalHCL(),
				Check:  metadataUrl_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  metadataUrl_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: metadataUrl_CompleteHCL(),
				Check:  metadataUrl_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: metadataUrl_MinimalHCL(),
				Check:  metadataUrl_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: metadataUrl_CompleteHCL(),
				Check:  metadataUrl_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               metadataUrl_CompleteHCL(),
				ResourceName:                         "pingfederate_metadata_url.example",
				ImportStateId:                        metadataUrlUrlId,
				ImportStateVerifyIdentifierAttribute: "url_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// PF file_data is read into formatted_file_data, so file_data won't appear after an import.
				// PF also doesn't return the x509_file.id value, instead storing it in the cert_view.id field.
				ImportStateVerifyIgnore: []string{"x509_file.file_data"},
			},
		},
	})
}

// Minimal HCL with only required values set
func metadataUrl_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_metadata_url" "example" {
  url_id = "%s"
  name   = "UrlName"
  url    = "https://example.com"
}
`, metadataUrlUrlId)
}

// Maximal HCL with all values set where possible
func metadataUrl_CompleteHCL() string {
	// Test with sample self-signed cert
	return fmt.Sprintf(`
resource "pingfederate_metadata_url" "example" {
  url_id             = "%s"
  name               = "UrlNameUpdated"
  url                = "https://example.com/updated"
  validate_signature = true
  x509_file = {
    file_data = "-----BEGIN CERTIFICATE-----\nMIIE/zCCAumgAwIBAgIQLYHoX089T3MMLt57qv0KBDALBgkqhkiG9w0BAQswLDEL\nMAkGA1UEBgwCdXMxDDAKBgNVBAoMA29yZzEPMA0GA1UEAwwGY29tbW9uMB4XDTI0\nMDYyNDIwNDkxMVoXDTI1MDYyNDIwNDkxMVowLDELMAkGA1UEBgwCdXMxDDAKBgNV\nBAoMA29yZzEPMA0GA1UEAwwGY29tbW9uMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A\nMIICCgKCAgEAwG9aAPfIVzqXOUQgXKpcykmTzmGZV+O0HLjuV4WrnvFZ1k0PxjuX\njFtuFbpX99MFURVBX989tm8FUd8yWS0b9pLg+YRIC/dg1KSvE7t80Vp9Zw9WrChp\nPF39HI8SCth/6TAU6oajU4UxSDXNI2MAyL7JJuQ/UuTdYgmQWa+plIjSWMTNzlMX\nLZyitg2GBc6h0JMPFs52I5lfG0Ju+lG+kxlW8jb2H86+mSqeArVlc2Y2FalymcPa\n8yjO7Zwn5sIZlLDrSlO0DgJhfPtM1Gq1B5xbOTPaC8As2tVd8X6dlk7lr+8kiQOo\nflXHDvItM1WD+3fGHgdf/PnSciUpQ0Ss2S+CwowpYDgCrONaKmpBoKpJcslN0TtP\nkFTmk0tw9Fu7rJhgMN+xkm8U7MMZDXq/tGevtxjfrtfeJT+BD8+7wbl4G4W2Vo66\nhbX2HB4ACR2k60KKyeem6Z5oMkKsOnSEgv6Sw4QpXauiJBQuq9AnpbzN/OtinSlt\n9S0NtdfajHoJWaebI1T4MDUndh1ldzpXgE6hC/r6p59oN7aQ4r7S3ta3AGp0Cd0l\nZFD7hKQPah7fRWo8OZrWrno8RVfnBUkjKIkBZTjag647iLjN0WKYUsb95FFikVOT\nR/xjzSIrq9oWbPWmQG+MR2XXeoGXM+9gZKjdWWgG90VOm0Xxli2co20CAwEAAaMh\nMB8wHQYDVR0OBBYEFCENlVBTH/3D9Gwd5xX2QE21KTc7MAsGCSqGSIb3DQEBCwOC\nAgEASwQGIWcwQ5BsUo7fKCitD/y9KqgYy02Q4t3yCUHCs1kI4/2nIvNzhfknI7+n\njPxPCQ/Xdb/YDHkXMjkKg2J1490URFQzB8fC5yrL0Fe4VXrG1zXxTOdQ+vq7Imxa\nJ9U8mg6YiOfa0BXK8JkXF3pRLTkMO0WUAOl+24/paziKPJyNTJ5bSM6r9pVmAww7\nfkUAl64ZmxCwNaJGvY6LMCE0BlLAl3uUFu1+e1k0oS5S58Ru6jUfPX6cxk3+kOl1\nX+41f4/ZmAywTlMRrwdzki2GTBiwjd1DjridVQwHnUIC34kdTvzxddQk2VyTk8Qm\n2wO7ZCNUkCMa79waM+j7R+M3V3RWg/dNvIxuRPI7pFGz3ODJT2gZ26oB8252uD0w\nmllQx3LB+M+MDmylnNzkZLl5LoGzfrDQyJmMCUGENgZYpwxU08Zu2eFVuUGhtb/8\nRhXl1hq2+ijJ0WoFdE/AaVamBlBtczI7U0mhsq4xbTD+QBpn/XGKBTxfmrOmVnGJ\nGbGOpVA28KXwuOnpUxb5s0Kr+ADtbeqESyXTI8P1NA1n9QBr6e0RUuF13RjQE9Rr\nmlm7cm7kGfmDnhYsg6udgz6V9QKIw0SLgLAk89tFosivM7elnYc8gio8DWlrqpQe\nsrBL9AecFcuCR/4sBq5snNcCd+QUfkxfcGazfUpJwxRbSig=\n-----END CERTIFICATE-----"
    id        = "myx509id"
  }
}
`, metadataUrlUrlId)
}

// Validate any computed values when applying minimal HCL
func metadataUrl_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "id", metadataUrlUrlId),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "validate_signature", "true"),
	)
}

// Validate any computed values when applying complete HCL
func metadataUrl_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "id", metadataUrlUrlId),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.expires", "2025-06-24T20:49:11Z"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.id", "myx509id"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.issuer_dn", "CN=common, O=org, C=us"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.key_algorithm", "RSA"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.key_size", "4096"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.serial_number", "60489779175299128527490530475658512900"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.sha1_fingerprint", "9806D5E32C00461FD8F3C1790065F46603647E53"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.sha256_fingerprint", "4C2B71B9FC9007AA669C2BCDCE5CE1A0F2BB6DB243F56881E040CF5E00CB47F3"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.signature_algorithm", "SHA256withRSA"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.status", "VALID"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.subject_alternative_names.#", "0"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.subject_dn", "CN=common, O=org, C=us"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.valid_from", "2024-06-24T20:49:11Z"),
		resource.TestCheckResourceAttr("pingfederate_metadata_url.example", "cert_view.version", "3"),
		resource.TestCheckResourceAttrSet("pingfederate_metadata_url.example", "x509_file.formatted_file_data"),
	)
}

// Delete the resource
func metadataUrl_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.MetadataUrlsAPI.DeleteMetadataUrl(acctest.TestBasicAuthContext(), metadataUrlUrlId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func metadataUrl_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.MetadataUrlsAPI.DeleteMetadataUrl(acctest.TestBasicAuthContext(), metadataUrlUrlId).Execute()
	if err == nil {
		return fmt.Errorf("metadata_url still exists after tests. Expected it to be destroyed")
	}
	return nil
}
