// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-terraform-plugin-framework-generator

package localidentityprofile_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/acctest"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/provider"
)

const profileId = "localIdProfileId"

func TestAccLocalIdentityProfile_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: localIdentityProfile_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: localIdentityProfile_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					localIdentityProfile_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccLocalIdentityProfile_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"pingfederate": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: localIdentityProfile_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: localIdentityProfile_MinimalHCL(),
				Check:  localIdentityProfile_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  localIdentityProfile_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: localIdentityProfile_CompleteHCL(),
				Check:  localIdentityProfile_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: localIdentityProfile_MinimalHCL(),
				Check:  localIdentityProfile_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: localIdentityProfile_CompleteHCL(),
				Check:  localIdentityProfile_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               localIdentityProfile_CompleteHCL(),
				ResourceName:                         "pingfederate_local_identity_profile.example",
				ImportStateId:                        profileId,
				ImportStateVerifyIdentifierAttribute: "profile_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func localIdentityProfile_MinimalHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_authentication_policy_contract" "example" {
  contract_id         = "myContract"
  extended_attributes = [{ name = "extended_attribute" }, { name = "extended_attribute2" }]
  name                = "My Contract"
}

resource "pingfederate_local_identity_profile" "example" {
  profile_id = "%s"
  apc_id = {
    id = pingfederate_authentication_policy_contract.example.id
  }
  name = "myprofile"
}
`, profileId)
}

// Maximal HCL with all values set where possible
func localIdentityProfile_CompleteHCL() string {
	return fmt.Sprintf(`
resource "pingfederate_authentication_policy_contract" "example" {
  contract_id         = "myContract"
  extended_attributes = [{ name = "extended_attribute" }, { name = "extended_attribute2" }]
  name                = "My Contract"
}

resource "pingfederate_notification_publisher" "example" {
  configuration = {
    fields = [
      {
        name  = "Connection Timeout"
        value = "30"
      },
      {
        name  = "Email Server"
        value = "example.com"
      },
      {
        name  = "Enable SMTP Debugging Messages"
        value = "false"
      },
      {
        name  = "Encryption Method"
        value = "NONE"
      },
      {
        name  = "From Address"
        value = "example@pingidentity.com"
      },
      {
        name  = "SMTP Port"
        value = "25"
      },
      {
        name  = "SMTPS Port"
        value = "465"
      },
      {
        name  = "UTF-8 Message Header Support"
        value = "false"
      },
      {
        name  = "Verify Hostname"
        value = "true"
      },
    ]
  }
  name = "examplePub"
  plugin_descriptor_ref = {
    id = "com.pingidentity.email.SmtpNotificationPlugin"
  }
  publisher_id = "examplePub"
}


resource "pingfederate_captcha_provider" "example" {
  configuration = {
    fields = [
      {
        name  = "JavaScript File Name"
        value = "recaptcha-v3.js"
      },
      {
        name  = "Pass Score Threshold"
        value = "1"
      },
      {
        name  = "Site Key"
        value = "asdf"
      },
    ]
    sensitive_fields = [
      {
        name  = "Secret Key"
        value = "asdf"
      },
    ]
  }
  name = "exampleCapPro"
  plugin_descriptor_ref = {
    id = "com.pingidentity.captcha.recaptchaV3.ReCaptchaV3Plugin"
  }
  provider_id = "exampleCapPro"
}

resource "pingfederate_local_identity_profile" "example" {
  profile_id = "%s"
  apc_id = {
    id = pingfederate_authentication_policy_contract.example.id
  }
  auth_source_update_policy = {
    retain_attributes = true
    store_attributes = true
    update_attributes = true
    update_interval = 10
  }
  auth_sources = [
    {
      id = "example"
      source = "example"
    },
    {
      id = "test",
      source = "test"
    }
  ]
  data_store_config = {
    auxiliary_object_classes = ["objectClass"]
    base_dn = "dc=example,dc=com"
    create_pattern = "uid=$${mail}"
    data_store_mapping = {
      "entryUUID" = {
        metadata = {
          "key": "value"
        }
        name = "entryUUID"
        type = "LDAP"
      }
	"cn" = {
		type = "LDAP"
		name = "cn"
		metadata = {}
	}

	"mail" = {
		type = "LDAP"
		name = "mail"
		metadata = {}
	}
    }
    data_store_ref = {
      id = "pingdirectory"
    }
    object_class = "inetOrgPerson"
    type = "LDAP"
  }
  email_verification_config = {
    allowed_otp_character_set = "23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz"
    email_verification_enabled = true
    email_verification_error_template_name = "local.identity.email.test.verification.error.html"
    email_verification_otp_template_name = "message-template-email-test-ownership-verification.html"
    email_verification_success_template_name = "local.identity.email.test.verification.success.html"
    email_verification_type = "OTP"
    field_for_email_to_verify = "mail"
    field_storing_verification_status = "cn"
    notification_publisher_ref = {
      id = pingfederate_notification_publisher.example.id
    }
    otp_length = 11
    otp_retry_attempts = 4
    otp_time_to_live = 1435
    require_verified_email = true
    verify_email_template_name = true
  }
  field_config = {
    fields = [
      {
        type                    = "TEXT"
        id                      = "mail"
        label                   = "Email address"
        registration_page_field = true
        profile_page_field      = true
        attributes = {
          "Read-Only"       = false,
          "Required"        = true,
          "Unique ID Field" = true,
          "Mask Log Values" = false,
        }
      },
      {
        type                    = "HIDDEN"
        id                      = "cn"
        label                   = "cn"
        registration_page_field = false
        profile_page_field      = true
        attributes = {
"Unique ID Field" = false,
"Mask Log Values" = false,
        }
      },
      {
        type                    = "CHECKBOX_GROUP",
        id                      = "entryUUID",
        label                   = "entryUUID",
        registration_page_field = false
        profile_page_field      = true
        attributes = {
"Read-Only" = false,
"Must Pick One" = false,
"Mask Log Values" = false,
        }
		options = ["option1, option2"]
      },
    ]
    strip_space_from_unique_field = true
  }
  name = "completeProfile"
  profile_config = {
    delete_identity_enabled = true
    template_name           = "local.test.identity.profile.html"
  }
  profile_enabled = true
  registration_config = {
    captcha_enabled = true
    captcha_provider_ref = {
      id = pingfederate_captcha_provider.example.id
    }
    template_name                           = "local.test.identity.registration.html"
    create_authn_session_after_registration = true
    username_field                          = "cn"
    this_is_my_device_enabled               = true
  }
  registration_enabled = true
  # Ensures this resource will be updated before deleting the dependencies
  lifecycle {
    create_before_destroy = true
  }
}
`, profileId)
}

// Validate any computed values when applying minimal HCL
func localIdentityProfile_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "auth_source_update_policy"),
		resource.TestCheckResourceAttr("pingfederate_local_identity_profile.example", "auth_sources.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "data_store_config"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "email_verification_config"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "field_config"),
		resource.TestCheckResourceAttr("pingfederate_local_identity_profile.example", "id", profileId),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "profile_config"),
		resource.TestCheckResourceAttr("pingfederate_local_identity_profile.example", "profile_enabled", "false"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "registration_config"),
		resource.TestCheckResourceAttr("pingfederate_local_identity_profile.example", "registration_enabled", "false"),
	)
}

// Validate any computed values when applying complete HCL
func localIdentityProfile_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("pingfederate_local_identity_profile.example", "data_store_config.data_store_mapping.key.metadata.#", "0"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "email_verification_config.email_verification_sent_template_name"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "email_verification_config.otl_time_to_live"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "email_verification_config.require_verified_email_template_name"),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "field_config.fields.0.default_value"),
		resource.TestCheckResourceAttr("pingfederate_local_identity_profile.example", "id", profileId),
		resource.TestCheckNoResourceAttr("pingfederate_local_identity_profile.example", "registration_config.execute_workflow"),
	)
}

// Delete the resource
func localIdentityProfile_Delete(t *testing.T) {
	testClient := acctest.TestClient()
	_, err := testClient.LocalIdentityIdentityProfilesAPI.DeleteIdentityProfile(acctest.TestBasicAuthContext(), profileId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func localIdentityProfile_CheckDestroy(s *terraform.State) error {
	testClient := acctest.TestClient()
	_, err := testClient.LocalIdentityIdentityProfilesAPI.DeleteIdentityProfile(acctest.TestBasicAuthContext(), profileId).Execute()
	if err == nil {
		return fmt.Errorf("local_identity_profile still exists after tests. Expected it to be destroyed")
	}
	return nil
}
