// Code generated by ping-terraform-plugin-framework-generator

package keypairssigningrotationsettings

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/id"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &keypairsSigningKeyRotationSettingsResource{}
	_ resource.ResourceWithConfigure   = &keypairsSigningKeyRotationSettingsResource{}
	_ resource.ResourceWithImportState = &keypairsSigningKeyRotationSettingsResource{}
)

func KeypairsSigningKeyRotationSettingsResource() resource.Resource {
	return &keypairsSigningKeyRotationSettingsResource{}
}

type keypairsSigningKeyRotationSettingsResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *keypairsSigningKeyRotationSettingsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_keypairs_signing_key_rotation_settings"
}

func (r *keypairsSigningKeyRotationSettingsResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type keypairsSigningKeyRotationSettingsResourceModel struct {
	ActivationBufferDays types.Int64  `tfsdk:"activation_buffer_days"`
	CreationBufferDays   types.Int64  `tfsdk:"creation_buffer_days"`
	Id                   types.String `tfsdk:"id"`
	KeyAlgorithm         types.String `tfsdk:"key_algorithm"`
	KeySize              types.Int64  `tfsdk:"key_size"`
	KeyPairId            types.String `tfsdk:"key_pair_id"`
	SignatureAlgorithm   types.String `tfsdk:"signature_algorithm"`
	ValidDays            types.Int64  `tfsdk:"valid_days"`
}

func (r *keypairsSigningKeyRotationSettingsResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a keypairs signing key rotation settings.",
		Attributes: map[string]schema.Attribute{
			"activation_buffer_days": schema.Int64Attribute{
				Required:    true,
				Description: "Buffer days before key pair expiration for activation of the new key pair. Must be less than or equal to `creation_buffer_days`.",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"creation_buffer_days": schema.Int64Attribute{
				Required:    true,
				Description: "Buffer days before key pair expiration for creation of a new key pair. Must be greater than or equal to `activation_buffer_days`.",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"key_algorithm": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Description: "Key algorithm to be used while creating a new key pair. If this property is unset, the key algorithm of the original key pair will be used. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint. Typically supported values are `RSA` and `EC`.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"key_size": schema.Int64Attribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
				Description: "Key size, in bits. If this property is unset, the key size of the original key pair will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint. Typically supported values are `256`, `384`, and `521` for EC keys and `1024`, `2048`, and `4096` for RSA keys.",
			},
			"key_pair_id": schema.StringAttribute{
				Required:    true,
				Description: "ID of the key pair to retrieve its rotation settings.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"signature_algorithm": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Description: "Required if the original key pair used SHA1 algorithm. If this property is unset, the default signature algorithm of the original key pair will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint. Typically supported values are `SHA256withECDSA`, `SHA384withECDSA`, and `SHA512withECDSA` for EC keys, and `SHA256withRSA`, `SHA384withRSA`, and `SHA512withRSA` for RSA keys.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"valid_days": schema.Int64Attribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
				Description: "Valid days for the new key pair to be created. If this property is unset, the validity days of the original key pair will be used.",
			},
		},
	}
	id.ToSchema(&resp.Schema)
}

func (model *keypairsSigningKeyRotationSettingsResourceModel) buildClientStruct() (*client.KeyPairRotationSettings, diag.Diagnostics) {
	result := &client.KeyPairRotationSettings{}
	// activation_buffer_days
	result.ActivationBufferDays = model.ActivationBufferDays.ValueInt64()
	// creation_buffer_days
	result.CreationBufferDays = model.CreationBufferDays.ValueInt64()
	// key_algorithm
	if !model.KeyAlgorithm.IsUnknown() {
		result.KeyAlgorithm = model.KeyAlgorithm.ValueStringPointer()
	}
	// key_size
	if !model.KeySize.IsUnknown() {
		result.KeySize = model.KeySize.ValueInt64Pointer()
	}
	// key_pair_id
	result.Id = model.KeyPairId.ValueStringPointer()
	// signature_algorithm
	if !model.SignatureAlgorithm.IsUnknown() {
		result.SignatureAlgorithm = model.SignatureAlgorithm.ValueStringPointer()
	}
	// valid_days
	if !model.ValidDays.IsUnknown() {
		result.ValidDays = model.ValidDays.ValueInt64Pointer()
	}
	return result, nil
}

func (state *keypairsSigningKeyRotationSettingsResourceModel) readClientResponse(response *client.KeyPairRotationSettings) diag.Diagnostics {
	// id
	state.Id = types.StringValue(state.KeyPairId.ValueString())
	// activation_buffer_days
	state.ActivationBufferDays = types.Int64Value(response.ActivationBufferDays)
	// creation_buffer_days
	state.CreationBufferDays = types.Int64Value(response.CreationBufferDays)
	// key_algorithm
	state.KeyAlgorithm = types.StringPointerValue(response.KeyAlgorithm)
	// key_size
	state.KeySize = types.Int64PointerValue(response.KeySize)
	// signature_algorithm
	state.SignatureAlgorithm = types.StringPointerValue(response.SignatureAlgorithm)
	// valid_days
	state.ValidDays = types.Int64PointerValue(response.ValidDays)
	return nil
}

// This resource has no specific create endpoint, only a PUT
func (r *keypairsSigningKeyRotationSettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data keypairsSigningKeyRotationSettingsResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.KeyPairsSigningAPI.UpdateRotationSettings(config.AuthContext(ctx, r.providerConfig), data.KeyPairId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.KeyPairsSigningAPI.UpdateRotationSettingsExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the keypairsSigningKeyRotationSettings", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *keypairsSigningKeyRotationSettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data keypairsSigningKeyRotationSettingsResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.KeyPairsSigningAPI.GetRotationSettings(config.AuthContext(ctx, r.providerConfig), data.KeyPairId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "keypairsSigningKeyRotationSettings", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the keypairsSigningKeyRotationSettings", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *keypairsSigningKeyRotationSettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data keypairsSigningKeyRotationSettingsResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.KeyPairsSigningAPI.UpdateRotationSettings(config.AuthContext(ctx, r.providerConfig), data.KeyPairId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.KeyPairsSigningAPI.UpdateRotationSettingsExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the keypairsSigningKeyRotationSettings", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *keypairsSigningKeyRotationSettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data keypairsSigningKeyRotationSettingsResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.KeyPairsSigningAPI.DeleteKeyPairRotationSettings(config.AuthContext(ctx, r.providerConfig), data.KeyPairId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the keypairsSigningKeyRotationSettings", err, httpResp)
	}
}

func (r *keypairsSigningKeyRotationSettingsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to key_pair_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("key_pair_id"), req, resp)
}
