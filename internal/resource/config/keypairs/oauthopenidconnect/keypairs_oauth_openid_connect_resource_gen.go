// Code generated by ping-terraform-plugin-framework-generator

package keypairsoauthopenidconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1200/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/version"
)

var (
	_ resource.Resource                = &keypairsOauthOpenidConnectResource{}
	_ resource.ResourceWithConfigure   = &keypairsOauthOpenidConnectResource{}
	_ resource.ResourceWithImportState = &keypairsOauthOpenidConnectResource{}
)

func KeypairsOauthOpenidConnectResource() resource.Resource {
	return &keypairsOauthOpenidConnectResource{}
}

type keypairsOauthOpenidConnectResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *keypairsOauthOpenidConnectResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_keypairs_oauth_openid_connect"
}

func (r *keypairsOauthOpenidConnectResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type keypairsOauthOpenidConnectResourceModel struct {
	P256activeCertRef                 types.Object `tfsdk:"p256active_cert_ref"`
	P256activeKeyId                   types.String `tfsdk:"p256active_key_id"`
	P256decryptionActiveCertRef       types.Object `tfsdk:"p256decryption_active_cert_ref"`
	P256decryptionActiveKeyId         types.String `tfsdk:"p256decryption_active_key_id"`
	P256decryptionPreviousCertRef     types.Object `tfsdk:"p256decryption_previous_cert_ref"`
	P256decryptionPreviousKeyId       types.String `tfsdk:"p256decryption_previous_key_id"`
	P256decryptionPublishX5cParameter types.Bool   `tfsdk:"p256decryption_publish_x5c_parameter"`
	P256previousCertRef               types.Object `tfsdk:"p256previous_cert_ref"`
	P256previousKeyId                 types.String `tfsdk:"p256previous_key_id"`
	P256publishX5cParameter           types.Bool   `tfsdk:"p256publish_x5c_parameter"`
	P384activeCertRef                 types.Object `tfsdk:"p384active_cert_ref"`
	P384activeKeyId                   types.String `tfsdk:"p384active_key_id"`
	P384decryptionActiveCertRef       types.Object `tfsdk:"p384decryption_active_cert_ref"`
	P384decryptionActiveKeyId         types.String `tfsdk:"p384decryption_active_key_id"`
	P384decryptionPreviousCertRef     types.Object `tfsdk:"p384decryption_previous_cert_ref"`
	P384decryptionPreviousKeyId       types.String `tfsdk:"p384decryption_previous_key_id"`
	P384decryptionPublishX5cParameter types.Bool   `tfsdk:"p384decryption_publish_x5c_parameter"`
	P384previousCertRef               types.Object `tfsdk:"p384previous_cert_ref"`
	P384previousKeyId                 types.String `tfsdk:"p384previous_key_id"`
	P384publishX5cParameter           types.Bool   `tfsdk:"p384publish_x5c_parameter"`
	P521activeCertRef                 types.Object `tfsdk:"p521active_cert_ref"`
	P521activeKeyId                   types.String `tfsdk:"p521active_key_id"`
	P521decryptionActiveCertRef       types.Object `tfsdk:"p521decryption_active_cert_ref"`
	P521decryptionActiveKeyId         types.String `tfsdk:"p521decryption_active_key_id"`
	P521decryptionPreviousCertRef     types.Object `tfsdk:"p521decryption_previous_cert_ref"`
	P521decryptionPreviousKeyId       types.String `tfsdk:"p521decryption_previous_key_id"`
	P521decryptionPublishX5cParameter types.Bool   `tfsdk:"p521decryption_publish_x5c_parameter"`
	P521previousCertRef               types.Object `tfsdk:"p521previous_cert_ref"`
	P521previousKeyId                 types.String `tfsdk:"p521previous_key_id"`
	P521publishX5cParameter           types.Bool   `tfsdk:"p521publish_x5c_parameter"`
	RsaActiveCertRef                  types.Object `tfsdk:"rsa_active_cert_ref"`
	RsaActiveKeyId                    types.String `tfsdk:"rsa_active_key_id"`
	RsaAlgorithmActiveKeyIds          types.List   `tfsdk:"rsa_algorithm_active_key_ids"`
	RsaAlgorithmPreviousKeyIds        types.List   `tfsdk:"rsa_algorithm_previous_key_ids"`
	RsaDecryptionActiveCertRef        types.Object `tfsdk:"rsa_decryption_active_cert_ref"`
	RsaDecryptionActiveKeyId          types.String `tfsdk:"rsa_decryption_active_key_id"`
	RsaDecryptionPreviousCertRef      types.Object `tfsdk:"rsa_decryption_previous_cert_ref"`
	RsaDecryptionPreviousKeyId        types.String `tfsdk:"rsa_decryption_previous_key_id"`
	RsaDecryptionPublishX5cParameter  types.Bool   `tfsdk:"rsa_decryption_publish_x5c_parameter"`
	RsaPreviousCertRef                types.Object `tfsdk:"rsa_previous_cert_ref"`
	RsaPreviousKeyId                  types.String `tfsdk:"rsa_previous_key_id"`
	RsaPublishX5cParameter            types.Bool   `tfsdk:"rsa_publish_x5c_parameter"`
	StaticJwksEnabled                 types.Bool   `tfsdk:"static_jwks_enabled"`
}

func (r *keypairsOauthOpenidConnectResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"p256active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-256 key currently active.",
			},
			"p256active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active P-256 key.",
			},
			"p256decryption_active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-256 decryption key currently active.",
			},
			"p256decryption_active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active P-256 decryption key.",
			},
			"p256decryption_previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-256 decryption key previously active.",
			},
			"p256decryption_previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active P-256 decryption key.",
			},
			"p256decryption_publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the P-256 certificate chain associated with the active key.",
			},
			"p256previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-256 key previously active.",
			},
			"p256previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active P-256 key.",
			},
			"p256publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the P-256 certificate chain associated with the active key.",
			},
			"p384active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-384 key currently active.",
			},
			"p384active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active P-384 key.",
			},
			"p384decryption_active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-384 decryption key currently active.",
			},
			"p384decryption_active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active P-384 decryption key.",
			},
			"p384decryption_previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-384 decryption key previously active.",
			},
			"p384decryption_previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active P-384 decryption key.",
			},
			"p384decryption_publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the P-384 certificate chain associated with the active key.",
			},
			"p384previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-384 key previously active.",
			},
			"p384previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active P-384 key.",
			},
			"p384publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the P-384 certificate chain associated with the active key.",
			},
			"p521active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-521 key currently active.",
			},
			"p521active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active P-521 key.",
			},
			"p521decryption_active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-521 decryption key currently active.",
			},
			"p521decryption_active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active P-521 decryption key.",
			},
			"p521decryption_previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-521 decryption key previously active.",
			},
			"p521decryption_previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active P-521 decryption key.",
			},
			"p521decryption_publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the P-521 certificate chain associated with the active key.",
			},
			"p521previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the P-521 key previously active.",
			},
			"p521previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active P-521 key.",
			},
			"p521publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the P-521 certificate chain associated with the active key.",
			},
			"rsa_active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the RSA key currently active.",
			},
			"rsa_active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active RSA key.",
			},
			"rsa_algorithm_active_key_ids": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_id": schema.StringAttribute{
							Required:    true,
							Description: "Unique key identifier.",
						},
						"rsa_alg_type": schema.StringAttribute{
							Required:    true,
							Description: "The RSA signing algorithm type. The supported RSA signing algorithm types are RS256, RS384, RS512, PS256, PS384 and PS512.",
							Validators: []validator.String{
								stringvalidator.OneOf("RS256", "RS384", "RS512", "PS256", "PS384", "PS512"),
							},
						},
					},
				},
				Optional:    true,
				Computed:    true,
				Description: "PingFederate uses the same RSA key for all RSA signing algorithms. To enable active RSA JWK entry to have unique single valued ''alg'' parameter, use this list to set a key identifier for each RSA algorithm (RS256, RS384, RS512, PS256, PS384 and PS512).",
			},
			"rsa_algorithm_previous_key_ids": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_id": schema.StringAttribute{
							Required:    true,
							Description: "Unique key identifier.",
						},
						"rsa_alg_type": schema.StringAttribute{
							Required:    true,
							Description: "The RSA signing algorithm type. The supported RSA signing algorithm types are RS256, RS384, RS512, PS256, PS384 and PS512.",
							Validators: []validator.String{
								stringvalidator.OneOf("RS256", "RS384", "RS512", "PS256", "PS384", "PS512"),
							},
						},
					},
				},
				Optional:    true,
				Computed:    true,
				Description: "PingFederate uses the same RSA key for all RSA signing algorithms. To enable previously active RSA JWK entry to have unique single valued ''alg'' parameter, use this list to set a key identifier for each RSA algorithm (RS256, RS384, RS512, PS256, PS384 and PS512).",
			},
			"rsa_decryption_active_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the RSA decryption key currently active.",
			},
			"rsa_decryption_active_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for currently active RSA decryption key.",
			},
			"rsa_decryption_previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the RSA decryption key previously active.",
			},
			"rsa_decryption_previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active RSA decryption key.",
			},
			"rsa_decryption_publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the RSA certificate chain associated with the active key.",
			},
			"rsa_previous_cert_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
					},
				},
				Optional:    true,
				Description: "Reference to the RSA key previously active.",
			},
			"rsa_previous_key_id": schema.StringAttribute{
				Optional:    true,
				Description: "Key Id for previously active RSA key.",
			},
			"rsa_publish_x5c_parameter": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Enable publishing of the RSA certificate chain associated with the active key.",
			},
			"static_jwks_enabled": schema.BoolAttribute{
				Required:    true,
				Description: "Enable static keys.",
			},
		},
	}
}

func (r *keypairsOauthOpenidConnectResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	// Compare to version 12.0.1 of PF
	compare, err := version.Compare(r.providerConfig.ProductVersion, version.PingFederate1201)
	if err != nil {
		resp.Diagnostics.AddError("Failed to compare PingFederate versions", err.Error())
		return
	}
	pfVersionAtLeast1201 := compare >= 0
	var plan *keypairsOauthOpenidConnectResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if plan == nil {
		return
	}
	// If any of these fields are set by the user and the PF version is not new enough, throw an error
	if !pfVersionAtLeast1201 {
		if internaltypes.IsDefined(plan.P256activeKeyId) {
			version.AddUnsupportedAttributeError("p256active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P256decryptionActiveKeyId) {
			version.AddUnsupportedAttributeError("p256decryption_active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P256decryptionPreviousKeyId) {
			version.AddUnsupportedAttributeError("p256decryption_previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P256previousKeyId) {
			version.AddUnsupportedAttributeError("p256previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P384activeKeyId) {
			version.AddUnsupportedAttributeError("p384active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P384decryptionActiveKeyId) {
			version.AddUnsupportedAttributeError("p384decryption_active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P384decryptionPreviousKeyId) {
			version.AddUnsupportedAttributeError("p384decryption_previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P384previousKeyId) {
			version.AddUnsupportedAttributeError("p384previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P521activeKeyId) {
			version.AddUnsupportedAttributeError("p521active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P521decryptionActiveKeyId) {
			version.AddUnsupportedAttributeError("p521decryption_active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P521decryptionPreviousKeyId) {
			version.AddUnsupportedAttributeError("p521decryption_previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.P521previousKeyId) {
			version.AddUnsupportedAttributeError("p521previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.RsaActiveKeyId) {
			version.AddUnsupportedAttributeError("rsa_active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.RsaAlgorithmActiveKeyIds) {
			version.AddUnsupportedAttributeError("rsa_algorithm_active_key_ids",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.RsaAlgorithmPreviousKeyIds) {
			version.AddUnsupportedAttributeError("rsa_algorithm_previous_key_ids",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.RsaDecryptionActiveKeyId) {
			version.AddUnsupportedAttributeError("rsa_decryption_active_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.RsaDecryptionPreviousKeyId) {
			version.AddUnsupportedAttributeError("rsa_decryption_previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
		if internaltypes.IsDefined(plan.RsaPreviousKeyId) {
			version.AddUnsupportedAttributeError("rsa_previous_key_id",
				r.providerConfig.ProductVersion, version.PingFederate1201, &resp.Diagnostics)
		}
	}
	// Set default values that can't be set in schema
	r.setConditionalDefaults(ctx, pfVersionAtLeast1201, plan, resp)
}

func (model *keypairsOauthOpenidConnectResourceModel) buildClientStruct(versionAtLeast1201 bool) *client.OAuthOidcKeysSettings {
	result := &client.OAuthOidcKeysSettings{}
	// p256active_cert_ref
	if !model.P256activeCertRef.IsNull() {
		p256activeCertRefValue := &client.ResourceLink{}
		p256activeCertRefAttrs := model.P256activeCertRef.Attributes()
		p256activeCertRefValue.Id = p256activeCertRefAttrs["id"].(types.String).ValueString()
		result.P256ActiveCertRef = p256activeCertRefValue
	}

	// p256active_key_id
	result.P256ActiveKeyId = model.P256activeKeyId.ValueStringPointer()
	// p256decryption_active_cert_ref
	if !model.P256decryptionActiveCertRef.IsNull() {
		p256decryptionActiveCertRefValue := &client.ResourceLink{}
		p256decryptionActiveCertRefAttrs := model.P256decryptionActiveCertRef.Attributes()
		p256decryptionActiveCertRefValue.Id = p256decryptionActiveCertRefAttrs["id"].(types.String).ValueString()
		result.P256DecryptionActiveCertRef = p256decryptionActiveCertRefValue
	}

	// p256decryption_active_key_id
	result.P256DecryptionActiveKeyId = model.P256decryptionActiveKeyId.ValueStringPointer()
	// p256decryption_previous_cert_ref
	if !model.P256decryptionPreviousCertRef.IsNull() {
		p256decryptionPreviousCertRefValue := &client.ResourceLink{}
		p256decryptionPreviousCertRefAttrs := model.P256decryptionPreviousCertRef.Attributes()
		p256decryptionPreviousCertRefValue.Id = p256decryptionPreviousCertRefAttrs["id"].(types.String).ValueString()
		result.P256DecryptionPreviousCertRef = p256decryptionPreviousCertRefValue
	}

	// p256decryption_previous_key_id
	result.P256DecryptionPreviousKeyId = model.P256decryptionPreviousKeyId.ValueStringPointer()
	// p256decryption_publish_x5c_parameter
	result.P256DecryptionPublishX5cParameter = model.P256decryptionPublishX5cParameter.ValueBoolPointer()
	// p256previous_cert_ref
	if !model.P256previousCertRef.IsNull() {
		p256previousCertRefValue := &client.ResourceLink{}
		p256previousCertRefAttrs := model.P256previousCertRef.Attributes()
		p256previousCertRefValue.Id = p256previousCertRefAttrs["id"].(types.String).ValueString()
		result.P256PreviousCertRef = p256previousCertRefValue
	}

	// p256previous_key_id
	result.P256PreviousKeyId = model.P256previousKeyId.ValueStringPointer()
	// p256publish_x5c_parameter
	result.P256PublishX5cParameter = model.P256publishX5cParameter.ValueBoolPointer()
	// p384active_cert_ref
	if !model.P384activeCertRef.IsNull() {
		p384activeCertRefValue := &client.ResourceLink{}
		p384activeCertRefAttrs := model.P384activeCertRef.Attributes()
		p384activeCertRefValue.Id = p384activeCertRefAttrs["id"].(types.String).ValueString()
		result.P384ActiveCertRef = p384activeCertRefValue
	}

	// p384active_key_id
	result.P384ActiveKeyId = model.P384activeKeyId.ValueStringPointer()
	// p384decryption_active_cert_ref
	if !model.P384decryptionActiveCertRef.IsNull() {
		p384decryptionActiveCertRefValue := &client.ResourceLink{}
		p384decryptionActiveCertRefAttrs := model.P384decryptionActiveCertRef.Attributes()
		p384decryptionActiveCertRefValue.Id = p384decryptionActiveCertRefAttrs["id"].(types.String).ValueString()
		result.P384DecryptionActiveCertRef = p384decryptionActiveCertRefValue
	}

	// p384decryption_active_key_id
	result.P384DecryptionActiveKeyId = model.P384decryptionActiveKeyId.ValueStringPointer()
	// p384decryption_previous_cert_ref
	if !model.P384decryptionPreviousCertRef.IsNull() {
		p384decryptionPreviousCertRefValue := &client.ResourceLink{}
		p384decryptionPreviousCertRefAttrs := model.P384decryptionPreviousCertRef.Attributes()
		p384decryptionPreviousCertRefValue.Id = p384decryptionPreviousCertRefAttrs["id"].(types.String).ValueString()
		result.P384DecryptionPreviousCertRef = p384decryptionPreviousCertRefValue
	}

	// p384decryption_previous_key_id
	result.P384DecryptionPreviousKeyId = model.P384decryptionPreviousKeyId.ValueStringPointer()
	// p384decryption_publish_x5c_parameter
	result.P384DecryptionPublishX5cParameter = model.P384decryptionPublishX5cParameter.ValueBoolPointer()
	// p384previous_cert_ref
	if !model.P384previousCertRef.IsNull() {
		p384previousCertRefValue := &client.ResourceLink{}
		p384previousCertRefAttrs := model.P384previousCertRef.Attributes()
		p384previousCertRefValue.Id = p384previousCertRefAttrs["id"].(types.String).ValueString()
		result.P384PreviousCertRef = p384previousCertRefValue
	}

	// p384previous_key_id
	result.P384PreviousKeyId = model.P384previousKeyId.ValueStringPointer()
	// p384publish_x5c_parameter
	result.P384PublishX5cParameter = model.P384publishX5cParameter.ValueBoolPointer()
	// p521active_cert_ref
	if !model.P521activeCertRef.IsNull() {
		p521activeCertRefValue := &client.ResourceLink{}
		p521activeCertRefAttrs := model.P521activeCertRef.Attributes()
		p521activeCertRefValue.Id = p521activeCertRefAttrs["id"].(types.String).ValueString()
		result.P521ActiveCertRef = p521activeCertRefValue
	}

	// p521active_key_id
	result.P521ActiveKeyId = model.P521activeKeyId.ValueStringPointer()
	// p521decryption_active_cert_ref
	if !model.P521decryptionActiveCertRef.IsNull() {
		p521decryptionActiveCertRefValue := &client.ResourceLink{}
		p521decryptionActiveCertRefAttrs := model.P521decryptionActiveCertRef.Attributes()
		p521decryptionActiveCertRefValue.Id = p521decryptionActiveCertRefAttrs["id"].(types.String).ValueString()
		result.P521DecryptionActiveCertRef = p521decryptionActiveCertRefValue
	}

	// p521decryption_active_key_id
	result.P521DecryptionActiveKeyId = model.P521decryptionActiveKeyId.ValueStringPointer()
	// p521decryption_previous_cert_ref
	if !model.P521decryptionPreviousCertRef.IsNull() {
		p521decryptionPreviousCertRefValue := &client.ResourceLink{}
		p521decryptionPreviousCertRefAttrs := model.P521decryptionPreviousCertRef.Attributes()
		p521decryptionPreviousCertRefValue.Id = p521decryptionPreviousCertRefAttrs["id"].(types.String).ValueString()
		result.P521DecryptionPreviousCertRef = p521decryptionPreviousCertRefValue
	}

	// p521decryption_previous_key_id
	result.P521DecryptionPreviousKeyId = model.P521decryptionPreviousKeyId.ValueStringPointer()
	// p521decryption_publish_x5c_parameter
	result.P521DecryptionPublishX5cParameter = model.P521decryptionPublishX5cParameter.ValueBoolPointer()
	// p521previous_cert_ref
	if !model.P521previousCertRef.IsNull() {
		p521previousCertRefValue := &client.ResourceLink{}
		p521previousCertRefAttrs := model.P521previousCertRef.Attributes()
		p521previousCertRefValue.Id = p521previousCertRefAttrs["id"].(types.String).ValueString()
		result.P521PreviousCertRef = p521previousCertRefValue
	}

	// p521previous_key_id
	result.P521PreviousKeyId = model.P521previousKeyId.ValueStringPointer()
	// p521publish_x5c_parameter
	result.P521PublishX5cParameter = model.P521publishX5cParameter.ValueBoolPointer()
	// rsa_active_cert_ref
	if !model.RsaActiveCertRef.IsNull() {
		rsaActiveCertRefValue := &client.ResourceLink{}
		rsaActiveCertRefAttrs := model.RsaActiveCertRef.Attributes()
		rsaActiveCertRefValue.Id = rsaActiveCertRefAttrs["id"].(types.String).ValueString()
		result.RsaActiveCertRef = rsaActiveCertRefValue
	}

	// rsa_active_key_id
	result.RsaActiveKeyId = model.RsaActiveKeyId.ValueStringPointer()
	// Key ids are added in version 12.0.1
	if versionAtLeast1201 {
		// rsa_algorithm_active_key_ids
		result.RsaAlgorithmActiveKeyIds = []client.RsaAlgKeyId{}
		for _, rsaAlgorithmActiveKeyIdsElement := range model.RsaAlgorithmActiveKeyIds.Elements() {
			rsaAlgorithmActiveKeyIdsValue := client.RsaAlgKeyId{}
			rsaAlgorithmActiveKeyIdsAttrs := rsaAlgorithmActiveKeyIdsElement.(types.Object).Attributes()
			rsaAlgorithmActiveKeyIdsValue.KeyId = rsaAlgorithmActiveKeyIdsAttrs["key_id"].(types.String).ValueString()
			rsaAlgorithmActiveKeyIdsValue.RsaAlgType = rsaAlgorithmActiveKeyIdsAttrs["rsa_alg_type"].(types.String).ValueString()
			result.RsaAlgorithmActiveKeyIds = append(result.RsaAlgorithmActiveKeyIds, rsaAlgorithmActiveKeyIdsValue)
		}

		// rsa_algorithm_previous_key_ids
		result.RsaAlgorithmPreviousKeyIds = []client.RsaAlgKeyId{}
		for _, rsaAlgorithmPreviousKeyIdsElement := range model.RsaAlgorithmPreviousKeyIds.Elements() {
			rsaAlgorithmPreviousKeyIdsValue := client.RsaAlgKeyId{}
			rsaAlgorithmPreviousKeyIdsAttrs := rsaAlgorithmPreviousKeyIdsElement.(types.Object).Attributes()
			rsaAlgorithmPreviousKeyIdsValue.KeyId = rsaAlgorithmPreviousKeyIdsAttrs["key_id"].(types.String).ValueString()
			rsaAlgorithmPreviousKeyIdsValue.RsaAlgType = rsaAlgorithmPreviousKeyIdsAttrs["rsa_alg_type"].(types.String).ValueString()
			result.RsaAlgorithmPreviousKeyIds = append(result.RsaAlgorithmPreviousKeyIds, rsaAlgorithmPreviousKeyIdsValue)
		}
	}

	// rsa_decryption_active_cert_ref
	if !model.RsaDecryptionActiveCertRef.IsNull() {
		rsaDecryptionActiveCertRefValue := &client.ResourceLink{}
		rsaDecryptionActiveCertRefAttrs := model.RsaDecryptionActiveCertRef.Attributes()
		rsaDecryptionActiveCertRefValue.Id = rsaDecryptionActiveCertRefAttrs["id"].(types.String).ValueString()
		result.RsaDecryptionActiveCertRef = rsaDecryptionActiveCertRefValue
	}

	// rsa_decryption_active_key_id
	result.RsaDecryptionActiveKeyId = model.RsaDecryptionActiveKeyId.ValueStringPointer()
	// rsa_decryption_previous_cert_ref
	if !model.RsaDecryptionPreviousCertRef.IsNull() {
		rsaDecryptionPreviousCertRefValue := &client.ResourceLink{}
		rsaDecryptionPreviousCertRefAttrs := model.RsaDecryptionPreviousCertRef.Attributes()
		rsaDecryptionPreviousCertRefValue.Id = rsaDecryptionPreviousCertRefAttrs["id"].(types.String).ValueString()
		result.RsaDecryptionPreviousCertRef = rsaDecryptionPreviousCertRefValue
	}

	// rsa_decryption_previous_key_id
	result.RsaDecryptionPreviousKeyId = model.RsaDecryptionPreviousKeyId.ValueStringPointer()
	// rsa_decryption_publish_x5c_parameter
	result.RsaDecryptionPublishX5cParameter = model.RsaDecryptionPublishX5cParameter.ValueBoolPointer()
	// rsa_previous_cert_ref
	if !model.RsaPreviousCertRef.IsNull() {
		rsaPreviousCertRefValue := &client.ResourceLink{}
		rsaPreviousCertRefAttrs := model.RsaPreviousCertRef.Attributes()
		rsaPreviousCertRefValue.Id = rsaPreviousCertRefAttrs["id"].(types.String).ValueString()
		result.RsaPreviousCertRef = rsaPreviousCertRefValue
	}

	// rsa_previous_key_id
	result.RsaPreviousKeyId = model.RsaPreviousKeyId.ValueStringPointer()
	// rsa_publish_x5c_parameter
	result.RsaPublishX5cParameter = model.RsaPublishX5cParameter.ValueBoolPointer()
	// static_jwks_enabled
	result.StaticJwksEnabled = model.StaticJwksEnabled.ValueBool()
	return result
}

func (state *keypairsOauthOpenidConnectResourceModel) readClientResponse(response *client.OAuthOidcKeysSettings, versionAtLeast1201 bool) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// p256active_cert_ref
	p256activeCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p256activeCertRefValue types.Object
	if response.P256ActiveCertRef == nil {
		p256activeCertRefValue = types.ObjectNull(p256activeCertRefAttrTypes)
	} else {
		p256activeCertRefValue, diags = types.ObjectValue(p256activeCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P256ActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P256activeCertRef = p256activeCertRefValue
	// p256active_key_id
	state.P256activeKeyId = types.StringPointerValue(response.P256ActiveKeyId)
	// p256decryption_active_cert_ref
	p256decryptionActiveCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p256decryptionActiveCertRefValue types.Object
	if response.P256DecryptionActiveCertRef == nil {
		p256decryptionActiveCertRefValue = types.ObjectNull(p256decryptionActiveCertRefAttrTypes)
	} else {
		p256decryptionActiveCertRefValue, diags = types.ObjectValue(p256decryptionActiveCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P256DecryptionActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P256decryptionActiveCertRef = p256decryptionActiveCertRefValue
	// p256decryption_active_key_id
	state.P256decryptionActiveKeyId = types.StringPointerValue(response.P256DecryptionActiveKeyId)
	// p256decryption_previous_cert_ref
	p256decryptionPreviousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p256decryptionPreviousCertRefValue types.Object
	if response.P256DecryptionPreviousCertRef == nil {
		p256decryptionPreviousCertRefValue = types.ObjectNull(p256decryptionPreviousCertRefAttrTypes)
	} else {
		p256decryptionPreviousCertRefValue, diags = types.ObjectValue(p256decryptionPreviousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P256DecryptionPreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P256decryptionPreviousCertRef = p256decryptionPreviousCertRefValue
	// p256decryption_previous_key_id
	state.P256decryptionPreviousKeyId = types.StringPointerValue(response.P256DecryptionPreviousKeyId)
	// p256decryption_publish_x5c_parameter
	state.P256decryptionPublishX5cParameter = types.BoolPointerValue(response.P256DecryptionPublishX5cParameter)
	// p256previous_cert_ref
	p256previousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p256previousCertRefValue types.Object
	if response.P256PreviousCertRef == nil {
		p256previousCertRefValue = types.ObjectNull(p256previousCertRefAttrTypes)
	} else {
		p256previousCertRefValue, diags = types.ObjectValue(p256previousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P256PreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P256previousCertRef = p256previousCertRefValue
	// p256previous_key_id
	state.P256previousKeyId = types.StringPointerValue(response.P256PreviousKeyId)
	// p256publish_x5c_parameter
	state.P256publishX5cParameter = types.BoolPointerValue(response.P256PublishX5cParameter)
	// p384active_cert_ref
	p384activeCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p384activeCertRefValue types.Object
	if response.P384ActiveCertRef == nil {
		p384activeCertRefValue = types.ObjectNull(p384activeCertRefAttrTypes)
	} else {
		p384activeCertRefValue, diags = types.ObjectValue(p384activeCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P384ActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P384activeCertRef = p384activeCertRefValue
	// p384active_key_id
	state.P384activeKeyId = types.StringPointerValue(response.P384ActiveKeyId)
	// p384decryption_active_cert_ref
	p384decryptionActiveCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p384decryptionActiveCertRefValue types.Object
	if response.P384DecryptionActiveCertRef == nil {
		p384decryptionActiveCertRefValue = types.ObjectNull(p384decryptionActiveCertRefAttrTypes)
	} else {
		p384decryptionActiveCertRefValue, diags = types.ObjectValue(p384decryptionActiveCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P384DecryptionActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P384decryptionActiveCertRef = p384decryptionActiveCertRefValue
	// p384decryption_active_key_id
	state.P384decryptionActiveKeyId = types.StringPointerValue(response.P384DecryptionActiveKeyId)
	// p384decryption_previous_cert_ref
	p384decryptionPreviousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p384decryptionPreviousCertRefValue types.Object
	if response.P384DecryptionPreviousCertRef == nil {
		p384decryptionPreviousCertRefValue = types.ObjectNull(p384decryptionPreviousCertRefAttrTypes)
	} else {
		p384decryptionPreviousCertRefValue, diags = types.ObjectValue(p384decryptionPreviousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P384DecryptionPreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P384decryptionPreviousCertRef = p384decryptionPreviousCertRefValue
	// p384decryption_previous_key_id
	state.P384decryptionPreviousKeyId = types.StringPointerValue(response.P384DecryptionPreviousKeyId)
	// p384decryption_publish_x5c_parameter
	state.P384decryptionPublishX5cParameter = types.BoolPointerValue(response.P384DecryptionPublishX5cParameter)
	// p384previous_cert_ref
	p384previousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p384previousCertRefValue types.Object
	if response.P384PreviousCertRef == nil {
		p384previousCertRefValue = types.ObjectNull(p384previousCertRefAttrTypes)
	} else {
		p384previousCertRefValue, diags = types.ObjectValue(p384previousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P384PreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P384previousCertRef = p384previousCertRefValue
	// p384previous_key_id
	state.P384previousKeyId = types.StringPointerValue(response.P384PreviousKeyId)
	// p384publish_x5c_parameter
	state.P384publishX5cParameter = types.BoolPointerValue(response.P384PublishX5cParameter)
	// p521active_cert_ref
	p521activeCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p521activeCertRefValue types.Object
	if response.P521ActiveCertRef == nil {
		p521activeCertRefValue = types.ObjectNull(p521activeCertRefAttrTypes)
	} else {
		p521activeCertRefValue, diags = types.ObjectValue(p521activeCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P521ActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P521activeCertRef = p521activeCertRefValue
	// p521active_key_id
	state.P521activeKeyId = types.StringPointerValue(response.P521ActiveKeyId)
	// p521decryption_active_cert_ref
	p521decryptionActiveCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p521decryptionActiveCertRefValue types.Object
	if response.P521DecryptionActiveCertRef == nil {
		p521decryptionActiveCertRefValue = types.ObjectNull(p521decryptionActiveCertRefAttrTypes)
	} else {
		p521decryptionActiveCertRefValue, diags = types.ObjectValue(p521decryptionActiveCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P521DecryptionActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P521decryptionActiveCertRef = p521decryptionActiveCertRefValue
	// p521decryption_active_key_id
	state.P521decryptionActiveKeyId = types.StringPointerValue(response.P521DecryptionActiveKeyId)
	// p521decryption_previous_cert_ref
	p521decryptionPreviousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p521decryptionPreviousCertRefValue types.Object
	if response.P521DecryptionPreviousCertRef == nil {
		p521decryptionPreviousCertRefValue = types.ObjectNull(p521decryptionPreviousCertRefAttrTypes)
	} else {
		p521decryptionPreviousCertRefValue, diags = types.ObjectValue(p521decryptionPreviousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P521DecryptionPreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P521decryptionPreviousCertRef = p521decryptionPreviousCertRefValue
	// p521decryption_previous_key_id
	state.P521decryptionPreviousKeyId = types.StringPointerValue(response.P521DecryptionPreviousKeyId)
	// p521decryption_publish_x5c_parameter
	state.P521decryptionPublishX5cParameter = types.BoolPointerValue(response.P521DecryptionPublishX5cParameter)
	// p521previous_cert_ref
	p521previousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var p521previousCertRefValue types.Object
	if response.P521PreviousCertRef == nil {
		p521previousCertRefValue = types.ObjectNull(p521previousCertRefAttrTypes)
	} else {
		p521previousCertRefValue, diags = types.ObjectValue(p521previousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.P521PreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.P521previousCertRef = p521previousCertRefValue
	// p521previous_key_id
	state.P521previousKeyId = types.StringPointerValue(response.P521PreviousKeyId)
	// p521publish_x5c_parameter
	state.P521publishX5cParameter = types.BoolPointerValue(response.P521PublishX5cParameter)
	// rsa_active_cert_ref
	rsaActiveCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var rsaActiveCertRefValue types.Object
	if response.RsaActiveCertRef == nil {
		rsaActiveCertRefValue = types.ObjectNull(rsaActiveCertRefAttrTypes)
	} else {
		rsaActiveCertRefValue, diags = types.ObjectValue(rsaActiveCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.RsaActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.RsaActiveCertRef = rsaActiveCertRefValue
	// rsa_active_key_id
	state.RsaActiveKeyId = types.StringPointerValue(response.RsaActiveKeyId)
	// rsa_algorithm_active_key_ids
	rsaAlgorithmActiveKeyIdsAttrTypes := map[string]attr.Type{
		"key_id":       types.StringType,
		"rsa_alg_type": types.StringType,
	}
	rsaAlgorithmActiveKeyIdsElementType := types.ObjectType{AttrTypes: rsaAlgorithmActiveKeyIdsAttrTypes}
	var rsaAlgorithmActiveKeyIdsValue types.List
	if versionAtLeast1201 {
		var rsaAlgorithmActiveKeyIdsValues []attr.Value
		for _, rsaAlgorithmActiveKeyIdsResponseValue := range response.RsaAlgorithmActiveKeyIds {
			rsaAlgorithmActiveKeyIdsValue, diags := types.ObjectValue(rsaAlgorithmActiveKeyIdsAttrTypes, map[string]attr.Value{
				"key_id":       types.StringValue(rsaAlgorithmActiveKeyIdsResponseValue.KeyId),
				"rsa_alg_type": types.StringValue(rsaAlgorithmActiveKeyIdsResponseValue.RsaAlgType),
			})
			respDiags.Append(diags...)
			rsaAlgorithmActiveKeyIdsValues = append(rsaAlgorithmActiveKeyIdsValues, rsaAlgorithmActiveKeyIdsValue)
		}
		rsaAlgorithmActiveKeyIdsValue, diags = types.ListValue(rsaAlgorithmActiveKeyIdsElementType, rsaAlgorithmActiveKeyIdsValues)
		respDiags.Append(diags...)
	} else {
		rsaAlgorithmActiveKeyIdsValue = types.ListNull(rsaAlgorithmActiveKeyIdsElementType)
	}

	state.RsaAlgorithmActiveKeyIds = rsaAlgorithmActiveKeyIdsValue
	// rsa_algorithm_previous_key_ids
	rsaAlgorithmPreviousKeyIdsAttrTypes := map[string]attr.Type{
		"key_id":       types.StringType,
		"rsa_alg_type": types.StringType,
	}
	rsaAlgorithmPreviousKeyIdsElementType := types.ObjectType{AttrTypes: rsaAlgorithmPreviousKeyIdsAttrTypes}
	var rsaAlgorithmPreviousKeyIdsValue types.List
	if versionAtLeast1201 {
		var rsaAlgorithmPreviousKeyIdsValues []attr.Value
		for _, rsaAlgorithmPreviousKeyIdsResponseValue := range response.RsaAlgorithmPreviousKeyIds {
			rsaAlgorithmPreviousKeyIdsValue, diags := types.ObjectValue(rsaAlgorithmPreviousKeyIdsAttrTypes, map[string]attr.Value{
				"key_id":       types.StringValue(rsaAlgorithmPreviousKeyIdsResponseValue.KeyId),
				"rsa_alg_type": types.StringValue(rsaAlgorithmPreviousKeyIdsResponseValue.RsaAlgType),
			})
			respDiags.Append(diags...)
			rsaAlgorithmPreviousKeyIdsValues = append(rsaAlgorithmPreviousKeyIdsValues, rsaAlgorithmPreviousKeyIdsValue)
		}
		rsaAlgorithmPreviousKeyIdsValue, diags = types.ListValue(rsaAlgorithmPreviousKeyIdsElementType, rsaAlgorithmPreviousKeyIdsValues)
		respDiags.Append(diags...)
	} else {
		rsaAlgorithmPreviousKeyIdsValue = types.ListNull(rsaAlgorithmPreviousKeyIdsElementType)
	}

	state.RsaAlgorithmPreviousKeyIds = rsaAlgorithmPreviousKeyIdsValue
	// rsa_decryption_active_cert_ref
	rsaDecryptionActiveCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var rsaDecryptionActiveCertRefValue types.Object
	if response.RsaDecryptionActiveCertRef == nil {
		rsaDecryptionActiveCertRefValue = types.ObjectNull(rsaDecryptionActiveCertRefAttrTypes)
	} else {
		rsaDecryptionActiveCertRefValue, diags = types.ObjectValue(rsaDecryptionActiveCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.RsaDecryptionActiveCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.RsaDecryptionActiveCertRef = rsaDecryptionActiveCertRefValue
	// rsa_decryption_active_key_id
	state.RsaDecryptionActiveKeyId = types.StringPointerValue(response.RsaDecryptionActiveKeyId)
	// rsa_decryption_previous_cert_ref
	rsaDecryptionPreviousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var rsaDecryptionPreviousCertRefValue types.Object
	if response.RsaDecryptionPreviousCertRef == nil {
		rsaDecryptionPreviousCertRefValue = types.ObjectNull(rsaDecryptionPreviousCertRefAttrTypes)
	} else {
		rsaDecryptionPreviousCertRefValue, diags = types.ObjectValue(rsaDecryptionPreviousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.RsaDecryptionPreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.RsaDecryptionPreviousCertRef = rsaDecryptionPreviousCertRefValue
	// rsa_decryption_previous_key_id
	state.RsaDecryptionPreviousKeyId = types.StringPointerValue(response.RsaDecryptionPreviousKeyId)
	// rsa_decryption_publish_x5c_parameter
	state.RsaDecryptionPublishX5cParameter = types.BoolPointerValue(response.RsaDecryptionPublishX5cParameter)
	// rsa_previous_cert_ref
	rsaPreviousCertRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var rsaPreviousCertRefValue types.Object
	if response.RsaPreviousCertRef == nil {
		rsaPreviousCertRefValue = types.ObjectNull(rsaPreviousCertRefAttrTypes)
	} else {
		rsaPreviousCertRefValue, diags = types.ObjectValue(rsaPreviousCertRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.RsaPreviousCertRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.RsaPreviousCertRef = rsaPreviousCertRefValue
	// rsa_previous_key_id
	state.RsaPreviousKeyId = types.StringPointerValue(response.RsaPreviousKeyId)
	// rsa_publish_x5c_parameter
	state.RsaPublishX5cParameter = types.BoolPointerValue(response.RsaPublishX5cParameter)
	// static_jwks_enabled
	state.StaticJwksEnabled = types.BoolValue(response.StaticJwksEnabled)
	return respDiags
}

func (r *keypairsOauthOpenidConnectResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data keypairsOauthOpenidConnectResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	compare, err := version.Compare(r.providerConfig.ProductVersion, version.PingFederate1201)
	if err != nil {
		resp.Diagnostics.AddError("Failed to compare PingFederate versions", err.Error())
		return
	}
	pfVersionAtLeast1201 := compare >= 0
	clientData := data.buildClientStruct(pfVersionAtLeast1201)
	apiUpdateRequest := r.apiClient.KeyPairsOauthOpenIdConnectAPI.UpdateOAuthOidcKeysSettings(config.AuthContext(ctx, r.providerConfig))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.KeyPairsOauthOpenIdConnectAPI.UpdateOAuthOidcKeysSettingsExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the keypairsOauthOpenidConnect", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData, pfVersionAtLeast1201)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *keypairsOauthOpenidConnectResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data keypairsOauthOpenidConnectResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.KeyPairsOauthOpenIdConnectAPI.GetOauthOidcKeysSettings(config.AuthContext(ctx, r.providerConfig)).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.ReportHttpErrorAsWarning(ctx, &resp.Diagnostics, "An error occurred while reading the keypairsOauthOpenidConnect", err, httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the keypairsOauthOpenidConnect", err, httpResp)
		}
		return
	}

	// Read response into the model
	compare, err := version.Compare(r.providerConfig.ProductVersion, version.PingFederate1201)
	if err != nil {
		resp.Diagnostics.AddError("Failed to compare PingFederate versions", err.Error())
		return
	}
	pfVersionAtLeast1201 := compare >= 0
	resp.Diagnostics.Append(data.readClientResponse(responseData, pfVersionAtLeast1201)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *keypairsOauthOpenidConnectResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data keypairsOauthOpenidConnectResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	compare, err := version.Compare(r.providerConfig.ProductVersion, version.PingFederate1201)
	if err != nil {
		resp.Diagnostics.AddError("Failed to compare PingFederate versions", err.Error())
		return
	}
	pfVersionAtLeast1201 := compare >= 0
	clientData := data.buildClientStruct(pfVersionAtLeast1201)
	apiUpdateRequest := r.apiClient.KeyPairsOauthOpenIdConnectAPI.UpdateOAuthOidcKeysSettings(config.AuthContext(ctx, r.providerConfig))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.KeyPairsOauthOpenIdConnectAPI.UpdateOAuthOidcKeysSettingsExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the keypairsOauthOpenidConnect", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData, pfVersionAtLeast1201)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *keypairsOauthOpenidConnectResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is singleton, so it can't be deleted from the service. Deleting this resource will remove it from Terraform state.
}

func (r *keypairsOauthOpenidConnectResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// This resource has no identifier attributes, so the value passed in here doesn't matter. Just return an empty state struct.
	emptyState := keypairsOauthOpenidConnectResourceModel{}
	emptyState.setNullObjectValues()
	resp.Diagnostics.Append(resp.State.Set(ctx, &emptyState)...)
}
