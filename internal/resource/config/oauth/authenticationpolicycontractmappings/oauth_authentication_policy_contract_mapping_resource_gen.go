// Code generated by ping-terraform-plugin-framework-generator

package oauthauthenticationpolicycontractmappings

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributecontractfulfillment"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/id"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &oauthAuthenticationPolicyContractMappingResource{}
	_ resource.ResourceWithConfigure   = &oauthAuthenticationPolicyContractMappingResource{}
	_ resource.ResourceWithImportState = &oauthAuthenticationPolicyContractMappingResource{}
)

func OauthAuthenticationPolicyContractMappingResource() resource.Resource {
	return &oauthAuthenticationPolicyContractMappingResource{}
}

type oauthAuthenticationPolicyContractMappingResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *oauthAuthenticationPolicyContractMappingResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oauth_authentication_policy_contract_mapping"
}

func (r *oauthAuthenticationPolicyContractMappingResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type oauthAuthenticationPolicyContractMappingResourceModel struct {
	AttributeContractFulfillment    types.Map    `tfsdk:"attribute_contract_fulfillment"`
	AttributeSources                types.Set    `tfsdk:"attribute_sources"`
	AuthenticationPolicyContractRef types.Object `tfsdk:"authentication_policy_contract_ref"`
	Id                              types.String `tfsdk:"id"`
	IssuanceCriteria                types.Object `tfsdk:"issuance_criteria"`
	MappingId                       types.String `tfsdk:"mapping_id"`
}

func (r *oauthAuthenticationPolicyContractMappingResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage authentication policy contract to persistent grant mappings.",
		Attributes: map[string]schema.Attribute{
			"attribute_contract_fulfillment": attributecontractfulfillment.ToSchemaWithSuffix(true, false, false, " Map values `USER_NAME` and `USER_KEY` are required.  If extended attributes are configured on the persistent grant contract (for example, using the `pingfederate_oauth_auth_server_settings` resource), these must also be configured as map keys."),
			"attribute_sources":              attributesources.ToSchema(0, false),
			"authentication_policy_contract_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				Required:    true,
				Description: "Reference to the associated authentication policy contract. The reference cannot be changed after the mapping has been created.",
			},
			"issuance_criteria": issuancecriteria.ToSchema(),
			"mapping_id": schema.StringAttribute{
				Computed:    true,
				Optional:    false,
				Description: "The ID of the authentication policy contract to persistent grant mapping.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
	id.ToSchema(&resp.Schema)
}

func (model *oauthAuthenticationPolicyContractMappingResourceModel) buildClientStruct() (*client.ApcToPersistentGrantMapping, error) {
	result := &client.ApcToPersistentGrantMapping{}
	var err error
	// attribute_contract_fulfillment
	result.AttributeContractFulfillment, err = attributecontractfulfillment.ClientStruct(model.AttributeContractFulfillment)
	if err != nil {
		return nil, err
	}

	// attribute_sources
	result.AttributeSources, err = attributesources.ClientStruct(model.AttributeSources)
	if err != nil {
		return nil, err
	}

	// authentication_policy_contract_ref
	authenticationPolicyContractRefValue := client.ResourceLink{}
	authenticationPolicyContractRefAttrs := model.AuthenticationPolicyContractRef.Attributes()
	authenticationPolicyContractRefValue.Id = authenticationPolicyContractRefAttrs["id"].(types.String).ValueString()
	result.AuthenticationPolicyContractRef = authenticationPolicyContractRefValue

	// issuance_criteria
	result.IssuanceCriteria, err = issuancecriteria.ClientStruct(model.IssuanceCriteria)
	if err != nil {
		return nil, err
	}

	// mapping_id
	result.Id = model.MappingId.ValueString()
	return result, nil
}

func (state *oauthAuthenticationPolicyContractMappingResourceModel) readClientResponse(response *client.ApcToPersistentGrantMapping) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// id
	state.Id = types.StringValue(response.Id)
	// attribute_contract_fulfillment
	attributeContractFulfillmentValue, diags := attributecontractfulfillment.ToState(context.Background(), &response.AttributeContractFulfillment)
	respDiags.Append(diags...)

	state.AttributeContractFulfillment = attributeContractFulfillmentValue
	// attribute_sources
	attributeSourcesValue, diags := attributesources.ToState(context.Background(), response.AttributeSources)
	respDiags.Append(diags...)

	state.AttributeSources = attributeSourcesValue
	// authentication_policy_contract_ref
	authenticationPolicyContractRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	authenticationPolicyContractRefValue, diags := types.ObjectValue(authenticationPolicyContractRefAttrTypes, map[string]attr.Value{
		"id": types.StringValue(response.AuthenticationPolicyContractRef.Id),
	})
	respDiags.Append(diags...)

	state.AuthenticationPolicyContractRef = authenticationPolicyContractRefValue
	// issuance_criteria
	issuanceCriteriaValue, diags := issuancecriteria.ToState(context.Background(), response.IssuanceCriteria)
	respDiags.Append(diags...)

	state.IssuanceCriteria = issuanceCriteriaValue
	// mapping_id
	state.MappingId = types.StringValue(response.Id)
	return respDiags
}

func (r *oauthAuthenticationPolicyContractMappingResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data oauthAuthenticationPolicyContractMappingResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, err := data.buildClientStruct()
	if err != nil {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Failed to build client struct for the oauthAuthenticationPolicyContractMapping: "+err.Error())
		return
	}
	apiCreateRequest := r.apiClient.OauthAuthenticationPolicyContractMappingsAPI.CreateApcMapping(config.AuthContext(ctx, r.providerConfig))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthAuthenticationPolicyContractMappingsAPI.CreateApcMappingExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the oauthAuthenticationPolicyContractMapping", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthAuthenticationPolicyContractMappingResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data oauthAuthenticationPolicyContractMappingResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.OauthAuthenticationPolicyContractMappingsAPI.GetApcMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "OAuth Authentication Policy Contract Mapping", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the oauthAuthenticationPolicyContractMapping", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthAuthenticationPolicyContractMappingResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data oauthAuthenticationPolicyContractMappingResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, err := data.buildClientStruct()
	if err != nil {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Failed to build client struct for the oauthAuthenticationPolicyContractMapping: "+err.Error())
		return
	}
	apiUpdateRequest := r.apiClient.OauthAuthenticationPolicyContractMappingsAPI.UpdateApcMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthAuthenticationPolicyContractMappingsAPI.UpdateApcMappingExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the oauthAuthenticationPolicyContractMapping", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthAuthenticationPolicyContractMappingResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data oauthAuthenticationPolicyContractMappingResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.OauthAuthenticationPolicyContractMappingsAPI.DeleteApcMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the oauthAuthenticationPolicyContractMapping", err, httpResp)
	}
}

func (r *oauthAuthenticationPolicyContractMappingResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to mapping_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("mapping_id"), req, resp)
}
