// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangegeneratorgroups

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/api"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &oauthTokenExchangeGeneratorGroupResource{}
	_ resource.ResourceWithConfigure   = &oauthTokenExchangeGeneratorGroupResource{}
	_ resource.ResourceWithImportState = &oauthTokenExchangeGeneratorGroupResource{}
)

func OauthTokenExchangeGeneratorGroupResource() resource.Resource {
	return &oauthTokenExchangeGeneratorGroupResource{}
}

type oauthTokenExchangeGeneratorGroupResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *oauthTokenExchangeGeneratorGroupResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oauth_token_exchange_generator_group"
}

func (r *oauthTokenExchangeGeneratorGroupResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type oauthTokenExchangeGeneratorGroupResourceModel struct {
	GeneratorMappings types.Set    `tfsdk:"generator_mappings"`
	GroupId           types.String `tfsdk:"group_id"`
	Name              types.String `tfsdk:"name"`
	ResourceUris      types.Set    `tfsdk:"resource_uris"`
}

func (r *oauthTokenExchangeGeneratorGroupResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	// resource_uris default
	resourceUrisDefault, diags := types.SetValue(types.StringType, nil)
	resp.Diagnostics.Append(diags...)

	resp.Schema = schema.Schema{
		Description: "Resource to create and manage an OAuth 2.0 token exchange generator group.",
		Attributes: map[string]schema.Attribute{
			"generator_mappings": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"default_mapping": schema.BoolAttribute{
							Optional:    true,
							Computed:    true,
							Default:     booldefault.StaticBool(false),
							Description: "Whether this is the default Token Generator Mapping. Defaults to `false`.",
						},
						"requested_token_type": schema.StringAttribute{
							Required:    true,
							Description: "The Requested token type",
							Validators: []validator.String{
								stringvalidator.LengthAtLeast(1),
							},
						},
						"token_generator": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Required:    true,
									Description: "The ID of the resource.",
									Validators: []validator.String{
										stringvalidator.LengthAtLeast(1),
									},
								},
							},
							Required:    true,
							Description: "The Token Generator used to generate the requested token.",
						},
					},
				},
				Required: true,
				Validators: []validator.Set{
					setvalidator.SizeAtLeast(1),
				},
				Description: "A list of Token Generator mapping into an OAuth 2.0 Token Exchange requested token type.",
			},
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: "The Token Exchange Generator group ID. ID is unique.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: "The Token Exchange Generator group name. Name is unique.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"resource_uris": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				Description: "The list of resource URI's which map to this Token Exchange Generator group.",
				Default:     setdefault.StaticValue(resourceUrisDefault),
			},
		},
	}
}

func (model *oauthTokenExchangeGeneratorGroupResourceModel) buildClientStruct() (*client.TokenExchangeGeneratorGroup, diag.Diagnostics) {
	result := &client.TokenExchangeGeneratorGroup{}
	// generator_mappings
	result.GeneratorMappings = []client.TokenExchangeGeneratorMapping{}
	for _, generatorMappingsElement := range model.GeneratorMappings.Elements() {
		generatorMappingsValue := client.TokenExchangeGeneratorMapping{}
		generatorMappingsAttrs := generatorMappingsElement.(types.Object).Attributes()
		generatorMappingsValue.DefaultMapping = generatorMappingsAttrs["default_mapping"].(types.Bool).ValueBoolPointer()
		generatorMappingsValue.RequestedTokenType = generatorMappingsAttrs["requested_token_type"].(types.String).ValueString()
		generatorMappingsTokenGeneratorValue := client.ResourceLink{}
		generatorMappingsTokenGeneratorAttrs := generatorMappingsAttrs["token_generator"].(types.Object).Attributes()
		generatorMappingsTokenGeneratorValue.Id = generatorMappingsTokenGeneratorAttrs["id"].(types.String).ValueString()
		generatorMappingsValue.TokenGenerator = generatorMappingsTokenGeneratorValue
		result.GeneratorMappings = append(result.GeneratorMappings, generatorMappingsValue)
	}

	// group_id
	result.Id = model.GroupId.ValueString()
	// name
	result.Name = model.Name.ValueString()
	// resource_uris
	if !model.ResourceUris.IsNull() {
		result.ResourceUris = []string{}
		for _, resourceUrisElement := range model.ResourceUris.Elements() {
			result.ResourceUris = append(result.ResourceUris, resourceUrisElement.(types.String).ValueString())
		}
	}

	return result, nil
}

func (state *oauthTokenExchangeGeneratorGroupResourceModel) readClientResponse(response *client.TokenExchangeGeneratorGroup) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// generator_mappings
	generatorMappingsTokenGeneratorAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	generatorMappingsAttrTypes := map[string]attr.Type{
		"default_mapping":      types.BoolType,
		"requested_token_type": types.StringType,
		"token_generator":      types.ObjectType{AttrTypes: generatorMappingsTokenGeneratorAttrTypes},
	}
	generatorMappingsElementType := types.ObjectType{AttrTypes: generatorMappingsAttrTypes}
	var generatorMappingsValues []attr.Value
	for _, generatorMappingsResponseValue := range response.GeneratorMappings {
		generatorMappingsTokenGeneratorValue, diags := types.ObjectValue(generatorMappingsTokenGeneratorAttrTypes, map[string]attr.Value{
			"id": types.StringValue(generatorMappingsResponseValue.TokenGenerator.Id),
		})
		respDiags.Append(diags...)
		generatorMappingsValue, diags := types.ObjectValue(generatorMappingsAttrTypes, map[string]attr.Value{
			"default_mapping":      types.BoolPointerValue(generatorMappingsResponseValue.DefaultMapping),
			"requested_token_type": types.StringValue(generatorMappingsResponseValue.RequestedTokenType),
			"token_generator":      generatorMappingsTokenGeneratorValue,
		})
		respDiags.Append(diags...)
		generatorMappingsValues = append(generatorMappingsValues, generatorMappingsValue)
	}
	generatorMappingsValue, diags := types.SetValue(generatorMappingsElementType, generatorMappingsValues)
	respDiags.Append(diags...)

	state.GeneratorMappings = generatorMappingsValue
	// group_id
	state.GroupId = types.StringValue(response.Id)
	// name
	state.Name = types.StringValue(response.Name)
	// resource_uris
	state.ResourceUris, diags = types.SetValueFrom(context.Background(), types.StringType, response.ResourceUris)
	respDiags.Append(diags...)
	return respDiags
}

func (r *oauthTokenExchangeGeneratorGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data oauthTokenExchangeGeneratorGroupResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.OauthTokenExchangeGeneratorAPI.CreateGroup(config.AuthContext(ctx, r.providerConfig))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeGeneratorAPI.CreateGroupExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the oauthTokenExchangeGeneratorGroup", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeGeneratorGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data oauthTokenExchangeGeneratorGroupResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeGeneratorAPI.GetOauthTokenExchangeGroupById(config.AuthContext(ctx, r.providerConfig), data.GroupId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "oauthTokenExchangeGeneratorGroup", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the oauthTokenExchangeGeneratorGroup", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeGeneratorGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data oauthTokenExchangeGeneratorGroupResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.OauthTokenExchangeGeneratorAPI.UpdateOauthTokenExchangeGroup(config.AuthContext(ctx, r.providerConfig), data.GroupId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeGeneratorAPI.UpdateOauthTokenExchangeGroupExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the oauthTokenExchangeGeneratorGroup", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeGeneratorGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data oauthTokenExchangeGeneratorGroupResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := api.ExponentialBackOffRetryDelete([]int{403},
		r.apiClient.OauthTokenExchangeGeneratorAPI.DeleteOauthTokenExchangeGroup(config.AuthContext(ctx, r.providerConfig), data.GroupId.ValueString()).Execute)
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the oauthTokenExchangeGeneratorGroup", err, httpResp)
	}
}

func (r *oauthTokenExchangeGeneratorGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to group_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("group_id"), req, resp)
}
