// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangeprocessorsettings

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &oauthTokenExchangeProcessorSettingsResource{}
	_ resource.ResourceWithConfigure   = &oauthTokenExchangeProcessorSettingsResource{}
	_ resource.ResourceWithImportState = &oauthTokenExchangeProcessorSettingsResource{}
)

func OauthTokenExchangeProcessorSettingsResource() resource.Resource {
	return &oauthTokenExchangeProcessorSettingsResource{}
}

type oauthTokenExchangeProcessorSettingsResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *oauthTokenExchangeProcessorSettingsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oauth_token_exchange_processor_settings"
}

func (r *oauthTokenExchangeProcessorSettingsResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type oauthTokenExchangeProcessorSettingsResourceModel struct {
	DefaultProcessorPolicyRef types.Object `tfsdk:"default_processor_policy_ref"`
}

func (r *oauthTokenExchangeProcessorSettingsResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the oauth token exchange processor settings.",
		Attributes: map[string]schema.Attribute{
			"default_processor_policy_ref": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Required:    true,
						Description: "The ID of the resource.",
						Validators: []validator.String{
							stringvalidator.LengthAtLeast(1),
						},
					},
				},
				Required:    true,
				Description: "Reference to the default Token Exchange Processor policy, if one is defined.",
			},
		},
	}
}

func (model *oauthTokenExchangeProcessorSettingsResourceModel) buildClientStruct() (*client.TokenExchangeProcessorSettings, diag.Diagnostics) {
	result := &client.TokenExchangeProcessorSettings{}
	// default_processor_policy_ref
	if !model.DefaultProcessorPolicyRef.IsNull() {
		defaultProcessorPolicyRefValue := &client.ResourceLink{}
		defaultProcessorPolicyRefAttrs := model.DefaultProcessorPolicyRef.Attributes()
		defaultProcessorPolicyRefValue.Id = defaultProcessorPolicyRefAttrs["id"].(types.String).ValueString()
		result.DefaultProcessorPolicyRef = defaultProcessorPolicyRefValue
	}

	return result, nil
}

// Build a default client struct to reset the resource to its default state
// If necessary, update this function to set any other values that should be present in the default state of the resource
func (model *oauthTokenExchangeProcessorSettingsResource) buildDefaultClientStruct() *client.TokenExchangeProcessorSettings {
	result := &client.TokenExchangeProcessorSettings{}
	return result
}

func (state *oauthTokenExchangeProcessorSettingsResourceModel) readClientResponse(response *client.TokenExchangeProcessorSettings) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// default_processor_policy_ref
	defaultProcessorPolicyRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	var defaultProcessorPolicyRefValue types.Object
	if response.DefaultProcessorPolicyRef == nil {
		defaultProcessorPolicyRefValue = types.ObjectNull(defaultProcessorPolicyRefAttrTypes)
	} else {
		defaultProcessorPolicyRefValue, diags = types.ObjectValue(defaultProcessorPolicyRefAttrTypes, map[string]attr.Value{
			"id": types.StringValue(response.DefaultProcessorPolicyRef.Id),
		})
		respDiags.Append(diags...)
	}

	state.DefaultProcessorPolicyRef = defaultProcessorPolicyRefValue
	return respDiags
}

// Set all non-primitive attributes to null with appropriate attribute types
func (r *oauthTokenExchangeProcessorSettingsResource) emptyModel() oauthTokenExchangeProcessorSettingsResourceModel {
	var model oauthTokenExchangeProcessorSettingsResourceModel
	// default_processor_policy_ref
	defaultProcessorPolicyRefAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	model.DefaultProcessorPolicyRef = types.ObjectNull(defaultProcessorPolicyRefAttrTypes)
	return model
}

func (r *oauthTokenExchangeProcessorSettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data oauthTokenExchangeProcessorSettingsResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.OauthTokenExchangeProcessorAPI.UpdateOauthTokenExchangeProcessorPolicySettings(config.AuthContext(ctx, r.providerConfig))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeProcessorAPI.UpdateOauthTokenExchangeProcessorPolicySettingsExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the oauthTokenExchangeProcessorSettings", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeProcessorSettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data oauthTokenExchangeProcessorSettingsResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeProcessorAPI.GetOauthTokenExchangeProcessorPolicySettings(config.AuthContext(ctx, r.providerConfig)).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "oauthTokenExchangeProcessorSettings", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the oauthTokenExchangeProcessorSettings", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeProcessorSettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data oauthTokenExchangeProcessorSettingsResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.OauthTokenExchangeProcessorAPI.UpdateOauthTokenExchangeProcessorPolicySettings(config.AuthContext(ctx, r.providerConfig))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeProcessorAPI.UpdateOauthTokenExchangeProcessorPolicySettingsExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the oauthTokenExchangeProcessorSettings", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeProcessorSettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is singleton, so it can't be deleted from the service. Deleting this resource will remove it from Terraform state.
	resp.Diagnostics.AddWarning("Configuration cannot be returned to original state. The resource has been removed from Terraform state but the configuration remains applied to the environment.", "")
}

func (r *oauthTokenExchangeProcessorSettingsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// This resource has no identifier attributes, so the value passed in here doesn't matter. Just return an empty state struct.
	emptyState := r.emptyModel()
	resp.Diagnostics.Append(resp.State.Set(ctx, &emptyState)...)
}
