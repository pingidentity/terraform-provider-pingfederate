// Code generated by ping-terraform-plugin-framework-generator

package oauthtokenexchangeprocessorpolicies

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/api"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributecontractfulfillment"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &oauthTokenExchangeProcessorPolicyResource{}
	_ resource.ResourceWithConfigure   = &oauthTokenExchangeProcessorPolicyResource{}
	_ resource.ResourceWithImportState = &oauthTokenExchangeProcessorPolicyResource{}
)

func OauthTokenExchangeProcessorPolicyResource() resource.Resource {
	return &oauthTokenExchangeProcessorPolicyResource{}
}

type oauthTokenExchangeProcessorPolicyResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *oauthTokenExchangeProcessorPolicyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oauth_token_exchange_processor_policy"
}

func (r *oauthTokenExchangeProcessorPolicyResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type oauthTokenExchangeProcessorPolicyResourceModel struct {
	ActorTokenRequired types.Bool   `tfsdk:"actor_token_required"`
	AttributeContract  types.Object `tfsdk:"attribute_contract"`
	Name               types.String `tfsdk:"name"`
	PolicyId           types.String `tfsdk:"policy_id"`
	ProcessorMappings  types.List   `tfsdk:"processor_mappings"`
}

func (r *oauthTokenExchangeProcessorPolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	// attribute_contract.extended_attributes default
	attributeContractExtendedAttributesAttrTypes := map[string]attr.Type{
		"name": types.StringType,
	}
	attributeContractExtendedAttributesElementType := types.ObjectType{AttrTypes: attributeContractExtendedAttributesAttrTypes}
	attributeContractExtendedAttributesDefault, diags := types.SetValue(attributeContractExtendedAttributesElementType, nil)
	resp.Diagnostics.Append(diags...)

	resp.Schema = schema.Schema{
		Description: "Resource to create and manage an oauth token exchange processor policy.",
		Attributes: map[string]schema.Attribute{
			"actor_token_required": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
				Description: "Require an Actor token on a OAuth 2.0 Token Exchange request. Defaults to `false`.",
			},
			"attribute_contract": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"core_attributes": schema.SetNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.UseStateForUnknown(),
									},
									Description: "The name of this attribute.",
									Validators: []validator.String{
										stringvalidator.LengthAtLeast(1),
									},
								},
							},
						},
						Computed: true,
						PlanModifiers: []planmodifier.Set{
							setplanmodifier.UseStateForUnknown(),
						},
						Description: "A list of read-only attributes (for example, subject) that are automatically populated by PingFederate.",
					},
					"extended_attributes": schema.SetNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Required:    true,
									Description: "The name of this attribute.",
									Validators: []validator.String{
										stringvalidator.LengthAtLeast(1),
									},
								},
							},
						},
						Optional:    true,
						Computed:    true,
						Description: "A list of additional attributes.",
						Default:     setdefault.StaticValue(attributeContractExtendedAttributesDefault),
					},
				},
				Optional:    true,
				Computed:    true,
				Description: "A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy.",
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: "The Token Exchange processor policy name. Name is unique.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"policy_id": schema.StringAttribute{
				Required:    true,
				Description: "The Token Exchange processor policy ID. ID is unique.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"processor_mappings": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"actor_token_processor": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Required:    true,
									Description: "The ID of the resource.",
									Validators: []validator.String{
										stringvalidator.LengthAtLeast(1),
									},
								},
							},
							Optional:    true,
							Description: "A reference to a resource.",
						},
						"actor_token_type": schema.StringAttribute{
							Optional:    true,
							Description: "The Actor token type",
							Validators: []validator.String{
								stringvalidator.LengthAtLeast(1),
							},
						},
						"attribute_contract_fulfillment": attributecontractfulfillment.ToSchema(true, false, false),
						"attribute_sources":              attributesources.ToSchema(0, false),
						"issuance_criteria":              issuancecriteria.ToSchema(),
						"subject_token_processor": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Required:    true,
									Description: "The ID of the resource.",
									Validators: []validator.String{
										stringvalidator.LengthAtLeast(1),
									},
								},
							},
							Required:    true,
							Description: "A reference to a resource.",
						},
						"subject_token_type": schema.StringAttribute{
							Required:    true,
							Description: "The Subject token type",
							Validators: []validator.String{
								stringvalidator.LengthAtLeast(1),
							},
						},
					},
				},
				Required:    true,
				Description: "A list of Token Processor(s) mappings into an OAuth 2.0 Token Exchange Processor policy.",
			},
		},
	}
}

func (model *oauthTokenExchangeProcessorPolicyResourceModel) buildClientStruct() (*client.TokenExchangeProcessorPolicy, diag.Diagnostics) {
	result := &client.TokenExchangeProcessorPolicy{}
	var respDiags diag.Diagnostics
	var err error
	// actor_token_required
	result.ActorTokenRequired = model.ActorTokenRequired.ValueBoolPointer()
	// attribute_contract
	attributeContractValue := client.TokenExchangeProcessorAttributeContract{}
	if !model.AttributeContract.IsNull() && !model.AttributeContract.IsUnknown() {
		attributeContractAttrs := model.AttributeContract.Attributes()
		attributeContractValue.ExtendedAttributes = []client.TokenExchangeProcessorAttribute{}
		for _, extendedAttributesElement := range attributeContractAttrs["extended_attributes"].(types.Set).Elements() {
			extendedAttributesValue := client.TokenExchangeProcessorAttribute{}
			extendedAttributesAttrs := extendedAttributesElement.(types.Object).Attributes()
			extendedAttributesValue.Name = extendedAttributesAttrs["name"].(types.String).ValueString()
			attributeContractValue.ExtendedAttributes = append(attributeContractValue.ExtendedAttributes, extendedAttributesValue)
		}
	}
	result.AttributeContract = attributeContractValue

	// name
	result.Name = model.Name.ValueString()
	// policy_id
	result.Id = model.PolicyId.ValueString()
	// processor_mappings
	result.ProcessorMappings = []client.TokenExchangeProcessorMapping{}
	for _, processorMappingsElement := range model.ProcessorMappings.Elements() {
		processorMappingsValue := client.TokenExchangeProcessorMapping{}
		processorMappingsAttrs := processorMappingsElement.(types.Object).Attributes()
		if !processorMappingsAttrs["actor_token_processor"].IsNull() {
			processorMappingsActorTokenProcessorValue := &client.ResourceLink{}
			processorMappingsActorTokenProcessorAttrs := processorMappingsAttrs["actor_token_processor"].(types.Object).Attributes()
			processorMappingsActorTokenProcessorValue.Id = processorMappingsActorTokenProcessorAttrs["id"].(types.String).ValueString()
			processorMappingsValue.ActorTokenProcessor = processorMappingsActorTokenProcessorValue
		}
		processorMappingsValue.ActorTokenType = processorMappingsAttrs["actor_token_type"].(types.String).ValueStringPointer()
		processorMappingsValue.AttributeContractFulfillment, err = attributecontractfulfillment.ClientStruct(processorMappingsAttrs["attribute_contract_fulfillment"].(types.Map))
		if err != nil {
			respDiags.AddError("Error building client struct for attribute_contract_fulfillment", err.Error())
		}
		processorMappingsValue.AttributeSources, err = attributesources.ClientStruct(processorMappingsAttrs["attribute_sources"].(types.Set))
		if err != nil {
			respDiags.AddError("Error building client struct for attribute_sources", err.Error())
		}
		processorMappingsValue.IssuanceCriteria, err = issuancecriteria.ClientStruct(processorMappingsAttrs["issuance_criteria"].(types.Object))
		if err != nil {
			respDiags.AddError("Error building client struct for issuance_criteria", err.Error())
		}
		processorMappingsSubjectTokenProcessorValue := client.ResourceLink{}
		processorMappingsSubjectTokenProcessorAttrs := processorMappingsAttrs["subject_token_processor"].(types.Object).Attributes()
		processorMappingsSubjectTokenProcessorValue.Id = processorMappingsSubjectTokenProcessorAttrs["id"].(types.String).ValueString()
		processorMappingsValue.SubjectTokenProcessor = processorMappingsSubjectTokenProcessorValue
		processorMappingsValue.SubjectTokenType = processorMappingsAttrs["subject_token_type"].(types.String).ValueString()
		result.ProcessorMappings = append(result.ProcessorMappings, processorMappingsValue)
	}

	return result, respDiags
}

func (state *oauthTokenExchangeProcessorPolicyResourceModel) readClientResponse(response *client.TokenExchangeProcessorPolicy) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// actor_token_required
	state.ActorTokenRequired = types.BoolPointerValue(response.ActorTokenRequired)
	// attribute_contract
	attributeContractCoreAttributesAttrTypes := map[string]attr.Type{
		"name": types.StringType,
	}
	attributeContractCoreAttributesElementType := types.ObjectType{AttrTypes: attributeContractCoreAttributesAttrTypes}
	attributeContractExtendedAttributesAttrTypes := map[string]attr.Type{
		"name": types.StringType,
	}
	attributeContractExtendedAttributesElementType := types.ObjectType{AttrTypes: attributeContractExtendedAttributesAttrTypes}
	attributeContractAttrTypes := map[string]attr.Type{
		"core_attributes":     types.SetType{ElemType: attributeContractCoreAttributesElementType},
		"extended_attributes": types.SetType{ElemType: attributeContractExtendedAttributesElementType},
	}
	var attributeContractCoreAttributesValues []attr.Value
	for _, attributeContractCoreAttributesResponseValue := range response.AttributeContract.CoreAttributes {
		attributeContractCoreAttributesValue, diags := types.ObjectValue(attributeContractCoreAttributesAttrTypes, map[string]attr.Value{
			"name": types.StringValue(attributeContractCoreAttributesResponseValue.Name),
		})
		respDiags.Append(diags...)
		attributeContractCoreAttributesValues = append(attributeContractCoreAttributesValues, attributeContractCoreAttributesValue)
	}
	attributeContractCoreAttributesValue, diags := types.SetValue(attributeContractCoreAttributesElementType, attributeContractCoreAttributesValues)
	respDiags.Append(diags...)
	var attributeContractExtendedAttributesValues []attr.Value
	for _, attributeContractExtendedAttributesResponseValue := range response.AttributeContract.ExtendedAttributes {
		attributeContractExtendedAttributesValue, diags := types.ObjectValue(attributeContractExtendedAttributesAttrTypes, map[string]attr.Value{
			"name": types.StringValue(attributeContractExtendedAttributesResponseValue.Name),
		})
		respDiags.Append(diags...)
		attributeContractExtendedAttributesValues = append(attributeContractExtendedAttributesValues, attributeContractExtendedAttributesValue)
	}
	attributeContractExtendedAttributesValue, diags := types.SetValue(attributeContractExtendedAttributesElementType, attributeContractExtendedAttributesValues)
	respDiags.Append(diags...)
	attributeContractValue, diags := types.ObjectValue(attributeContractAttrTypes, map[string]attr.Value{
		"core_attributes":     attributeContractCoreAttributesValue,
		"extended_attributes": attributeContractExtendedAttributesValue,
	})
	respDiags.Append(diags...)

	state.AttributeContract = attributeContractValue
	// name
	state.Name = types.StringValue(response.Name)
	// policy_id
	state.PolicyId = types.StringValue(response.Id)
	// processor_mappings
	processorMappingsActorTokenProcessorAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	processorMappingsAttributeContractFulfillmentAttrTypes := attributecontractfulfillment.AttrTypes()
	processorMappingsAttributeContractFulfillmentElementType := types.ObjectType{AttrTypes: processorMappingsAttributeContractFulfillmentAttrTypes}
	processorMappingsAttributeSourcesAttrTypes := attributesources.AttrTypes()
	processorMappingsAttributeSourcesElementType := types.ObjectType{AttrTypes: processorMappingsAttributeSourcesAttrTypes}
	processorMappingsIssuanceCriteriaAttrTypes := issuancecriteria.AttrTypes()
	processorMappingsSubjectTokenProcessorAttrTypes := map[string]attr.Type{
		"id": types.StringType,
	}
	processorMappingsAttrTypes := map[string]attr.Type{
		"actor_token_processor":          types.ObjectType{AttrTypes: processorMappingsActorTokenProcessorAttrTypes},
		"actor_token_type":               types.StringType,
		"attribute_contract_fulfillment": types.MapType{ElemType: processorMappingsAttributeContractFulfillmentElementType},
		"attribute_sources":              types.SetType{ElemType: processorMappingsAttributeSourcesElementType},
		"issuance_criteria":              types.ObjectType{AttrTypes: processorMappingsIssuanceCriteriaAttrTypes},
		"subject_token_processor":        types.ObjectType{AttrTypes: processorMappingsSubjectTokenProcessorAttrTypes},
		"subject_token_type":             types.StringType,
	}
	processorMappingsElementType := types.ObjectType{AttrTypes: processorMappingsAttrTypes}
	var processorMappingsValues []attr.Value
	for _, processorMappingsResponseValue := range response.ProcessorMappings {
		var processorMappingsActorTokenProcessorValue types.Object
		if processorMappingsResponseValue.ActorTokenProcessor == nil || processorMappingsResponseValue.ActorTokenProcessor.Id == "" {
			processorMappingsActorTokenProcessorValue = types.ObjectNull(processorMappingsActorTokenProcessorAttrTypes)
		} else {
			processorMappingsActorTokenProcessorValue, diags = types.ObjectValue(processorMappingsActorTokenProcessorAttrTypes, map[string]attr.Value{
				"id": types.StringValue(processorMappingsResponseValue.ActorTokenProcessor.Id),
			})
			respDiags.Append(diags...)
		}
		var processorMappingsActorTokenTypeValue types.String
		if processorMappingsResponseValue.ActorTokenType == nil || *processorMappingsResponseValue.ActorTokenType == "" {
			processorMappingsActorTokenTypeValue = types.StringNull()
		} else {
			processorMappingsActorTokenTypeValue = types.StringPointerValue(processorMappingsResponseValue.ActorTokenType)
		}
		processorMappingsAttributeContractFulfillmentValue, diags := attributecontractfulfillment.ToState(context.Background(), &processorMappingsResponseValue.AttributeContractFulfillment)
		respDiags.Append(diags...)
		processorMappingsAttributeSourcesValue, diags := attributesources.ToState(context.Background(), processorMappingsResponseValue.AttributeSources)
		respDiags.Append(diags...)
		processorMappingsIssuanceCriteriaValue, diags := issuancecriteria.ToState(context.Background(), processorMappingsResponseValue.IssuanceCriteria)
		respDiags.Append(diags...)
		processorMappingsSubjectTokenProcessorValue, diags := types.ObjectValue(processorMappingsSubjectTokenProcessorAttrTypes, map[string]attr.Value{
			"id": types.StringValue(processorMappingsResponseValue.SubjectTokenProcessor.Id),
		})
		respDiags.Append(diags...)
		processorMappingsValue, diags := types.ObjectValue(processorMappingsAttrTypes, map[string]attr.Value{
			"actor_token_processor":          processorMappingsActorTokenProcessorValue,
			"actor_token_type":               processorMappingsActorTokenTypeValue,
			"attribute_contract_fulfillment": processorMappingsAttributeContractFulfillmentValue,
			"attribute_sources":              processorMappingsAttributeSourcesValue,
			"issuance_criteria":              processorMappingsIssuanceCriteriaValue,
			"subject_token_processor":        processorMappingsSubjectTokenProcessorValue,
			"subject_token_type":             types.StringValue(processorMappingsResponseValue.SubjectTokenType),
		})
		respDiags.Append(diags...)
		processorMappingsValues = append(processorMappingsValues, processorMappingsValue)
	}
	processorMappingsValue, diags := types.ListValue(processorMappingsElementType, processorMappingsValues)
	respDiags.Append(diags...)

	state.ProcessorMappings = processorMappingsValue
	return respDiags
}

func (r *oauthTokenExchangeProcessorPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data oauthTokenExchangeProcessorPolicyResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.OauthTokenExchangeProcessorAPI.CreateOauthTokenExchangeProcessorPolicy(config.AuthContext(ctx, r.providerConfig))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeProcessorAPI.CreateOauthTokenExchangeProcessorPolicyExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the oauthTokenExchangeProcessorPolicy", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeProcessorPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data oauthTokenExchangeProcessorPolicyResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeProcessorAPI.GetOauthTokenExchangeProcessorPolicyById(config.AuthContext(ctx, r.providerConfig), data.PolicyId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "oauthTokenExchangeProcessorPolicy", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the oauthTokenExchangeProcessorPolicy", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeProcessorPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data oauthTokenExchangeProcessorPolicyResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.OauthTokenExchangeProcessorAPI.UpdateOauthTokenExchangeProcessorPolicy(config.AuthContext(ctx, r.providerConfig), data.PolicyId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.OauthTokenExchangeProcessorAPI.UpdateOauthTokenExchangeProcessorPolicyExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the oauthTokenExchangeProcessorPolicy", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *oauthTokenExchangeProcessorPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data oauthTokenExchangeProcessorPolicyResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := api.ExponentialBackOffRetryDelete([]int{422},
		r.apiClient.OauthTokenExchangeProcessorAPI.DeleteOauthTokenExchangeProcessorPolicyy(config.AuthContext(ctx, r.providerConfig), data.PolicyId.ValueString()).Execute)
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the oauthTokenExchangeProcessorPolicy", err, httpResp)
	}
}

func (r *oauthTokenExchangeProcessorPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to policy_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("policy_id"), req, resp)
}
