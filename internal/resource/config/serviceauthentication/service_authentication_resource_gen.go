// Code generated by ping-terraform-plugin-framework-generator

package serviceauthentication

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &serviceAuthenticationResource{}
	_ resource.ResourceWithConfigure   = &serviceAuthenticationResource{}
	_ resource.ResourceWithImportState = &serviceAuthenticationResource{}
)

func ServiceAuthenticationResource() resource.Resource {
	return &serviceAuthenticationResource{}
}

type serviceAuthenticationResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *serviceAuthenticationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_authentication"
}

func (r *serviceAuthenticationResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type serviceAuthenticationResourceModel struct {
	AttributeQuery       types.Object `tfsdk:"attribute_query"`
	ConnectionManagement types.Object `tfsdk:"connection_management"`
	Jmx                  types.Object `tfsdk:"jmx"`
	SsoDirectoryService  types.Object `tfsdk:"sso_directory_service"`
}

func (r *serviceAuthenticationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to manage the service authentication settings.",
		Attributes: map[string]schema.Attribute{
			"attribute_query": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Optional:    true,
						Description: "Id of the service.",
					},
					"shared_secret": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Shared secret for the service.",
					},
				},
				Optional:    true,
				Description: "SAML2.0 attribute query service. Remove the JSON field to deactivate the attribute query service.",
			},
			"connection_management": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Optional:    true,
						Description: "Id of the service.",
					},
					"shared_secret": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Shared secret for the service.",
					},
				},
				Optional:    true,
				Description: "(Deprecated) Connection management service. Remove the JSON field to deactivate the connection management service.",
			},
			"jmx": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Optional:    true,
						Description: "Id of the service.",
					},
					"shared_secret": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Shared secret for the service.",
					},
				},
				Optional:    true,
				Description: "JMX application management and monitoring service. Remove the JSON field to deactivate the JMX service.",
			},
			"sso_directory_service": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Optional:    true,
						Description: "Id of the service.",
					},
					"shared_secret": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Shared secret for the service.",
					},
				},
				Optional:    true,
				Description: "(Deprecated) SSO directory service. Remove the JSON field to deactivate the SSO Directory service.",
			},
		},
	}
}

func (model *serviceAuthenticationResourceModel) buildClientStruct() (*client.ServiceAuthentication, diag.Diagnostics) {
	result := &client.ServiceAuthentication{}
	// attribute_query
	if !model.AttributeQuery.IsNull() {
		attributeQueryValue := &client.ServiceModel{}
		attributeQueryAttrs := model.AttributeQuery.Attributes()
		attributeQueryValue.Id = attributeQueryAttrs["id"].(types.String).ValueStringPointer()
		attributeQueryValue.SharedSecret = attributeQueryAttrs["shared_secret"].(types.String).ValueStringPointer()
		result.AttributeQuery = attributeQueryValue
	}

	// connection_management
	if !model.ConnectionManagement.IsNull() {
		connectionManagementValue := &client.ServiceModel{}
		connectionManagementAttrs := model.ConnectionManagement.Attributes()
		connectionManagementValue.Id = connectionManagementAttrs["id"].(types.String).ValueStringPointer()
		connectionManagementValue.SharedSecret = connectionManagementAttrs["shared_secret"].(types.String).ValueStringPointer()
		result.ConnectionManagement = connectionManagementValue
	}

	// jmx
	if !model.Jmx.IsNull() {
		jmxValue := &client.ServiceModel{}
		jmxAttrs := model.Jmx.Attributes()
		jmxValue.Id = jmxAttrs["id"].(types.String).ValueStringPointer()
		jmxValue.SharedSecret = jmxAttrs["shared_secret"].(types.String).ValueStringPointer()
		result.Jmx = jmxValue
	}

	// sso_directory_service
	if !model.SsoDirectoryService.IsNull() {
		ssoDirectoryServiceValue := &client.ServiceModel{}
		ssoDirectoryServiceAttrs := model.SsoDirectoryService.Attributes()
		ssoDirectoryServiceValue.Id = ssoDirectoryServiceAttrs["id"].(types.String).ValueStringPointer()
		ssoDirectoryServiceValue.SharedSecret = ssoDirectoryServiceAttrs["shared_secret"].(types.String).ValueStringPointer()
		result.SsoDirectoryService = ssoDirectoryServiceValue
	}

	return result, nil
}

func (state *serviceAuthenticationResourceModel) readClientResponse(response *client.ServiceAuthentication) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// attribute_query
	attributeQueryAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	var attributeQueryValue types.Object
	if response.AttributeQuery == nil {
		attributeQueryValue = types.ObjectNull(attributeQueryAttrTypes)
	} else {
		attributeQueryValue, diags = types.ObjectValue(attributeQueryAttrTypes, map[string]attr.Value{
			"id":            types.StringPointerValue(response.AttributeQuery.Id),
			"shared_secret": state.readClientResponseSharedSecret(state.AttributeQuery),
		})
		respDiags.Append(diags...)
	}

	state.AttributeQuery = attributeQueryValue
	// connection_management
	connectionManagementAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	var connectionManagementValue types.Object
	if response.ConnectionManagement == nil {
		connectionManagementValue = types.ObjectNull(connectionManagementAttrTypes)
	} else {
		connectionManagementValue, diags = types.ObjectValue(connectionManagementAttrTypes, map[string]attr.Value{
			"id":            types.StringPointerValue(response.ConnectionManagement.Id),
			"shared_secret": state.readClientResponseSharedSecret(state.ConnectionManagement),
		})
		respDiags.Append(diags...)
	}

	state.ConnectionManagement = connectionManagementValue
	// jmx
	jmxAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	var jmxValue types.Object
	if response.Jmx == nil {
		jmxValue = types.ObjectNull(jmxAttrTypes)
	} else {
		jmxValue, diags = types.ObjectValue(jmxAttrTypes, map[string]attr.Value{
			"id":            types.StringPointerValue(response.Jmx.Id),
			"shared_secret": state.readClientResponseSharedSecret(state.Jmx),
		})
		respDiags.Append(diags...)
	}

	state.Jmx = jmxValue
	// sso_directory_service
	ssoDirectoryServiceAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	var ssoDirectoryServiceValue types.Object
	if response.SsoDirectoryService == nil {
		ssoDirectoryServiceValue = types.ObjectNull(ssoDirectoryServiceAttrTypes)
	} else {
		ssoDirectoryServiceValue, diags = types.ObjectValue(ssoDirectoryServiceAttrTypes, map[string]attr.Value{
			"id":            types.StringPointerValue(response.SsoDirectoryService.Id),
			"shared_secret": state.readClientResponseSharedSecret(state.SsoDirectoryService),
		})
		respDiags.Append(diags...)
	}

	state.SsoDirectoryService = ssoDirectoryServiceValue
	return respDiags
}

// Set all non-primitive attributes to null with appropriate attribute types
func (r *serviceAuthenticationResource) emptyModel() serviceAuthenticationResourceModel {
	var model serviceAuthenticationResourceModel
	// attribute_query
	attributeQueryAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	model.AttributeQuery = types.ObjectNull(attributeQueryAttrTypes)
	// connection_management
	connectionManagementAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	model.ConnectionManagement = types.ObjectNull(connectionManagementAttrTypes)
	// jmx
	jmxAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	model.Jmx = types.ObjectNull(jmxAttrTypes)
	// sso_directory_service
	ssoDirectoryServiceAttrTypes := map[string]attr.Type{
		"id":            types.StringType,
		"shared_secret": types.StringType,
	}
	model.SsoDirectoryService = types.ObjectNull(ssoDirectoryServiceAttrTypes)
	return model
}

func (r *serviceAuthenticationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data serviceAuthenticationResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.ServiceAuthenticationAPI.UpdateServiceAuthentication(config.AuthContext(ctx, r.providerConfig))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.ServiceAuthenticationAPI.UpdateServiceAuthenticationExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the serviceAuthentication", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *serviceAuthenticationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data serviceAuthenticationResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.ServiceAuthenticationAPI.GetServiceAuthentication(config.AuthContext(ctx, r.providerConfig)).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.ReportHttpErrorAsWarning(ctx, &resp.Diagnostics, "An error occurred while reading the serviceAuthentication", err, httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the serviceAuthentication", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *serviceAuthenticationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data serviceAuthenticationResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.ServiceAuthenticationAPI.UpdateServiceAuthentication(config.AuthContext(ctx, r.providerConfig))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.ServiceAuthenticationAPI.UpdateServiceAuthenticationExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the serviceAuthentication", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *serviceAuthenticationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is singleton, so it can't be deleted from the service. Deleting this resource will remove it from Terraform state.
}

func (r *serviceAuthenticationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// This resource has no identifier attributes, so the value passed in here doesn't matter. Just return an empty state struct.
	emptyState := r.emptyModel()
	resp.Diagnostics.Append(resp.State.Set(ctx, &emptyState)...)
}
