// Code generated by ping-terraform-plugin-framework-generator

package certificatesgroups

import (
	"context"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/id"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/configvalidators"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &certificatesGroupResource{}
	_ resource.ResourceWithConfigure   = &certificatesGroupResource{}
	_ resource.ResourceWithImportState = &certificatesGroupResource{}

	customId = "group_id"
)

func CertificatesGroupResource() resource.Resource {
	return &certificatesGroupResource{}
}

type certificatesGroupResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *certificatesGroupResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificates_group"
}

func (r *certificatesGroupResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type certificatesGroupResourceModel struct {
	CryptoProvider          types.String `tfsdk:"crypto_provider"`
	Expires                 types.String `tfsdk:"expires"`
	FileData                types.String `tfsdk:"file_data"`
	GroupId                 types.String `tfsdk:"group_id"`
	GroupName               types.String `tfsdk:"group_name"`
	Id                      types.String `tfsdk:"id"`
	IssuerDn                types.String `tfsdk:"issuer_dn"`
	KeyAlgorithm            types.String `tfsdk:"key_algorithm"`
	KeySize                 types.Int64  `tfsdk:"key_size"`
	SerialNumber            types.String `tfsdk:"serial_number"`
	Sha1Fingerprint         types.String `tfsdk:"sha1_fingerprint"`
	Sha256Fingerprint       types.String `tfsdk:"sha256_fingerprint"`
	SignatureAlgorithm      types.String `tfsdk:"signature_algorithm"`
	Status                  types.String `tfsdk:"status"`
	SubjectAlternativeNames types.List   `tfsdk:"subject_alternative_names"`
	SubjectDn               types.String `tfsdk:"subject_dn"`
	ValidFrom               types.String `tfsdk:"valid_from"`
	Version                 types.Int64  `tfsdk:"version"`
}

func (r *certificatesGroupResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage certificates for a group.",
		Attributes: map[string]schema.Attribute{
			"crypto_provider": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Description: "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true. Options are `LOCAL` or `HSM`. This field is immutable and will trigger a replacement plan if changed.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"LOCAL",
						"HSM",
					),
				},
			},
			"expires": schema.StringAttribute{
				Computed:    true,
				Description: "The end date up until which the item is valid, in ISO 8601 format (UTC).",
			},
			"file_data": schema.StringAttribute{
				Required:    true,
				Description: "The certificate data in PEM format. New line characters should be omitted or encoded in this value. This field is immutable and will trigger a replacement plan if changed.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"group_id": schema.StringAttribute{
				Optional:    true,
				Computed:    true,
				Description: "The persistent, unique ID for the certificate. It can be any combination of `[a-z0-9._-]`. This property is system-assigned if not specified. This field is immutable and will trigger a replacement plan if changed.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					configvalidators.LowercaseId(),
					stringvalidator.LengthAtLeast(1),
				},
			},
			"group_name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
				Description: "Name of the group to manage certificates for. This field is immutable and will trigger a replacement plan if changed.",
			},
			"issuer_dn": schema.StringAttribute{
				Computed:    true,
				Description: "The issuer's distinguished name.",
			},
			"key_algorithm": schema.StringAttribute{
				Computed:    true,
				Description: "The public key algorithm.",
			},
			"key_size": schema.Int64Attribute{
				Computed:    true,
				Description: "The public key size.",
			},
			"serial_number": schema.StringAttribute{
				Computed:    true,
				Description: "The serial number assigned by the CA.",
			},
			"sha1_fingerprint": schema.StringAttribute{
				Computed:    true,
				Description: "SHA-1 fingerprint in Hex encoding.",
			},
			"sha256_fingerprint": schema.StringAttribute{
				Computed:    true,
				Description: "SHA-256 fingerprint in Hex encoding.",
			},
			"signature_algorithm": schema.StringAttribute{
				Computed:    true,
				Description: "The signature algorithm.",
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: "Status of the item.",
			},
			"subject_alternative_names": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
				Description: "The subject alternative names (SAN).",
			},
			"subject_dn": schema.StringAttribute{
				Computed:    true,
				Description: "The subject's distinguished name.",
			},
			"valid_from": schema.StringAttribute{
				Computed:    true,
				Description: "The start date from which the item is valid, in ISO 8601 format (UTC).",
			},
			"version": schema.Int64Attribute{
				Computed:    true,
				Description: "The X.509 version to which the item conforms.",
			},
		},
	}
	id.ToSchema(&resp.Schema)
}

func (model *certificatesGroupResourceModel) buildClientStruct() (*client.X509File, diag.Diagnostics) {
	result := &client.X509File{}
	// crypto_provider
	result.CryptoProvider = model.CryptoProvider.ValueStringPointer()
	// file_data
	result.FileData = model.FileData.ValueString()
	// group_id
	result.Id = model.GroupId.ValueStringPointer()
	return result, nil
}

func (state *certificatesGroupResourceModel) readClientResponse(response *client.CertView) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// id
	state.Id = types.StringPointerValue(response.Id)
	// crypto_provider
	state.CryptoProvider = types.StringPointerValue(response.CryptoProvider)
	// expires
	state.Expires = types.StringValue(response.Expires.Format(time.RFC3339))
	// group_id
	state.GroupId = types.StringPointerValue(response.Id)
	// issuer_dn
	state.IssuerDn = types.StringPointerValue(response.IssuerDN)
	// key_algorithm
	state.KeyAlgorithm = types.StringPointerValue(response.KeyAlgorithm)
	// key_size
	state.KeySize = types.Int64PointerValue(response.KeySize)
	// serial_number
	state.SerialNumber = types.StringPointerValue(response.SerialNumber)
	// sha1_fingerprint
	state.Sha1Fingerprint = types.StringPointerValue(response.Sha1Fingerprint)
	// sha256_fingerprint
	state.Sha256Fingerprint = types.StringPointerValue(response.Sha256Fingerprint)
	// signature_algorithm
	state.SignatureAlgorithm = types.StringPointerValue(response.SignatureAlgorithm)
	// status
	state.Status = types.StringPointerValue(response.Status)
	// subject_alternative_names
	state.SubjectAlternativeNames, diags = types.ListValueFrom(context.Background(), types.StringType, response.SubjectAlternativeNames)
	respDiags.Append(diags...)
	// subject_dn
	state.SubjectDn = types.StringPointerValue(response.SubjectDN)
	// valid_from
	state.ValidFrom = types.StringValue(response.ValidFrom.Format(time.RFC3339))
	// version
	state.Version = types.Int64PointerValue(response.Version)
	return respDiags
}

func (r *certificatesGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data certificatesGroupResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.CertificatesGroupsAPI.ImportFeatureCert(config.AuthContext(ctx, r.providerConfig), data.GroupName.ValueString())
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.CertificatesGroupsAPI.ImportFeatureCertExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpErrorCustomId(ctx, &resp.Diagnostics, "An error occurred while creating the certificatesGroup", err, httpResp, &customId)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificatesGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data certificatesGroupResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.CertificatesGroupsAPI.GetCertificateFromGroup(config.AuthContext(ctx, r.providerConfig), data.GroupName.ValueString(), data.GroupId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "Certificates Group", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpErrorCustomId(ctx, &resp.Diagnostics, "An error occurred while reading the certificatesGroup", err, httpResp, &customId)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificatesGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// This method won't be called since all non-computed attributes require replacement
}

func (r *certificatesGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data certificatesGroupResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.CertificatesGroupsAPI.DeleteCertificateFromGroup(config.AuthContext(ctx, r.providerConfig), data.GroupName.ValueString(), data.GroupId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpErrorCustomId(ctx, &resp.Diagnostics, "An error occurred while deleting the certificatesGroup", err, httpResp, &customId)
	}
}

func (r *certificatesGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	split := strings.Split(req.ID, "/")
	if len(split) != 2 {
		resp.Diagnostics.AddError(providererror.InvalidResourceIdForImport, "Expected [group_name]/[group_id]. Got: "+req.ID)
		return
	}
	// Set the required attributes to read the resource
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("group_name"), split[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("group_id"), split[1])...)
}
