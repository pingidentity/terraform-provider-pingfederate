// Code generated by ping-terraform-plugin-framework-generator

package idptospadaptermapping

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributecontractfulfillment"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/attributesources"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/id"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/common/issuancecriteria"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/configvalidators"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &idpToSpAdapterMappingResource{}
	_ resource.ResourceWithConfigure   = &idpToSpAdapterMappingResource{}
	_ resource.ResourceWithImportState = &idpToSpAdapterMappingResource{}
)

func IdpToSpAdapterMappingResource() resource.Resource {
	return &idpToSpAdapterMappingResource{}
}

type idpToSpAdapterMappingResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *idpToSpAdapterMappingResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_idp_to_sp_adapter_mapping"
}

func (r *idpToSpAdapterMappingResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type idpToSpAdapterMappingResourceModel struct {
	ApplicationIconUrl               types.String `tfsdk:"application_icon_url"`
	ApplicationName                  types.String `tfsdk:"application_name"`
	AttributeContractFulfillment     types.Map    `tfsdk:"attribute_contract_fulfillment"`
	AttributeSources                 types.Set    `tfsdk:"attribute_sources"`
	DefaultTargetResource            types.String `tfsdk:"default_target_resource"`
	Id                               types.String `tfsdk:"id"`
	IssuanceCriteria                 types.Object `tfsdk:"issuance_criteria"`
	LicenseConnectionGroupAssignment types.String `tfsdk:"license_connection_group_assignment"`
	MappingId                        types.String `tfsdk:"mapping_id"`
	SourceId                         types.String `tfsdk:"source_id"`
	TargetId                         types.String `tfsdk:"target_id"`
}

func (r *idpToSpAdapterMappingResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage IdP-to-SP adapter mappings",
		Attributes: map[string]schema.Attribute{
			"application_icon_url": schema.StringAttribute{
				Optional:    true,
				Description: "The application icon URL.",
				Validators: []validator.String{
					configvalidators.ValidUrl(),
					stringvalidator.LengthAtLeast(1),
				},
			},
			"application_name": schema.StringAttribute{
				Optional:    true,
				Description: "The application name.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"attribute_contract_fulfillment": attributecontractfulfillment.ToSchemaWithSuffix(true, false, false, " Map value `subject` is required."),
			"attribute_sources":              attributesources.ToSchema(0, false),
			"default_target_resource": schema.StringAttribute{
				Optional:    true,
				Description: "Default target URL for this adapter-to-adapter mapping configuration.",
				Validators: []validator.String{
					configvalidators.ValidUrl(),
					stringvalidator.LengthAtLeast(1),
				},
			},
			"issuance_criteria": issuancecriteria.ToSchema(),
			"license_connection_group_assignment": schema.StringAttribute{
				Optional:    true,
				Description: "The license connection group.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"mapping_id": schema.StringAttribute{
				Optional:    false,
				Computed:    true,
				Description: "The id of the IdP-to-SP Adapter mapping. This field is read-only.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"source_id": schema.StringAttribute{
				Required:    true,
				Description: "The id of the IdP Adapter.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"target_id": schema.StringAttribute{
				Required:    true,
				Description: "The id of the SP Adapter.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
		},
	}
	id.ToSchema(&resp.Schema)
}

func (model *idpToSpAdapterMappingResourceModel) buildClientStruct() (*client.IdpToSpAdapterMapping, error) {
	result := &client.IdpToSpAdapterMapping{}
	var err error
	// application_icon_url
	result.ApplicationIconUrl = model.ApplicationIconUrl.ValueStringPointer()
	// application_name
	result.ApplicationName = model.ApplicationName.ValueStringPointer()
	// attribute_contract_fulfillment
	result.AttributeContractFulfillment, err = attributecontractfulfillment.ClientStruct(model.AttributeContractFulfillment)
	if err != nil {
		return nil, err
	}

	// attribute_sources
	result.AttributeSources, err = attributesources.ClientStruct(model.AttributeSources)
	if err != nil {
		return nil, err
	}

	// default_target_resource
	result.DefaultTargetResource = model.DefaultTargetResource.ValueStringPointer()
	// issuance_criteria
	result.IssuanceCriteria, err = issuancecriteria.ClientStruct(model.IssuanceCriteria)
	if err != nil {
		return nil, err
	}

	// license_connection_group_assignment
	result.LicenseConnectionGroupAssignment = model.LicenseConnectionGroupAssignment.ValueStringPointer()
	// source_id
	result.SourceId = model.SourceId.ValueString()
	// target_id
	result.TargetId = model.TargetId.ValueString()
	return result, nil
}

func (state *idpToSpAdapterMappingResourceModel) readClientResponse(response *client.IdpToSpAdapterMapping) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// id
	state.Id = types.StringPointerValue(response.Id)
	// application_icon_url
	state.ApplicationIconUrl = types.StringPointerValue(response.ApplicationIconUrl)
	// application_name
	state.ApplicationName = types.StringPointerValue(response.ApplicationName)
	// attribute_contract_fulfillment
	attributeContractFulfillmentValue, diags := attributecontractfulfillment.ToState(context.Background(), &response.AttributeContractFulfillment)
	respDiags.Append(diags...)

	state.AttributeContractFulfillment = attributeContractFulfillmentValue
	// attribute_sources
	attributeSourcesValue, diags := attributesources.ToState(context.Background(), response.AttributeSources)
	respDiags.Append(diags...)

	state.AttributeSources = attributeSourcesValue
	// default_target_resource
	state.DefaultTargetResource = types.StringPointerValue(response.DefaultTargetResource)
	// issuance_criteria
	issuanceCriteriaValue, diags := issuancecriteria.ToState(context.Background(), response.IssuanceCriteria)
	respDiags.Append(diags...)

	state.IssuanceCriteria = issuanceCriteriaValue
	// license_connection_group_assignment
	state.LicenseConnectionGroupAssignment = types.StringPointerValue(response.LicenseConnectionGroupAssignment)
	// mapping_id
	state.MappingId = types.StringPointerValue(response.Id)
	// source_id
	state.SourceId = types.StringValue(response.SourceId)
	// target_id
	state.TargetId = types.StringValue(response.TargetId)
	return respDiags
}

func (r *idpToSpAdapterMappingResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data idpToSpAdapterMappingResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, err := data.buildClientStruct()
	if err != nil {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Failed to build client struct for the idpToSpAdapterMapping: "+err.Error())
		return
	}
	apiCreateRequest := r.apiClient.IdpToSpAdapterMappingAPI.CreateIdpToSpAdapterMapping(config.AuthContext(ctx, r.providerConfig))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.IdpToSpAdapterMappingAPI.CreateIdpToSpAdapterMappingExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the idpToSpAdapterMapping", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *idpToSpAdapterMappingResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data idpToSpAdapterMappingResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.IdpToSpAdapterMappingAPI.GetIdpToSpAdapterMappingsById(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "IdP to SP Adapter Mappint", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the idpToSpAdapterMapping", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *idpToSpAdapterMappingResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data idpToSpAdapterMappingResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, err := data.buildClientStruct()
	if err != nil {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Failed to build client struct for the idpToSpAdapterMapping: "+err.Error())
		return
	}
	apiUpdateRequest := r.apiClient.IdpToSpAdapterMappingAPI.UpdateIdpToSpAdapterMapping(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.IdpToSpAdapterMappingAPI.UpdateIdpToSpAdapterMappingExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the idpToSpAdapterMapping", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *idpToSpAdapterMappingResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data idpToSpAdapterMappingResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.IdpToSpAdapterMappingAPI.DeleteIdpToSpAdapterMappingsById(config.AuthContext(ctx, r.providerConfig), data.MappingId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the idpToSpAdapterMapping", err, httpResp)
	}
}

func (r *idpToSpAdapterMappingResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to mapping_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("mapping_id"), req, resp)
}
