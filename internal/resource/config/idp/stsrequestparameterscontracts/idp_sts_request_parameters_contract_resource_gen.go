// Code generated by ping-terraform-plugin-framework-generator

package idpstsrequestparameterscontracts

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/pingfederate-go-client/v1210/configurationapi"
	"github.com/pingidentity/terraform-provider-pingfederate/internal/resource/config"
	internaltypes "github.com/pingidentity/terraform-provider-pingfederate/internal/types"
)

var (
	_ resource.Resource                = &idpStsRequestParametersContractResource{}
	_ resource.ResourceWithConfigure   = &idpStsRequestParametersContractResource{}
	_ resource.ResourceWithImportState = &idpStsRequestParametersContractResource{}
)

func IdpStsRequestParametersContractResource() resource.Resource {
	return &idpStsRequestParametersContractResource{}
}

type idpStsRequestParametersContractResource struct {
	providerConfig internaltypes.ProviderConfiguration
	apiClient      *client.APIClient
}

func (r *idpStsRequestParametersContractResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_idp_sts_request_parameters_contract"
}

func (r *idpStsRequestParametersContractResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerCfg := req.ProviderData.(internaltypes.ResourceConfiguration)
	r.providerConfig = providerCfg.ProviderConfig
	r.apiClient = providerCfg.ApiClient
}

type idpStsRequestParametersContractResourceModel struct {
	ContractId types.String `tfsdk:"contract_id"`
	Name       types.String `tfsdk:"name"`
	Parameters types.Set    `tfsdk:"parameters"`
}

func (r *idpStsRequestParametersContractResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage STS request parameters contracts.",
		Attributes: map[string]schema.Attribute{
			"contract_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the Security Token Service request parameter contract.<br>Note: Can't be modified after creation.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: "The name of the Security Token Service request parameter contract.<br>Note: Can't be modified after creation.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"parameters": schema.SetAttribute{
				ElementType: types.StringType,
				Required:    true,
				Description: "The list of parameters within the Security Token Service request parameter contract.",
				Validators: []validator.Set{
					setvalidator.SizeAtLeast(1),
				},
			},
		},
	}
}

func (model *idpStsRequestParametersContractResourceModel) buildClientStruct() (*client.StsRequestParametersContract, diag.Diagnostics) {
	result := &client.StsRequestParametersContract{}
	// contract_id
	result.Id = model.ContractId.ValueString()
	// name
	result.Name = model.Name.ValueString()
	// parameters
	result.Parameters = []string{}
	for _, parametersElement := range model.Parameters.Elements() {
		result.Parameters = append(result.Parameters, parametersElement.(types.String).ValueString())
	}

	return result, nil
}

func (state *idpStsRequestParametersContractResourceModel) readClientResponse(response *client.StsRequestParametersContract) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// contract_id
	state.ContractId = types.StringValue(response.Id)
	// name
	state.Name = types.StringValue(response.Name)
	// parameters
	state.Parameters, diags = types.SetValueFrom(context.Background(), types.StringType, response.Parameters)
	respDiags.Append(diags...)
	return respDiags
}

func (r *idpStsRequestParametersContractResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data idpStsRequestParametersContractResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.IdpStsRequestParametersContractsAPI.CreateStsRequestParamContract(config.AuthContext(ctx, r.providerConfig))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.IdpStsRequestParametersContractsAPI.CreateStsRequestParamContractExecute(apiCreateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the idpStsRequestParametersContract", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *idpStsRequestParametersContractResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data idpStsRequestParametersContractResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.IdpStsRequestParametersContractsAPI.GetStsRequestParamContractById(config.AuthContext(ctx, r.providerConfig), data.ContractId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			config.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "IdP STS Request Parameters Contract", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the idpStsRequestParametersContract", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *idpStsRequestParametersContractResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data idpStsRequestParametersContractResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.IdpStsRequestParametersContractsAPI.UpdateStsRequestParamContractById(config.AuthContext(ctx, r.providerConfig), data.ContractId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.IdpStsRequestParametersContractsAPI.UpdateStsRequestParamContractByIdExecute(apiUpdateRequest)
	if err != nil {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the idpStsRequestParametersContract", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *idpStsRequestParametersContractResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data idpStsRequestParametersContractResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.IdpStsRequestParametersContractsAPI.DeleteStsRequestParamContractById(config.AuthContext(ctx, r.providerConfig), data.ContractId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		config.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the idpStsRequestParametersContract", err, httpResp)
	}
}

func (r *idpStsRequestParametersContractResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to contract_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("contract_id"), req, resp)
}
